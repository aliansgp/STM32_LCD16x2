
LCD16x2_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca0  08008ca0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca8  08008ca8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000850  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e0  200008e0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b66e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044f7  00000000  00000000  0003b72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001540  00000000  00000000  00041358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fad  00000000  00000000  00042898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f56c  00000000  00000000  00068845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d68  00000000  00000000  00087db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015bb19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064ac  00000000  00000000  0015bb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c2c 	.word	0x08008c2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008c2c 	.word	0x08008c2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LCD_init>:
	while(htim1.Instance->CNT <us);

}


void LCD_init(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

	LCD_send_cmd(0x02);		// To initialize LCD in 4-bit mode.
 8000578:	2002      	movs	r0, #2
 800057a:	f000 f837 	bl	80005ec <LCD_send_cmd>
	HAL_Delay(1);
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fdd4 	bl	800112c <HAL_Delay>
	LCD_send_cmd(0x28);		// To initialize LCD in 2 lines, 5x7 dots and 4bit mode.
 8000584:	2028      	movs	r0, #40	; 0x28
 8000586:	f000 f831 	bl	80005ec <LCD_send_cmd>
	HAL_Delay(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fdce 	bl	800112c <HAL_Delay>
	LCD_send_cmd(0x0C);
 8000590:	200c      	movs	r0, #12
 8000592:	f000 f82b 	bl	80005ec <LCD_send_cmd>
	HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fdc8 	bl	800112c <HAL_Delay>
	LCD_send_cmd(0x06);
 800059c:	2006      	movs	r0, #6
 800059e:	f000 f825 	bl	80005ec <LCD_send_cmd>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fdc2 	bl	800112c <HAL_Delay>
	LCD_send_cmd(0x80);
 80005a8:	2080      	movs	r0, #128	; 0x80
 80005aa:	f000 f81f 	bl	80005ec <LCD_send_cmd>
	HAL_Delay(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 fdbc 	bl	800112c <HAL_Delay>
//    LCD_send_cmd(0x00);
//    LCD_send_cmd(0x06);
//    LCD_send_cmd(0x00);
//    LCD_send_cmd(0x01);

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LCD_send_data>:


void LCD_send_data(char data){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]

	char datatosend;
	datatosend = ((data>>4)&0x0f);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	73fb      	strb	r3, [r7, #15]
	LCD_send(datatosend, 1);
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2101      	movs	r1, #1
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f827 	bl	8000620 <LCD_send>
	datatosend = ((data)&0x0f);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	73fb      	strb	r3, [r7, #15]
	LCD_send(datatosend, 1);
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f81e 	bl	8000620 <LCD_send>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LCD_send_cmd>:


void LCD_send_cmd(char cmd){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

    char datatosend;
    datatosend = ((cmd>>4)&0x0f);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	73fb      	strb	r3, [r7, #15]
    LCD_send(datatosend,0);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f80d 	bl	8000620 <LCD_send>
    datatosend = ((cmd)&0x0f);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	73fb      	strb	r3, [r7, #15]
    LCD_send(datatosend, 0);
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f804 	bl	8000620 <LCD_send>

}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <LCD_send>:


void LCD_send(char data, int rs){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GPIOE, RS_Pin, rs);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000636:	4822      	ldr	r0, [pc, #136]	; (80006c0 <LCD_send+0xa0>)
 8000638:	f001 f84a 	bl	80016d0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, D7_Pin, ((data>>3)&0x01));
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <LCD_send+0xa0>)
 8000650:	f001 f83e 	bl	80016d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, D6_Pin, ((data>>2)&0x01));
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	461a      	mov	r2, r3
 8000662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <LCD_send+0xa0>)
 8000668:	f001 f832 	bl	80016d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, D5_Pin, ((data>>1)&0x01));
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	085b      	lsrs	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4810      	ldr	r0, [pc, #64]	; (80006c0 <LCD_send+0xa0>)
 8000680:	f001 f826 	bl	80016d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, D4_Pin, ((data>>0)&0x01));
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <LCD_send+0xa0>)
 8000694:	f001 f81c 	bl	80016d0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, E_Pin, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <LCD_send+0xa0>)
 80006a0:	f001 f816 	bl	80016d0 <HAL_GPIO_WritePin>
    //LCD_delay(200);
    /*--working:
     *  HAL_Delay(4);
     */
    HAL_Delay(4);
 80006a4:	2004      	movs	r0, #4
 80006a6:	f000 fd41 	bl	800112c <HAL_Delay>
    //LCD_delay(4000000);
    HAL_GPIO_WritePin(GPIOE, E_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <LCD_send+0xa0>)
 80006b2:	f001 f80d 	bl	80016d0 <HAL_GPIO_WritePin>
    //LCD_delay(0);
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <LCD_send_string>:


void LCD_send_string(char *str){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	HAL_Delay(4);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f000 fd2d 	bl	800112c <HAL_Delay>
	while (*str) LCD_send_data(*str++);
 80006d2:	e006      	b.n	80006e2 <LCD_send_string+0x1e>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff6b 	bl	80005b8 <LCD_send_data>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f4      	bne.n	80006d4 <LCD_send_string+0x10>
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <LCD_cur>:


void LCD_cur(int row, int col){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]

    switch(row)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d003      	beq.n	800070c <LCD_cur+0x18>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d005      	beq.n	8000716 <LCD_cur+0x22>
 800070a:	e009      	b.n	8000720 <LCD_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000712:	603b      	str	r3, [r7, #0]
            break;
 8000714:	e004      	b.n	8000720 <LCD_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800071c:	603b      	str	r3, [r7, #0]
            break;
 800071e:	bf00      	nop
    }
    LCD_send_cmd(col);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff61 	bl	80005ec <LCD_send_cmd>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <LCD_cls>:


void LCD_cls(){
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
	//LCD_send_cmd(0x00);
	LCD_send_cmd(0x01);
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff ff58 	bl	80005ec <LCD_send_cmd>
	HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 fcf5 	bl	800112c <HAL_Delay>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b73      	ldr	r3, [pc, #460]	; (8000930 <MX_GPIO_Init+0x1e8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a72      	ldr	r2, [pc, #456]	; (8000930 <MX_GPIO_Init+0x1e8>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b70      	ldr	r3, [pc, #448]	; (8000930 <MX_GPIO_Init+0x1e8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <MX_GPIO_Init+0x1e8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a6b      	ldr	r2, [pc, #428]	; (8000930 <MX_GPIO_Init+0x1e8>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b69      	ldr	r3, [pc, #420]	; (8000930 <MX_GPIO_Init+0x1e8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b65      	ldr	r3, [pc, #404]	; (8000930 <MX_GPIO_Init+0x1e8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a64      	ldr	r2, [pc, #400]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b62      	ldr	r3, [pc, #392]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b5e      	ldr	r3, [pc, #376]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a5d      	ldr	r2, [pc, #372]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b5b      	ldr	r3, [pc, #364]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b57      	ldr	r3, [pc, #348]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a56      	ldr	r2, [pc, #344]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b54      	ldr	r3, [pc, #336]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a4f      	ldr	r2, [pc, #316]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <MX_GPIO_Init+0x1e8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RW_Pin|RS_Pin|E_Pin
 8000806:	2200      	movs	r2, #0
 8000808:	f64f 6108 	movw	r1, #65032	; 0xfe08
 800080c:	4849      	ldr	r0, [pc, #292]	; (8000934 <MX_GPIO_Init+0x1ec>)
 800080e:	f000 ff5f 	bl	80016d0 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2101      	movs	r1, #1
 8000816:	4848      	ldr	r0, [pc, #288]	; (8000938 <MX_GPIO_Init+0x1f0>)
 8000818:	f000 ff5a 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800081c:	2200      	movs	r2, #0
 800081e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000822:	4846      	ldr	r0, [pc, #280]	; (800093c <MX_GPIO_Init+0x1f4>)
 8000824:	f000 ff54 	bl	80016d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RW_Pin|RS_Pin|E_Pin
 8000828:	f64f 6308 	movw	r3, #65032	; 0xfe08
 800082c:	61fb      	str	r3, [r7, #28]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	483c      	ldr	r0, [pc, #240]	; (8000934 <MX_GPIO_Init+0x1ec>)
 8000842:	f000 fda9 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000846:	2301      	movs	r3, #1
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4836      	ldr	r0, [pc, #216]	; (8000938 <MX_GPIO_Init+0x1f0>)
 800085e:	f000 fd9b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000862:	2308      	movs	r3, #8
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000872:	2305      	movs	r3, #5
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	482e      	ldr	r0, [pc, #184]	; (8000938 <MX_GPIO_Init+0x1f0>)
 800087e:	f000 fd8b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000886:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	482a      	ldr	r0, [pc, #168]	; (8000940 <MX_GPIO_Init+0x1f8>)
 8000898:	f000 fd7e 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800089c:	2304      	movs	r3, #4
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4825      	ldr	r0, [pc, #148]	; (8000944 <MX_GPIO_Init+0x1fc>)
 80008b0:	f000 fd72 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c6:	2305      	movs	r3, #5
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	481c      	ldr	r0, [pc, #112]	; (8000944 <MX_GPIO_Init+0x1fc>)
 80008d2:	f000 fd61 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_GPIO_Init+0x1f4>)
 80008f0:	f000 fd52 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_GPIO_Init+0x1f4>)
 8000908:	f000 fd46 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000910:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0x1ec>)
 8000922:	f000 fd39 	bl	8001398 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40021000 	.word	0x40021000
 8000938:	40020800 	.word	0x40020800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400

08000948 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x50>)
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <MX_I2C1_Init+0x54>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x50>)
 8000954:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x58>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_I2C1_Init+0x50>)
 8000966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_I2C1_Init+0x50>)
 8000986:	f002 fac7 	bl	8002f18 <HAL_I2C_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000990:	f000 f996 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000ac 	.word	0x200000ac
 800099c:	40005400 	.word	0x40005400
 80009a0:	000186a0 	.word	0x000186a0

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f4:	2304      	movs	r3, #4
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <HAL_I2C_MspInit+0x8c>)
 8000a00:	f000 fcca 	bl	8001398 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400

08000a34 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <MX_I2S3_Init+0x58>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a44:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a58:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <MX_I2S3_Init+0x5c>)
 8000a5e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a74:	f002 fb94 	bl	80031a0 <HAL_I2S_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a7e:	f000 f91f 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000100 	.word	0x20000100
 8000a8c:	40003c00 	.word	0x40003c00
 8000a90:	00017700 	.word	0x00017700

08000a94 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <HAL_I2S_MspInit+0xf0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d15a      	bne.n	8000b7a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ac8:	23c0      	movs	r3, #192	; 0xc0
 8000aca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fc87 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ae0:	f000 f8ee 	bl	8000cc0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_I2S_MspInit+0xf4>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b48:	2306      	movs	r3, #6
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <HAL_I2S_MspInit+0xf8>)
 8000b54:	f000 fc20 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <HAL_I2S_MspInit+0xfc>)
 8000b76:	f000 fc0f 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3738      	adds	r7, #56	; 0x38
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40003c00 	.word	0x40003c00
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020800 	.word	0x40020800

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 fa55 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f825 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f7ff fdd1 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba6:	f7ff fecf 	bl	8000948 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000baa:	f7ff ff43 	bl	8000a34 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bae:	f000 f88d 	bl	8000ccc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bb2:	f000 f9ad 	bl	8000f10 <MX_TIM1_Init>
  MX_USB_HOST_Init();
 8000bb6:	f007 f881 	bl	8007cbc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000bba:	f7ff fcdb 	bl	8000574 <LCD_init>
  LCD_cur(0,0);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fd97 	bl	80006f4 <LCD_cur>
  LCD_cls();
 8000bc6:	f7ff fdb4 	bl	8000732 <LCD_cls>
  char str[16];
  sprintf(str, "number: %d", 25641);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	f246 4229 	movw	r2, #25641	; 0x6429
 8000bd0:	4905      	ldr	r1, [pc, #20]	; (8000be8 <main+0x54>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f007 fcac 	bl	8008530 <siprintf>
  LCD_send_string(str);
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fd72 	bl	80006c4 <LCD_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000be0:	f007 f892 	bl	8007d08 <MX_USB_HOST_Process>
 8000be4:	e7fc      	b.n	8000be0 <main+0x4c>
 8000be6:	bf00      	nop
 8000be8:	08008c44 	.word	0x08008c44

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	; 0x50
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	2230      	movs	r2, #48	; 0x30
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f007 fba0 	bl	8008340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <SystemClock_Config+0xcc>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <SystemClock_Config+0xcc>)
 8000c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <SystemClock_Config+0xcc>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 ff34 	bl	8003ae0 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c7e:	f000 f81f 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 f995 	bl	8003fd0 <HAL_RCC_ClockConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cac:	f000 f808 	bl	8000cc0 <Error_Handler>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3750      	adds	r7, #80	; 0x50
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40007000 	.word	0x40007000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <MX_SPI1_Init+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000d18:	220a      	movs	r2, #10
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_SPI1_Init+0x64>)
 8000d1e:	f003 fca3 	bl	8004668 <HAL_SPI_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d28:	f7ff ffca 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000148 	.word	0x20000148
 8000d34:	40013000 	.word	0x40013000

08000d38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_SPI_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12b      	bne.n	8000db2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d92:	23e0      	movs	r3, #224	; 0xe0
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da2:	2305      	movs	r3, #5
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_SPI_MspInit+0x8c>)
 8000dae:	f000 faf3 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40013000 	.word	0x40013000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e06:	2007      	movs	r0, #7
 8000e08:	f000 fa84 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f942 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <OTG_FS_IRQHandler+0x10>)
 8000e72:	f000 feb1 	bl	8001bd8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200005cc 	.word	0x200005cc

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f007 fa0c 	bl	80082cc <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20020000 	.word	0x20020000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	200001a0 	.word	0x200001a0
 8000ee8:	200008e0 	.word	0x200008e0

08000eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <MX_TIM1_Init+0x9c>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f34:	22a7      	movs	r2, #167	; 0xa7
 8000f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f5a:	f003 fc0e 	bl	800477a <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f64:	f7ff feac 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f76:	f003 fc4f 	bl	8004818 <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f80:	f7ff fe9e 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_TIM1_Init+0x98>)
 8000f92:	f003 fe43 	bl	8004c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f9c:	f7ff fe90 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001a4 	.word	0x200001a4
 8000fac:	40010000 	.word	0x40010000

08000fb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_TIM_Base_MspInit+0x3c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10d      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_TIM_Base_MspInit+0x40>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_TIM_Base_MspInit+0x40>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_TIM_Base_MspInit+0x40>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001010:	4c0b      	ldr	r4, [pc, #44]	; (8001040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101e:	f7ff ff65 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f007 f959 	bl	80082d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fdb5 	bl	8000b94 <main>
  bx  lr    
 800102a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800102c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001038:	08008cb0 	.word	0x08008cb0
  ldr r2, =_sbss
 800103c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001040:	200008e0 	.word	0x200008e0

08001044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_Init+0x40>)
 8001052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_Init+0x40>)
 800105e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x40>)
 800106a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f94f 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fea4 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023c00 	.word	0x40023c00

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f967 	bl	800137e <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f92f 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000004 	.word	0x20000004

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	200001ec 	.word	0x200001ec

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200001ec 	.word	0x200001ec

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <__NVIC_EnableIRQ+0x38>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff29 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff3e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff8e 	bl	8001268 <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5d 	bl	8001214 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff31 	bl	80011d8 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x328>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x310>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x334>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x334>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001704:	b08f      	sub	sp, #60	; 0x3c
 8001706:	af0a      	add	r7, sp, #40	; 0x28
 8001708:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e054      	b.n	80017be <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f006 fb22 	bl	8007d78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2203      	movs	r2, #3
 8001738:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fb50 	bl	8004df8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	687e      	ldr	r6, [r7, #4]
 8001760:	466d      	mov	r5, sp
 8001762:	f106 0410 	add.w	r4, r6, #16
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001772:	e885 0003 	stmia.w	r5, {r0, r1}
 8001776:	1d33      	adds	r3, r6, #4
 8001778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177a:	6838      	ldr	r0, [r7, #0]
 800177c:	f003 faca 	bl	8004d14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fb47 	bl	8004e1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	687e      	ldr	r6, [r7, #4]
 8001794:	466d      	mov	r5, sp
 8001796:	f106 0410 	add.w	r4, r6, #16
 800179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017aa:	1d33      	adds	r3, r6, #4
 80017ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f003 fcd0 	bl	8005154 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017c6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017c6:	b590      	push	{r4, r7, lr}
 80017c8:	b089      	sub	sp, #36	; 0x24
 80017ca:	af04      	add	r7, sp, #16
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	4608      	mov	r0, r1
 80017d0:	4611      	mov	r1, r2
 80017d2:	461a      	mov	r2, r3
 80017d4:	4603      	mov	r3, r0
 80017d6:	70fb      	strb	r3, [r7, #3]
 80017d8:	460b      	mov	r3, r1
 80017da:	70bb      	strb	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_HCD_HC_Init+0x28>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e076      	b.n	80018dc <HAL_HCD_HC_Init+0x116>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	333d      	adds	r3, #61	; 0x3d
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3338      	adds	r3, #56	; 0x38
 8001816:	787a      	ldrb	r2, [r7, #1]
 8001818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3340      	adds	r3, #64	; 0x40
 8001828:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800182a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3339      	adds	r3, #57	; 0x39
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	333f      	adds	r3, #63	; 0x3f
 800184c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001850:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	78ba      	ldrb	r2, [r7, #2]
 8001856:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800185a:	b2d0      	uxtb	r0, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	333a      	adds	r3, #58	; 0x3a
 8001868:	4602      	mov	r2, r0
 800186a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800186c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001870:	2b00      	cmp	r3, #0
 8001872:	da09      	bge.n	8001888 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	333b      	adds	r3, #59	; 0x3b
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e008      	b.n	800189a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	333b      	adds	r3, #59	; 0x3b
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	333c      	adds	r3, #60	; 0x3c
 80018a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018ac:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	787c      	ldrb	r4, [r7, #1]
 80018b4:	78ba      	ldrb	r2, [r7, #2]
 80018b6:	78f9      	ldrb	r1, [r7, #3]
 80018b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4623      	mov	r3, r4
 80018ca:	f003 fdc9 	bl	8005460 <USB_HC_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}

080018e4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_HCD_HC_Halt+0x1e>
 80018fe:	2302      	movs	r3, #2
 8001900:	e00f      	b.n	8001922 <HAL_HCD_HC_Halt+0x3e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f004 f819 	bl	800594a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	70fb      	strb	r3, [r7, #3]
 800193e:	460b      	mov	r3, r1
 8001940:	70bb      	strb	r3, [r7, #2]
 8001942:	4613      	mov	r3, r2
 8001944:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	333b      	adds	r3, #59	; 0x3b
 8001954:	78ba      	ldrb	r2, [r7, #2]
 8001956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	333f      	adds	r3, #63	; 0x3f
 8001966:	787a      	ldrb	r2, [r7, #1]
 8001968:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d112      	bne.n	8001996 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3342      	adds	r3, #66	; 0x42
 800197e:	2203      	movs	r2, #3
 8001980:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	333d      	adds	r3, #61	; 0x3d
 8001990:	7f3a      	ldrb	r2, [r7, #28]
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e008      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3342      	adds	r3, #66	; 0x42
 80019a4:	2202      	movs	r2, #2
 80019a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	f200 80c6 	bhi.w	8001b3c <HAL_HCD_HC_SubmitRequest+0x210>
 80019b0:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	08001b29 	.word	0x08001b29
 80019c0:	08001a2d 	.word	0x08001a2d
 80019c4:	08001aab 	.word	0x08001aab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019c8:	7c3b      	ldrb	r3, [r7, #16]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	f040 80b8 	bne.w	8001b40 <HAL_HCD_HC_SubmitRequest+0x214>
 80019d0:	78bb      	ldrb	r3, [r7, #2]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 80b4 	bne.w	8001b40 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019d8:	8b3b      	ldrh	r3, [r7, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d108      	bne.n	80019f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3355      	adds	r3, #85	; 0x55
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3355      	adds	r3, #85	; 0x55
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	3342      	adds	r3, #66	; 0x42
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a16:	e093      	b.n	8001b40 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3342      	adds	r3, #66	; 0x42
 8001a26:	2202      	movs	r2, #2
 8001a28:	701a      	strb	r2, [r3, #0]
      break;
 8001a2a:	e089      	b.n	8001b40 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a2c:	78bb      	ldrb	r3, [r7, #2]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11d      	bne.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3355      	adds	r3, #85	; 0x55
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	212c      	movs	r1, #44	; 0x2c
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3342      	adds	r3, #66	; 0x42
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a58:	e073      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	212c      	movs	r1, #44	; 0x2c
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	3342      	adds	r3, #66	; 0x42
 8001a68:	2202      	movs	r2, #2
 8001a6a:	701a      	strb	r2, [r3, #0]
      break;
 8001a6c:	e069      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3354      	adds	r3, #84	; 0x54
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3342      	adds	r3, #66	; 0x42
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
      break;
 8001a94:	e055      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3342      	adds	r3, #66	; 0x42
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	701a      	strb	r2, [r3, #0]
      break;
 8001aa8:	e04b      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001aaa:	78bb      	ldrb	r3, [r7, #2]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d11d      	bne.n	8001aec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	212c      	movs	r1, #44	; 0x2c
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	3355      	adds	r3, #85	; 0x55
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3342      	adds	r3, #66	; 0x42
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ad6:	e034      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	212c      	movs	r1, #44	; 0x2c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3342      	adds	r3, #66	; 0x42
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]
      break;
 8001aea:	e02a      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3354      	adds	r3, #84	; 0x54
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3342      	adds	r3, #66	; 0x42
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
      break;
 8001b12:	e016      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2202      	movs	r2, #2
 8001b24:	701a      	strb	r2, [r3, #0]
      break;
 8001b26:	e00c      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3342      	adds	r3, #66	; 0x42
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b3c:	bf00      	nop
 8001b3e:	e000      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b40:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3344      	adds	r3, #68	; 0x44
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	8b3a      	ldrh	r2, [r7, #24]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	202c      	movs	r0, #44	; 0x2c
 8001b5c:	fb00 f303 	mul.w	r3, r0, r3
 8001b60:	440b      	add	r3, r1
 8001b62:	334c      	adds	r3, #76	; 0x4c
 8001b64:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3360      	adds	r3, #96	; 0x60
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3350      	adds	r3, #80	; 0x50
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	3339      	adds	r3, #57	; 0x39
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	212c      	movs	r1, #44	; 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3361      	adds	r3, #97	; 0x61
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	222c      	movs	r2, #44	; 0x2c
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	3338      	adds	r3, #56	; 0x38
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	18d1      	adds	r1, r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f003 fd6c 	bl	80056a4 <USB_HC_StartXfer>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop

08001bd8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fa6d 	bl	80050ce <USB_GetMode>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	f040 80f6 	bne.w	8001de8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fa51 	bl	80050a8 <USB_ReadInterrupts>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80ec 	beq.w	8001de6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fa48 	bl	80050a8 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c22:	d104      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fa38 	bl	80050a8 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c42:	d104      	bne.n	8001c4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 fa28 	bl	80050a8 <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c62:	d104      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fa18 	bl	80050a8 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d103      	bne.n	8001c8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2202      	movs	r2, #2
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 fa0a 	bl	80050a8 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c9e:	d11c      	bne.n	8001cda <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ca8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cba:	2110      	movs	r1, #16
 8001cbc:	6938      	ldr	r0, [r7, #16]
 8001cbe:	f003 f8f9 	bl	8004eb4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cc2:	6938      	ldr	r0, [r7, #16]
 8001cc4:	f003 f92a 	bl	8004f1c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fb00 	bl	80052d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f006 f8cd 	bl	8007e74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f9e2 	bl	80050a8 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cee:	d102      	bne.n	8001cf6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f001 f89e 	bl	8002e32 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 f9d4 	bl	80050a8 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d106      	bne.n	8001d18 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f006 f896 	bl	8007e3c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2208      	movs	r2, #8
 8001d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 f9c3 	bl	80050a8 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	d101      	bne.n	8001d30 <HAL_HCD_IRQHandler+0x158>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_HCD_IRQHandler+0x15a>
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0210 	bic.w	r2, r2, #16
 8001d44:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 ffa1 	bl	8002c8e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0210 	orr.w	r2, r2, #16
 8001d5a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f9a1 	bl	80050a8 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d70:	d13a      	bne.n	8001de8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fdd6 	bl	8005928 <USB_HC_ReadInterrupt>
 8001d7c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e025      	b.n	8001dd0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d018      	beq.n	8001dca <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dae:	d106      	bne.n	8001dbe <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8ab 	bl	8001f12 <HCD_HC_IN_IRQHandler>
 8001dbc:	e005      	b.n	8001dca <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fbf9 	bl	80025bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3d4      	bcc.n	8001d84 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	e000      	b.n	8001de8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001de6:	bf00      	nop
    }
  }
}
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_HCD_Start+0x16>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e013      	b.n	8001e2c <HAL_HCD_Start+0x3e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fac2 	bl	800539c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 ffda 	bl	8004dd6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_HCD_Stop+0x16>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e00d      	b.n	8001e66 <HAL_HCD_Stop+0x32>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 feb0 	bl	8005bbc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fa64 	bl	8005348 <USB_ResetPort>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3360      	adds	r3, #96	; 0x60
 8001ea4:	781b      	ldrb	r3, [r3, #0]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	212c      	movs	r1, #44	; 0x2c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3350      	adds	r3, #80	; 0x50
 8001ecc:	681b      	ldr	r3, [r3, #0]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 faa8 	bl	800543c <USB_GetCurrentFrame>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fa83 	bl	800540e <USB_GetHostSpeed>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d11a      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2304      	movs	r3, #4
 8001f52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3361      	adds	r3, #97	; 0x61
 8001f62:	2206      	movs	r2, #6
 8001f64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fcea 	bl	800594a <USB_HC_Halt>
 8001f76:	e0af      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8e:	d11b      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3361      	adds	r3, #97	; 0x61
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fcc2 	bl	800594a <USB_HC_Halt>
 8001fc6:	e087      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d109      	bne.n	8001ff2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	461a      	mov	r2, r3
 8001fec:	2320      	movs	r3, #32
 8001fee:	6093      	str	r3, [r2, #8]
 8001ff0:	e072      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b08      	cmp	r3, #8
 8002006:	d11a      	bne.n	800203e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	461a      	mov	r2, r3
 8002016:	2308      	movs	r3, #8
 8002018:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3361      	adds	r3, #97	; 0x61
 8002028:	2205      	movs	r2, #5
 800202a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fc87 	bl	800594a <USB_HC_Halt>
 800203c:	e04c      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002054:	d11b      	bne.n	800208e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002068:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3361      	adds	r3, #97	; 0x61
 8002078:	2208      	movs	r2, #8
 800207a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fc5f 	bl	800594a <USB_HC_Halt>
 800208c:	e024      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b80      	cmp	r3, #128	; 0x80
 80020a2:	d119      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3361      	adds	r3, #97	; 0x61
 80020c4:	2206      	movs	r2, #6
 80020c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fc39 	bl	800594a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ee:	d112      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fc25 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002114:	e24e      	b.n	80025b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	f040 80df 	bne.w	80022ec <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3348      	adds	r3, #72	; 0x48
 8002144:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0159      	lsls	r1, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	440b      	add	r3, r1
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	202c      	movs	r0, #44	; 0x2c
 8002160:	fb00 f303 	mul.w	r3, r0, r3
 8002164:	440b      	add	r3, r1
 8002166:	3350      	adds	r3, #80	; 0x50
 8002168:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3361      	adds	r3, #97	; 0x61
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	461a      	mov	r2, r3
 800219c:	2301      	movs	r3, #1
 800219e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	333f      	adds	r3, #63	; 0x3f
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	333f      	adds	r3, #63	; 0x3f
 80021c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d111      	bne.n	80021ec <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 fbb9 	bl	800594a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	461a      	mov	r2, r3
 80021e6:	2310      	movs	r3, #16
 80021e8:	6093      	str	r3, [r2, #8]
 80021ea:	e03a      	b.n	8002262 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	333f      	adds	r3, #63	; 0x3f
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d009      	beq.n	8002214 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	333f      	adds	r3, #63	; 0x3f
 800220e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002210:	2b01      	cmp	r3, #1
 8002212:	d126      	bne.n	8002262 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	0151      	lsls	r1, r2, #5
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	440a      	add	r2, r1
 800222a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002232:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3360      	adds	r3, #96	; 0x60
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	b2d9      	uxtb	r1, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	202c      	movs	r0, #44	; 0x2c
 8002250:	fb00 f303 	mul.w	r3, r0, r3
 8002254:	4413      	add	r3, r2
 8002256:	3360      	adds	r3, #96	; 0x60
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f005 fe17 	bl	8007e90 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d12b      	bne.n	80022c2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	3348      	adds	r3, #72	; 0x48
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	202c      	movs	r0, #44	; 0x2c
 8002280:	fb00 f202 	mul.w	r2, r0, r2
 8002284:	440a      	add	r2, r1
 8002286:	3240      	adds	r2, #64	; 0x40
 8002288:	8812      	ldrh	r2, [r2, #0]
 800228a:	fbb3 f3f2 	udiv	r3, r3, r2
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 818e 	beq.w	80025b4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3354      	adds	r3, #84	; 0x54
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2d8      	uxtb	r0, r3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3354      	adds	r3, #84	; 0x54
 80022bc:	4602      	mov	r2, r0
 80022be:	701a      	strb	r2, [r3, #0]
}
 80022c0:	e178      	b.n	80025b4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3354      	adds	r3, #84	; 0x54
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2d8      	uxtb	r0, r3
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	3354      	adds	r3, #84	; 0x54
 80022e6:	4602      	mov	r2, r0
 80022e8:	701a      	strb	r2, [r3, #0]
}
 80022ea:	e163      	b.n	80025b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	f040 80f6 	bne.w	80024f0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3361      	adds	r3, #97	; 0x61
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d109      	bne.n	800232c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3360      	adds	r3, #96	; 0x60
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e0c9      	b.n	80024c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3361      	adds	r3, #97	; 0x61
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d109      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3360      	adds	r3, #96	; 0x60
 800234e:	2205      	movs	r2, #5
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e0b5      	b.n	80024c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3361      	adds	r3, #97	; 0x61
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d009      	beq.n	800237c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3361      	adds	r3, #97	; 0x61
 8002376:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002378:	2b08      	cmp	r3, #8
 800237a:	d150      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	335c      	adds	r3, #92	; 0x5c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	202c      	movs	r0, #44	; 0x2c
 8002394:	fb00 f303 	mul.w	r3, r0, r3
 8002398:	440b      	add	r3, r1
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	335c      	adds	r3, #92	; 0x5c
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d912      	bls.n	80023d8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	335c      	adds	r3, #92	; 0x5c
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3360      	adds	r3, #96	; 0x60
 80023d2:	2204      	movs	r2, #4
 80023d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023d6:	e073      	b.n	80024c0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3360      	adds	r3, #96	; 0x60
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002400:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002408:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800241c:	e050      	b.n	80024c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3361      	adds	r3, #97	; 0x61
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d122      	bne.n	8002478 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	3360      	adds	r3, #96	; 0x60
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800245a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002462:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e023      	b.n	80024c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3361      	adds	r3, #97	; 0x61
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b07      	cmp	r3, #7
 800248a:	d119      	bne.n	80024c0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	335c      	adds	r3, #92	; 0x5c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	202c      	movs	r0, #44	; 0x2c
 80024a4:	fb00 f303 	mul.w	r3, r0, r3
 80024a8:	440b      	add	r3, r1
 80024aa:	335c      	adds	r3, #92	; 0x5c
 80024ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3360      	adds	r3, #96	; 0x60
 80024bc:	2204      	movs	r2, #4
 80024be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	461a      	mov	r2, r3
 80024ce:	2302      	movs	r3, #2
 80024d0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	b2d9      	uxtb	r1, r3
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	202c      	movs	r0, #44	; 0x2c
 80024dc:	fb00 f303 	mul.w	r3, r0, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3360      	adds	r3, #96	; 0x60
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f005 fcd1 	bl	8007e90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024ee:	e061      	b.n	80025b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b10      	cmp	r3, #16
 8002504:	d156      	bne.n	80025b4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	333f      	adds	r3, #63	; 0x3f
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d111      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	335c      	adds	r3, #92	; 0x5c
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fa07 	bl	800594a <USB_HC_Halt>
 800253c:	e031      	b.n	80025a2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	333f      	adds	r3, #63	; 0x3f
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	333f      	adds	r3, #63	; 0x3f
 8002560:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002562:	2b02      	cmp	r3, #2
 8002564:	d11d      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	335c      	adds	r3, #92	; 0x5c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d110      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3361      	adds	r3, #97	; 0x61
 800258e:	2203      	movs	r2, #3
 8002590:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f003 f9d4 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	461a      	mov	r2, r3
 80025b0:	2310      	movs	r3, #16
 80025b2:	6093      	str	r3, [r2, #8]
}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d11a      	bne.n	8002622 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	2304      	movs	r3, #4
 80025fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3361      	adds	r3, #97	; 0x61
 800260c:	2206      	movs	r2, #6
 800260e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f995 	bl	800594a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002620:	e331      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d12e      	bne.n	8002696 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2320      	movs	r3, #32
 8002648:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	333d      	adds	r3, #61	; 0x3d
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	f040 8313 	bne.w	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	333d      	adds	r3, #61	; 0x3d
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f003 f95b 	bl	800594a <USB_HC_Halt>
}
 8002694:	e2f7      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d112      	bne.n	80026d4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 f93c 	bl	800594a <USB_HC_Halt>
}
 80026d2:	e2d8      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d140      	bne.n	800276c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	335c      	adds	r3, #92	; 0x5c
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d111      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	333d      	adds	r3, #61	; 0x3d
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2340      	movs	r3, #64	; 0x40
 8002734:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2301      	movs	r3, #1
 8002746:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3361      	adds	r3, #97	; 0x61
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f003 f8f0 	bl	800594a <USB_HC_Halt>
}
 800276a:	e28c      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d12c      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3361      	adds	r3, #97	; 0x61
 8002790:	2204      	movs	r2, #4
 8002792:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	333d      	adds	r3, #61	; 0x3d
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	335c      	adds	r3, #92	; 0x5c
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 f8c1 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2340      	movs	r3, #64	; 0x40
 80027d8:	6093      	str	r3, [r2, #8]
}
 80027da:	e254      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11a      	bne.n	8002828 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	461a      	mov	r2, r3
 8002800:	2308      	movs	r3, #8
 8002802:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3361      	adds	r3, #97	; 0x61
 8002812:	2205      	movs	r2, #5
 8002814:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f003 f892 	bl	800594a <USB_HC_Halt>
}
 8002826:	e22e      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b10      	cmp	r3, #16
 800283c:	d140      	bne.n	80028c0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	335c      	adds	r3, #92	; 0x5c
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	2203      	movs	r2, #3
 8002860:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	333d      	adds	r3, #61	; 0x3d
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d112      	bne.n	800289c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	333c      	adds	r3, #60	; 0x3c
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d108      	bne.n	800289c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	333d      	adds	r3, #61	; 0x3d
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 f84f 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	461a      	mov	r2, r3
 80028ba:	2310      	movs	r3, #16
 80028bc:	6093      	str	r3, [r2, #8]
}
 80028be:	e1e2      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b80      	cmp	r3, #128	; 0x80
 80028d4:	d164      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d111      	bne.n	8002902 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3361      	adds	r3, #97	; 0x61
 80028ec:	2206      	movs	r2, #6
 80028ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 f825 	bl	800594a <USB_HC_Halt>
 8002900:	e044      	b.n	800298c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	202c      	movs	r0, #44	; 0x2c
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	440b      	add	r3, r1
 8002920:	335c      	adds	r3, #92	; 0x5c
 8002922:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	335c      	adds	r3, #92	; 0x5c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d920      	bls.n	800297a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	335c      	adds	r3, #92	; 0x5c
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	b2d9      	uxtb	r1, r3
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	202c      	movs	r0, #44	; 0x2c
 8002966:	fb00 f303 	mul.w	r3, r0, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f005 fa8c 	bl	8007e90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002978:	e008      	b.n	800298c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3360      	adds	r3, #96	; 0x60
 8002988:	2202      	movs	r2, #2
 800298a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	461a      	mov	r2, r3
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	6093      	str	r3, [r2, #8]
}
 800299e:	e172      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b6:	d11b      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	2208      	movs	r2, #8
 80029c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 ffb8 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ec:	6093      	str	r3, [r2, #8]
}
 80029ee:	e14a      	b.n	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f040 813f 	bne.w	8002c86 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d17d      	bne.n	8002b18 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	333f      	adds	r3, #63	; 0x3f
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d00a      	beq.n	8002a58 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	333f      	adds	r3, #63	; 0x3f
 8002a50:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	f040 8100 	bne.w	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d113      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3355      	adds	r3, #85	; 0x55
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2d8      	uxtb	r0, r3
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	3355      	adds	r3, #85	; 0x55
 8002a84:	4602      	mov	r2, r0
 8002a86:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f040 80e3 	bne.w	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	334c      	adds	r3, #76	; 0x4c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80d8 	beq.w	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	334c      	adds	r3, #76	; 0x4c
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	202c      	movs	r0, #44	; 0x2c
 8002abe:	fb00 f202 	mul.w	r2, r0, r2
 8002ac2:	440a      	add	r2, r1
 8002ac4:	3240      	adds	r2, #64	; 0x40
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	202c      	movs	r0, #44	; 0x2c
 8002ad2:	fb00 f202 	mul.w	r2, r0, r2
 8002ad6:	440a      	add	r2, r1
 8002ad8:	3240      	adds	r2, #64	; 0x40
 8002ada:	8812      	ldrh	r2, [r2, #0]
 8002adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80b5 	beq.w	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3355      	adds	r3, #85	; 0x55
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	f083 0301 	eor.w	r3, r3, #1
 8002b02:	b2d8      	uxtb	r0, r3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3355      	adds	r3, #85	; 0x55
 8002b12:	4602      	mov	r2, r0
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e09f      	b.n	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3361      	adds	r3, #97	; 0x61
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d109      	bne.n	8002b40 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3360      	adds	r3, #96	; 0x60
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e08b      	b.n	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3361      	adds	r3, #97	; 0x61
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d109      	bne.n	8002b68 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3360      	adds	r3, #96	; 0x60
 8002b62:	2202      	movs	r2, #2
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e077      	b.n	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d109      	bne.n	8002b90 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3360      	adds	r3, #96	; 0x60
 8002b8a:	2205      	movs	r2, #5
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e063      	b.n	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3361      	adds	r3, #97	; 0x61
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d009      	beq.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3361      	adds	r3, #97	; 0x61
 8002bb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d14f      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	335c      	adds	r3, #92	; 0x5c
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	202c      	movs	r0, #44	; 0x2c
 8002bd0:	fb00 f303 	mul.w	r3, r0, r3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	335c      	adds	r3, #92	; 0x5c
 8002bd8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	335c      	adds	r3, #92	; 0x5c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d912      	bls.n	8002c14 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	335c      	adds	r3, #92	; 0x5c
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3360      	adds	r3, #96	; 0x60
 8002c0e:	2204      	movs	r2, #4
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e021      	b.n	8002c58 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c3c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c44:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	2302      	movs	r3, #2
 8002c68:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	b2d9      	uxtb	r1, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	202c      	movs	r0, #44	; 0x2c
 8002c74:	fb00 f303 	mul.w	r3, r0, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3360      	adds	r3, #96	; 0x60
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 f905 	bl	8007e90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c86:	bf00      	nop
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b08a      	sub	sp, #40	; 0x28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	0c5b      	lsrs	r3, r3, #17
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d004      	beq.n	8002cd4 <HCD_RXQLVL_IRQHandler+0x46>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	f000 80a9 	beq.w	8002e24 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cd2:	e0aa      	b.n	8002e2a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a6 	beq.w	8002e28 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3344      	adds	r3, #68	; 0x44
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 809b 	beq.w	8002e28 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3350      	adds	r3, #80	; 0x50
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	441a      	add	r2, r3
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	202c      	movs	r0, #44	; 0x2c
 8002d0c:	fb00 f303 	mul.w	r3, r0, r3
 8002d10:	440b      	add	r3, r1
 8002d12:	334c      	adds	r3, #76	; 0x4c
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d87a      	bhi.n	8002e10 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3344      	adds	r3, #68	; 0x44
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	b292      	uxth	r2, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f002 f960 	bl	8004ff8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3344      	adds	r3, #68	; 0x44
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	441a      	add	r2, r3
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	202c      	movs	r0, #44	; 0x2c
 8002d52:	fb00 f303 	mul.w	r3, r0, r3
 8002d56:	440b      	add	r3, r1
 8002d58:	3344      	adds	r3, #68	; 0x44
 8002d5a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	3350      	adds	r3, #80	; 0x50
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	441a      	add	r2, r3
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	202c      	movs	r0, #44	; 0x2c
 8002d76:	fb00 f303 	mul.w	r3, r0, r3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3350      	adds	r3, #80	; 0x50
 8002d7e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	0cdb      	lsrs	r3, r3, #19
 8002d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d94:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3340      	adds	r3, #64	; 0x40
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d13c      	bne.n	8002e28 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d039      	beq.n	8002e28 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dd2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3354      	adds	r3, #84	; 0x54
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	f083 0301 	eor.w	r3, r3, #1
 8002dfa:	b2d8      	uxtb	r0, r3
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3354      	adds	r3, #84	; 0x54
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	701a      	strb	r2, [r3, #0]
      break;
 8002e0e:	e00b      	b.n	8002e28 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3360      	adds	r3, #96	; 0x60
 8002e1e:	2204      	movs	r2, #4
 8002e20:	701a      	strb	r2, [r3, #0]
      break;
 8002e22:	e001      	b.n	8002e28 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e24:	bf00      	nop
 8002e26:	e000      	b.n	8002e2a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e28:	bf00      	nop
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e5e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d10b      	bne.n	8002e82 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f004 ffef 	bl	8007e58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d132      	bne.n	8002ef2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f043 0308 	orr.w	r3, r3, #8
 8002e92:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d126      	bne.n	8002eec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d113      	bne.n	8002ece <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002eac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eb0:	d106      	bne.n	8002ec0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 fa0b 	bl	80052d4 <USB_InitFSLSPClkSel>
 8002ebe:	e011      	b.n	8002ee4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fa04 	bl	80052d4 <USB_InitFSLSPClkSel>
 8002ecc:	e00a      	b.n	8002ee4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002edc:	461a      	mov	r2, r3
 8002ede:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ee2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f004 ffe1 	bl	8007eac <HAL_HCD_PortEnabled_Callback>
 8002eea:	e002      	b.n	8002ef2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f004 ffeb 	bl	8007ec8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d103      	bne.n	8002f04 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f043 0320 	orr.w	r3, r3, #32
 8002f02:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e12b      	b.n	8003182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fd30 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f001 fa20 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a81      	ldr	r2, [pc, #516]	; (800318c <HAL_I2C_Init+0x274>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d807      	bhi.n	8002f9c <HAL_I2C_Init+0x84>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a80      	ldr	r2, [pc, #512]	; (8003190 <HAL_I2C_Init+0x278>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e006      	b.n	8002faa <HAL_I2C_Init+0x92>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a7d      	ldr	r2, [pc, #500]	; (8003194 <HAL_I2C_Init+0x27c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0e7      	b.n	8003182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a78      	ldr	r2, [pc, #480]	; (8003198 <HAL_I2C_Init+0x280>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0c9b      	lsrs	r3, r3, #18
 8002fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a6a      	ldr	r2, [pc, #424]	; (800318c <HAL_I2C_Init+0x274>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d802      	bhi.n	8002fec <HAL_I2C_Init+0xd4>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	e009      	b.n	8003000 <HAL_I2C_Init+0xe8>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	4a69      	ldr	r2, [pc, #420]	; (800319c <HAL_I2C_Init+0x284>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	3301      	adds	r3, #1
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	495c      	ldr	r1, [pc, #368]	; (800318c <HAL_I2C_Init+0x274>)
 800301c:	428b      	cmp	r3, r1
 800301e:	d819      	bhi.n	8003054 <HAL_I2C_Init+0x13c>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e59      	subs	r1, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fbb1 f3f3 	udiv	r3, r1, r3
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003034:	400b      	ands	r3, r1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_I2C_Init+0x138>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1e59      	subs	r1, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fbb1 f3f3 	udiv	r3, r1, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	e051      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 8003050:	2304      	movs	r3, #4
 8003052:	e04f      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d111      	bne.n	8003080 <HAL_I2C_Init+0x168>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	440b      	add	r3, r1
 800306a:	fbb0 f3f3 	udiv	r3, r0, r3
 800306e:	3301      	adds	r3, #1
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e012      	b.n	80030a6 <HAL_I2C_Init+0x18e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	0099      	lsls	r1, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	fbb0 f3f3 	udiv	r3, r0, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Init+0x196>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e022      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10e      	bne.n	80030d4 <HAL_I2C_Init+0x1bc>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1e58      	subs	r0, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	440b      	add	r3, r1
 80030c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d2:	e00f      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	6809      	ldr	r1, [r1, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6911      	ldr	r1, [r2, #16]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	430b      	orrs	r3, r1
 8003136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	000186a0 	.word	0x000186a0
 8003190:	001e847f 	.word	0x001e847f
 8003194:	003d08ff 	.word	0x003d08ff
 8003198:	431bde83 	.word	0x431bde83
 800319c:	10624dd3 	.word	0x10624dd3

080031a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e128      	b.n	8003404 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a90      	ldr	r2, [pc, #576]	; (800340c <HAL_I2S_Init+0x26c>)
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fd fc61 	bl	8000a94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031e8:	f023 030f 	bic.w	r3, r3, #15
 80031ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2202      	movs	r2, #2
 80031f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d060      	beq.n	80032c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003206:	2310      	movs	r3, #16
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e001      	b.n	8003210 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b20      	cmp	r3, #32
 8003216:	d802      	bhi.n	800321e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800321e:	2001      	movs	r0, #1
 8003220:	f001 f9c4 	bl	80045ac <HAL_RCCEx_GetPeriphCLKFreq>
 8003224:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322e:	d125      	bne.n	800327c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	3305      	adds	r3, #5
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e01f      	b.n	800329a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	461a      	mov	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	3305      	adds	r3, #5
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	e00e      	b.n	800329a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	461a      	mov	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	3305      	adds	r3, #5
 8003298:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4a5c      	ldr	r2, [pc, #368]	; (8003410 <HAL_I2S_Init+0x270>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	08db      	lsrs	r3, r3, #3
 80032a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e003      	b.n	80032c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032c0:	2302      	movs	r3, #2
 80032c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d902      	bls.n	80032d4 <HAL_I2S_Init+0x134>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2bff      	cmp	r3, #255	; 0xff
 80032d2:	d907      	bls.n	80032e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f043 0210 	orr.w	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e08f      	b.n	8003404 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	ea42 0103 	orr.w	r1, r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003302:	f023 030f 	bic.w	r3, r3, #15
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6851      	ldr	r1, [r2, #4]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6892      	ldr	r2, [r2, #8]
 800330e:	4311      	orrs	r1, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68d2      	ldr	r2, [r2, #12]
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6992      	ldr	r2, [r2, #24]
 800331a:	430a      	orrs	r2, r1
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003326:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d161      	bne.n	80033f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a38      	ldr	r2, [pc, #224]	; (8003414 <HAL_I2S_Init+0x274>)
 8003334:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a37      	ldr	r2, [pc, #220]	; (8003418 <HAL_I2S_Init+0x278>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_I2S_Init+0x1a4>
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_I2S_Init+0x27c>)
 8003342:	e001      	b.n	8003348 <HAL_I2S_Init+0x1a8>
 8003344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	4932      	ldr	r1, [pc, #200]	; (8003418 <HAL_I2S_Init+0x278>)
 8003350:	428a      	cmp	r2, r1
 8003352:	d101      	bne.n	8003358 <HAL_I2S_Init+0x1b8>
 8003354:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_I2S_Init+0x27c>)
 8003356:	e001      	b.n	800335c <HAL_I2S_Init+0x1bc>
 8003358:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800335c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003360:	f023 030f 	bic.w	r3, r3, #15
 8003364:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <HAL_I2S_Init+0x278>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_I2S_Init+0x1d4>
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_I2S_Init+0x27c>)
 8003372:	e001      	b.n	8003378 <HAL_I2S_Init+0x1d8>
 8003374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003378:	2202      	movs	r2, #2
 800337a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a25      	ldr	r2, [pc, #148]	; (8003418 <HAL_I2S_Init+0x278>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_I2S_Init+0x1ea>
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_I2S_Init+0x27c>)
 8003388:	e001      	b.n	800338e <HAL_I2S_Init+0x1ee>
 800338a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339a:	d003      	beq.n	80033a4 <HAL_I2S_Init+0x204>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	e001      	b.n	80033b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033ba:	4313      	orrs	r3, r2
 80033bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033c4:	4313      	orrs	r3, r2
 80033c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <HAL_I2S_Init+0x278>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_I2S_Init+0x24c>
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_I2S_Init+0x27c>)
 80033ea:	e001      	b.n	80033f0 <HAL_I2S_Init+0x250>
 80033ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f0:	897a      	ldrh	r2, [r7, #10]
 80033f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	08003517 	.word	0x08003517
 8003410:	cccccccd 	.word	0xcccccccd
 8003414:	0800362d 	.word	0x0800362d
 8003418:	40003800 	.word	0x40003800
 800341c:	40003400 	.word	0x40003400

08003420 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	881a      	ldrh	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10e      	bne.n	80034b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ffb8 	bl	8003420 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	b292      	uxth	r2, r2
 80034cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	1c9a      	adds	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10e      	bne.n	800350e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff93 	bl	8003434 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b04      	cmp	r3, #4
 8003530:	d13a      	bne.n	80035a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d109      	bne.n	8003550 <I2S_IRQHandler+0x3a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d102      	bne.n	8003550 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffb4 	bl	80034b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d126      	bne.n	80035a8 <I2S_IRQHandler+0x92>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b20      	cmp	r3, #32
 8003566:	d11f      	bne.n	80035a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003576:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f043 0202 	orr.w	r2, r3, #2
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff50 	bl	8003448 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d136      	bne.n	8003622 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d109      	bne.n	80035d2 <I2S_IRQHandler+0xbc>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d102      	bne.n	80035d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff45 	bl	800345c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d122      	bne.n	8003622 <I2S_IRQHandler+0x10c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d11b      	bne.n	8003622 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f043 0204 	orr.w	r2, r3, #4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff13 	bl	8003448 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a92      	ldr	r2, [pc, #584]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003646:	4b92      	ldr	r3, [pc, #584]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a8b      	ldr	r2, [pc, #556]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003664:	4b8a      	ldr	r3, [pc, #552]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003666:	e001      	b.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003668:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003678:	d004      	beq.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 8099 	bne.w	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f925 	bl	80038e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9c8 	bl	8003a48 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d13a      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d035      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036d6:	4b6e      	ldr	r3, [pc, #440]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d8:	e001      	b.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4969      	ldr	r1, [pc, #420]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036e6:	428b      	cmp	r3, r1
 80036e8:	d101      	bne.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036ea:	4b69      	ldr	r3, [pc, #420]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ec:	e001      	b.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003706:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fe88 	bl	8003448 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b08      	cmp	r3, #8
 8003740:	f040 80c3 	bne.w	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80bd 	beq.w	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800375e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a49      	ldr	r2, [pc, #292]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800376a:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800376c:	e001      	b.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4944      	ldr	r1, [pc, #272]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800377a:	428b      	cmp	r3, r1
 800377c:	d101      	bne.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800377e:	4b44      	ldr	r3, [pc, #272]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003780:	e001      	b.n	8003786 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003786:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800378a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff fe4a 	bl	8003448 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037b4:	e089      	b.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d107      	bne.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8be 	bl	800394c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d107      	bne.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f8fd 	bl	80039e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d12f      	bne.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d02a      	beq.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800380c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381a:	e001      	b.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800381c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4919      	ldr	r1, [pc, #100]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003828:	428b      	cmp	r3, r1
 800382a:	d101      	bne.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800382c:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800382e:	e001      	b.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003834:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003838:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fdfa 	bl	8003448 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b08      	cmp	r3, #8
 800385c:	d136      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d031      	beq.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a07      	ldr	r2, [pc, #28]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003874:	e001      	b.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4902      	ldr	r1, [pc, #8]	; (800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003882:	428b      	cmp	r3, r1
 8003884:	d106      	bne.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003886:	4b02      	ldr	r3, [pc, #8]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003888:	e006      	b.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800388a:	bf00      	nop
 800388c:	40003800 	.word	0x40003800
 8003890:	40003400 	.word	0x40003400
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f043 0204 	orr.w	r2, r3, #4
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fdc0 	bl	8003448 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038c8:	e000      	b.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ca:	bf00      	nop
}
 80038cc:	bf00      	nop
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c99      	adds	r1, r3, #2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6251      	str	r1, [r2, #36]	; 0x24
 80038fa:	881a      	ldrh	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003928:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ffc9 	bl	80038d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c99      	adds	r1, r3, #2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6251      	str	r1, [r2, #36]	; 0x24
 800395e:	8819      	ldrh	r1, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <I2SEx_TxISR_I2SExt+0x90>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <I2SEx_TxISR_I2SExt+0x22>
 800396a:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <I2SEx_TxISR_I2SExt+0x94>)
 800396c:	e001      	b.n	8003972 <I2SEx_TxISR_I2SExt+0x26>
 800396e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003972:	460a      	mov	r2, r1
 8003974:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d121      	bne.n	80039d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <I2SEx_TxISR_I2SExt+0x90>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <I2SEx_TxISR_I2SExt+0x50>
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <I2SEx_TxISR_I2SExt+0x94>)
 800399a:	e001      	b.n	80039a0 <I2SEx_TxISR_I2SExt+0x54>
 800399c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	490d      	ldr	r1, [pc, #52]	; (80039dc <I2SEx_TxISR_I2SExt+0x90>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d101      	bne.n	80039b0 <I2SEx_TxISR_I2SExt+0x64>
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <I2SEx_TxISR_I2SExt+0x94>)
 80039ae:	e001      	b.n	80039b4 <I2SEx_TxISR_I2SExt+0x68>
 80039b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff81 	bl	80038d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40003800 	.word	0x40003800
 80039e0:	40003400 	.word	0x40003400

080039e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68d8      	ldr	r0, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	1c99      	adds	r1, r3, #2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039fc:	b282      	uxth	r2, r0
 80039fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d113      	bne.n	8003a40 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a26:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff4a 	bl	80038d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <I2SEx_RxISR_I2SExt+0x90>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <I2SEx_RxISR_I2SExt+0x16>
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <I2SEx_RxISR_I2SExt+0x94>)
 8003a5c:	e001      	b.n	8003a62 <I2SEx_RxISR_I2SExt+0x1a>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a62:	68d8      	ldr	r0, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	1c99      	adds	r1, r3, #2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a6e:	b282      	uxth	r2, r0
 8003a70:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d121      	bne.n	8003ace <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <I2SEx_RxISR_I2SExt+0x90>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <I2SEx_RxISR_I2SExt+0x50>
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <I2SEx_RxISR_I2SExt+0x94>)
 8003a96:	e001      	b.n	8003a9c <I2SEx_RxISR_I2SExt+0x54>
 8003a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	490d      	ldr	r1, [pc, #52]	; (8003ad8 <I2SEx_RxISR_I2SExt+0x90>)
 8003aa4:	428b      	cmp	r3, r1
 8003aa6:	d101      	bne.n	8003aac <I2SEx_RxISR_I2SExt+0x64>
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <I2SEx_RxISR_I2SExt+0x94>)
 8003aaa:	e001      	b.n	8003ab0 <I2SEx_RxISR_I2SExt+0x68>
 8003aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ff03 	bl	80038d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40003800 	.word	0x40003800
 8003adc:	40003400 	.word	0x40003400

08003ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e267      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d075      	beq.n	8003bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003afe:	4b88      	ldr	r3, [pc, #544]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d00c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0a:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d112      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b16:	4b82      	ldr	r3, [pc, #520]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b22:	d10b      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05b      	beq.n	8003be8 <HAL_RCC_OscConfig+0x108>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d157      	bne.n	8003be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e242      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d106      	bne.n	8003b54 <HAL_RCC_OscConfig+0x74>
 8003b46:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a75      	ldr	r2, [pc, #468]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e01d      	b.n	8003b90 <HAL_RCC_OscConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x98>
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6f      	ldr	r2, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6c      	ldr	r2, [pc, #432]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e00b      	b.n	8003b90 <HAL_RCC_OscConfig+0xb0>
 8003b78:	4b69      	ldr	r3, [pc, #420]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a68      	ldr	r2, [pc, #416]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b66      	ldr	r3, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a65      	ldr	r2, [pc, #404]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fd fabc 	bl	8001114 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fab8 	bl	8001114 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e207      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xc0>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd faa8 	bl	8001114 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fd faa4 	bl	8001114 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1f3      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xe8>
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0e:	4b44      	ldr	r3, [pc, #272]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x152>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e1c7      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4937      	ldr	r1, [pc, #220]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	e03a      	b.n	8003cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_OscConfig+0x244>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd fa5d 	bl	8001114 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c5e:	f7fd fa59 	bl	8001114 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1a8      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7c:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4925      	ldr	r1, [pc, #148]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCC_OscConfig+0x244>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd fa3c 	bl	8001114 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fa38 	bl	8001114 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e187      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d036      	beq.n	8003d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_RCC_OscConfig+0x248>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fa1c 	bl	8001114 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fa18 	bl	8001114 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e167      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x200>
 8003cfe:	e01b      	b.n	8003d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_OscConfig+0x248>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fd fa05 	bl	8001114 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d0e:	f7fd fa01 	bl	8001114 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d907      	bls.n	8003d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e150      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
 8003d20:	40023800 	.word	0x40023800
 8003d24:	42470000 	.word	0x42470000
 8003d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ea      	bne.n	8003d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8097 	beq.w	8003e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b7d      	ldr	r3, [pc, #500]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a7c      	ldr	r2, [pc, #496]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b7a      	ldr	r3, [pc, #488]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d76:	4b77      	ldr	r3, [pc, #476]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d118      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d82:	4b74      	ldr	r3, [pc, #464]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd f9c1 	bl	8001114 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd f9bd 	bl	8001114 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e10c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x2ea>
 8003dbc:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a63      	ldr	r2, [pc, #396]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc8:	e01c      	b.n	8003e04 <HAL_RCC_OscConfig+0x324>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b05      	cmp	r3, #5
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x30c>
 8003dd2:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a5e      	ldr	r2, [pc, #376]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4a5b      	ldr	r2, [pc, #364]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0x324>
 8003dec:	4b58      	ldr	r3, [pc, #352]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a57      	ldr	r2, [pc, #348]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	4b55      	ldr	r3, [pc, #340]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a54      	ldr	r2, [pc, #336]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd f982 	bl	8001114 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd f97e 	bl	8001114 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0cb      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0ee      	beq.n	8003e14 <HAL_RCC_OscConfig+0x334>
 8003e36:	e014      	b.n	8003e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e38:	f7fd f96c 	bl	8001114 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fd f968 	bl	8001114 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e0b5      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ee      	bne.n	8003e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d105      	bne.n	8003e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e68:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80a1 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e7e:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d05c      	beq.n	8003f44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d141      	bne.n	8003f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd f93c 	bl	8001114 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fd f938 	bl	8001114 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e087      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	491b      	ldr	r1, [pc, #108]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd f911 	bl	8001114 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd f90d 	bl	8001114 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e05c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x416>
 8003f14:	e054      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd f8fa 	bl	8001114 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd f8f6 	bl	8001114 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e045      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x444>
 8003f42:	e03d      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e038      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000
 8003f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x4ec>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d028      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d121      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d11a      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d111      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800

08003fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0cc      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b68      	ldr	r3, [pc, #416]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d90c      	bls.n	800400c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b63      	ldr	r3, [pc, #396]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b8      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004024:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a58      	ldr	r2, [pc, #352]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800402e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b50      	ldr	r3, [pc, #320]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	494d      	ldr	r1, [pc, #308]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d044      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d119      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408a:	2b03      	cmp	r3, #3
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e067      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c0:	f7fd f828 	bl	8001114 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fd f824 	bl	8001114 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e04f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d20c      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4916      	ldr	r1, [pc, #88]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	490e      	ldr	r1, [pc, #56]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004156:	f000 f821 	bl	800419c <HAL_RCC_GetSysClockFreq>
 800415a:	4602      	mov	r2, r0
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	490a      	ldr	r1, [pc, #40]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	5ccb      	ldrb	r3, [r1, r3]
 800416a:	fa22 f303 	lsr.w	r3, r2, r3
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc ff88 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023c00 	.word	0x40023c00
 800418c:	40023800 	.word	0x40023800
 8004190:	08008c54 	.word	0x08008c54
 8004194:	20000000 	.word	0x20000000
 8004198:	20000004 	.word	0x20000004

0800419c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800419c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a0:	b094      	sub	sp, #80	; 0x50
 80041a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	647b      	str	r3, [r7, #68]	; 0x44
 80041a8:	2300      	movs	r3, #0
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	2300      	movs	r3, #0
 80041ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b4:	4b79      	ldr	r3, [pc, #484]	; (800439c <HAL_RCC_GetSysClockFreq+0x200>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d00d      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x40>
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	f200 80e1 	bhi.w	8004388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ce:	e0db      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041d4:	e0db      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041d6:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80041d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041da:	e0d8      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_GetSysClockFreq+0x200>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041e6:	4b6d      	ldr	r3, [pc, #436]	; (800439c <HAL_RCC_GetSysClockFreq+0x200>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f2:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_GetSysClockFreq+0x200>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	2200      	movs	r2, #0
 80041fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80041fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004204:	633b      	str	r3, [r7, #48]	; 0x30
 8004206:	2300      	movs	r3, #0
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800420e:	4622      	mov	r2, r4
 8004210:	462b      	mov	r3, r5
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	0159      	lsls	r1, r3, #5
 800421c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004220:	0150      	lsls	r0, r2, #5
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4621      	mov	r1, r4
 8004228:	1a51      	subs	r1, r2, r1
 800422a:	6139      	str	r1, [r7, #16]
 800422c:	4629      	mov	r1, r5
 800422e:	eb63 0301 	sbc.w	r3, r3, r1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004240:	4659      	mov	r1, fp
 8004242:	018b      	lsls	r3, r1, #6
 8004244:	4651      	mov	r1, sl
 8004246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800424a:	4651      	mov	r1, sl
 800424c:	018a      	lsls	r2, r1, #6
 800424e:	4651      	mov	r1, sl
 8004250:	ebb2 0801 	subs.w	r8, r2, r1
 8004254:	4659      	mov	r1, fp
 8004256:	eb63 0901 	sbc.w	r9, r3, r1
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426e:	4690      	mov	r8, r2
 8004270:	4699      	mov	r9, r3
 8004272:	4623      	mov	r3, r4
 8004274:	eb18 0303 	adds.w	r3, r8, r3
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	462b      	mov	r3, r5
 800427c:	eb49 0303 	adc.w	r3, r9, r3
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800428e:	4629      	mov	r1, r5
 8004290:	024b      	lsls	r3, r1, #9
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004298:	4621      	mov	r1, r4
 800429a:	024a      	lsls	r2, r1, #9
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a2:	2200      	movs	r2, #0
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ac:	f7fb ffe0 	bl	8000270 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	e058      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_RCC_GetSysClockFreq+0x200>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	099b      	lsrs	r3, r3, #6
 80042c0:	2200      	movs	r2, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	4611      	mov	r1, r2
 80042c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	0159      	lsls	r1, r3, #5
 80042e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e6:	0150      	lsls	r0, r2, #5
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4641      	mov	r1, r8
 80042ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80042f2:	4649      	mov	r1, r9
 80042f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800430c:	ebb2 040a 	subs.w	r4, r2, sl
 8004310:	eb63 050b 	sbc.w	r5, r3, fp
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	00eb      	lsls	r3, r5, #3
 800431e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004322:	00e2      	lsls	r2, r4, #3
 8004324:	4614      	mov	r4, r2
 8004326:	461d      	mov	r5, r3
 8004328:	4643      	mov	r3, r8
 800432a:	18e3      	adds	r3, r4, r3
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	464b      	mov	r3, r9
 8004330:	eb45 0303 	adc.w	r3, r5, r3
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004342:	4629      	mov	r1, r5
 8004344:	028b      	lsls	r3, r1, #10
 8004346:	4621      	mov	r1, r4
 8004348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800434c:	4621      	mov	r1, r4
 800434e:	028a      	lsls	r2, r1, #10
 8004350:	4610      	mov	r0, r2
 8004352:	4619      	mov	r1, r3
 8004354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004356:	2200      	movs	r2, #0
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	61fa      	str	r2, [r7, #28]
 800435c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004360:	f7fb ff86 	bl	8000270 <__aeabi_uldivmod>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4613      	mov	r3, r2
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_GetSysClockFreq+0x200>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	3301      	adds	r3, #1
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800437c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004386:	e002      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800438a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800438c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800438e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004390:	4618      	mov	r0, r3
 8004392:	3750      	adds	r7, #80	; 0x50
 8004394:	46bd      	mov	sp, r7
 8004396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	007a1200 	.word	0x007a1200

080043a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000000 	.word	0x20000000

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0a9b      	lsrs	r3, r3, #10
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4903      	ldr	r1, [pc, #12]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40023800 	.word	0x40023800
 80043e4:	08008c64 	.word	0x08008c64

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800440c:	2b00      	cmp	r3, #0
 800440e:	d035      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004410:	4b62      	ldr	r3, [pc, #392]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004416:	f7fc fe7d 	bl	8001114 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800441e:	f7fc fe79 	bl	8001114 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0b0      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004430:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	019a      	lsls	r2, r3, #6
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	071b      	lsls	r3, r3, #28
 8004448:	4955      	ldr	r1, [pc, #340]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004450:	4b52      	ldr	r3, [pc, #328]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004456:	f7fc fe5d 	bl	8001114 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800445e:	f7fc fe59 	bl	8001114 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e090      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004470:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8083 	beq.w	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a43      	ldr	r2, [pc, #268]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004498:	6413      	str	r3, [r2, #64]	; 0x40
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044a6:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3e      	ldr	r2, [pc, #248]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044b2:	f7fc fe2f 	bl	8001114 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ba:	f7fc fe2b 	bl	8001114 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e062      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044cc:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d8:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02f      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d028      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f6:	4b2a      	ldr	r3, [pc, #168]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004506:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800450c:	4a24      	ldr	r2, [pc, #144]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d114      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800451e:	f7fc fdf9 	bl	8001114 <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fc fdf5 	bl	8001114 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e02a      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ee      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004554:	d10d      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	490d      	ldr	r1, [pc, #52]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]
 8004570:	e005      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004578:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800457c:	6093      	str	r3, [r2, #8]
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	4905      	ldr	r1, [pc, #20]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	42470068 	.word	0x42470068
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40007000 	.word	0x40007000
 80045a8:	42470e40 	.word	0x42470e40

080045ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d13e      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045ca:	4b23      	ldr	r3, [pc, #140]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d12f      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045e0:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045e2:	617b      	str	r3, [r7, #20]
          break;
 80045e4:	e02f      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045e6:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f2:	d108      	bne.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e007      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	fb02 f303 	mul.w	r3, r2, r3
 8004628:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004630:	0f1b      	lsrs	r3, r3, #28
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	617b      	str	r3, [r7, #20]
          break;
 800463e:	e002      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
          break;
 8004644:	bf00      	nop
        }
      }
      break;
 8004646:	bf00      	nop
    }
  }
  return frequency;
 8004648:	697b      	ldr	r3, [r7, #20]
}
 800464a:	4618      	mov	r0, r3
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	00bb8000 	.word	0x00bb8000
 8004660:	007a1200 	.word	0x007a1200
 8004664:	00f42400 	.word	0x00f42400

08004668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07b      	b.n	8004772 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800468a:	d009      	beq.n	80046a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
 8004692:	e005      	b.n	80046a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fb3c 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	ea42 0103 	orr.w	r1, r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0104 	and.w	r1, r3, #4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 0210 	and.w	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e041      	b.n	8004810 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d106      	bne.n	80047a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fc fc05 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f000 f8f5 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIM_ConfigClockSource+0x1c>
 8004830:	2302      	movs	r3, #2
 8004832:	e0b4      	b.n	800499e <HAL_TIM_ConfigClockSource+0x186>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800485a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486c:	d03e      	beq.n	80048ec <HAL_TIM_ConfigClockSource+0xd4>
 800486e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004872:	f200 8087 	bhi.w	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487a:	f000 8086 	beq.w	800498a <HAL_TIM_ConfigClockSource+0x172>
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004882:	d87f      	bhi.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b70      	cmp	r3, #112	; 0x70
 8004886:	d01a      	beq.n	80048be <HAL_TIM_ConfigClockSource+0xa6>
 8004888:	2b70      	cmp	r3, #112	; 0x70
 800488a:	d87b      	bhi.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b60      	cmp	r3, #96	; 0x60
 800488e:	d050      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x11a>
 8004890:	2b60      	cmp	r3, #96	; 0x60
 8004892:	d877      	bhi.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b50      	cmp	r3, #80	; 0x50
 8004896:	d03c      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0xfa>
 8004898:	2b50      	cmp	r3, #80	; 0x50
 800489a:	d873      	bhi.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d058      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x13a>
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d86f      	bhi.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b30      	cmp	r3, #48	; 0x30
 80048a6:	d064      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x15a>
 80048a8:	2b30      	cmp	r3, #48	; 0x30
 80048aa:	d86b      	bhi.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d060      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x15a>
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d867      	bhi.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d05c      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x15a>
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d05a      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x15a>
 80048bc:	e062      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f000 f985 	bl	8004bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	609a      	str	r2, [r3, #8]
      break;
 80048ea:	e04f      	b.n	800498c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6899      	ldr	r1, [r3, #8]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f000 f96e 	bl	8004bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800490e:	609a      	str	r2, [r3, #8]
      break;
 8004910:	e03c      	b.n	800498c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	461a      	mov	r2, r3
 8004920:	f000 f8e2 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2150      	movs	r1, #80	; 0x50
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f93b 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004930:	e02c      	b.n	800498c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	461a      	mov	r2, r3
 8004940:	f000 f901 	bl	8004b46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2160      	movs	r1, #96	; 0x60
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f92b 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004950:	e01c      	b.n	800498c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	461a      	mov	r2, r3
 8004960:	f000 f8c2 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2140      	movs	r1, #64	; 0x40
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f91b 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004970:	e00c      	b.n	800498c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f000 f912 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004982:	e003      	b.n	800498c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      break;
 8004988:	e000      	b.n	800498c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800498a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a40      	ldr	r2, [pc, #256]	; (8004abc <TIM_Base_SetConfig+0x114>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d00f      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3d      	ldr	r2, [pc, #244]	; (8004ac0 <TIM_Base_SetConfig+0x118>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3c      	ldr	r2, [pc, #240]	; (8004ac4 <TIM_Base_SetConfig+0x11c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3b      	ldr	r2, [pc, #236]	; (8004ac8 <TIM_Base_SetConfig+0x120>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3a      	ldr	r2, [pc, #232]	; (8004acc <TIM_Base_SetConfig+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <TIM_Base_SetConfig+0x114>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a08:	d027      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <TIM_Base_SetConfig+0x118>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d023      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2b      	ldr	r2, [pc, #172]	; (8004ac4 <TIM_Base_SetConfig+0x11c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <TIM_Base_SetConfig+0x120>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a29      	ldr	r2, [pc, #164]	; (8004acc <TIM_Base_SetConfig+0x124>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d017      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <TIM_Base_SetConfig+0x128>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <TIM_Base_SetConfig+0x12c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <TIM_Base_SetConfig+0x130>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a25      	ldr	r2, [pc, #148]	; (8004adc <TIM_Base_SetConfig+0x134>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a24      	ldr	r2, [pc, #144]	; (8004ae0 <TIM_Base_SetConfig+0x138>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <TIM_Base_SetConfig+0x13c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <TIM_Base_SetConfig+0x114>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0xf8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a0c      	ldr	r2, [pc, #48]	; (8004acc <TIM_Base_SetConfig+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d103      	bne.n	8004aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	615a      	str	r2, [r3, #20]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800
 8004ac8:	40000c00 	.word	0x40000c00
 8004acc:	40010400 	.word	0x40010400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800
 8004adc:	40001800 	.word	0x40001800
 8004ae0:	40001c00 	.word	0x40001c00
 8004ae4:	40002000 	.word	0x40002000

08004ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 030a 	bic.w	r3, r3, #10
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b087      	sub	sp, #28
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0210 	bic.w	r2, r3, #16
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	031b      	lsls	r3, r3, #12
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f043 0307 	orr.w	r3, r3, #7
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	021a      	lsls	r2, r3, #8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e05a      	b.n	8004cea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d01d      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40010400 	.word	0x40010400
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40001800 	.word	0x40001800

08004d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d14:	b084      	sub	sp, #16
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	f107 001c 	add.w	r0, r7, #28
 8004d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d122      	bne.n	8004d72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f9c0 	bl	80050ec <USB_CoreReset>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	e01a      	b.n	8004da8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9b4 	bl	80050ec <USB_CoreReset>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
 8004d9a:	e005      	b.n	8004da8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d10b      	bne.n	8004dc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f043 0206 	orr.w	r2, r3, #6
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f043 0220 	orr.w	r2, r3, #32
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd2:	b004      	add	sp, #16
 8004dd4:	4770      	bx	lr

08004dd6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f043 0201 	orr.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f023 0201 	bic.w	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d115      	bne.n	8004e68 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f7fc f96f 	bl	800112c <HAL_Delay>
      ms++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f93a 	bl	80050ce <USB_GetMode>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d01e      	beq.n	8004e9e <USB_SetCurrentMode+0x84>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b31      	cmp	r3, #49	; 0x31
 8004e64:	d9f0      	bls.n	8004e48 <USB_SetCurrentMode+0x2e>
 8004e66:	e01a      	b.n	8004e9e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d115      	bne.n	8004e9a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f7fc f956 	bl	800112c <HAL_Delay>
      ms++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f921 	bl	80050ce <USB_GetMode>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <USB_SetCurrentMode+0x84>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b31      	cmp	r3, #49	; 0x31
 8004e96:	d9f0      	bls.n	8004e7a <USB_SetCurrentMode+0x60>
 8004e98:	e001      	b.n	8004e9e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e005      	b.n	8004eaa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b32      	cmp	r3, #50	; 0x32
 8004ea2:	d101      	bne.n	8004ea8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <USB_FlushTxFifo+0x64>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e01b      	b.n	8004f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	daf2      	bge.n	8004ec2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	019b      	lsls	r3, r3, #6
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <USB_FlushTxFifo+0x64>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e006      	b.n	8004f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d0f0      	beq.n	8004eec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	00030d40 	.word	0x00030d40

08004f1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <USB_FlushRxFifo+0x5c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e018      	b.n	8004f6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	daf2      	bge.n	8004f28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2210      	movs	r2, #16
 8004f4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <USB_FlushRxFifo+0x5c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e006      	b.n	8004f6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d0f0      	beq.n	8004f4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	00030d40 	.word	0x00030d40

08004f7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	71fb      	strb	r3, [r7, #7]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d123      	bne.n	8004fea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fa2:	88bb      	ldrh	r3, [r7, #4]
 8004fa4:	3303      	adds	r3, #3
 8004fa6:	089b      	lsrs	r3, r3, #2
 8004fa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e018      	b.n	8004fe2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	031a      	lsls	r2, r3, #12
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d3e2      	bcc.n	8004fb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3724      	adds	r7, #36	; 0x24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b08b      	sub	sp, #44	; 0x2c
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	b29b      	uxth	r3, r3
 8005014:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	e014      	b.n	800504e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	3301      	adds	r3, #1
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	3301      	adds	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	3301      	adds	r3, #1
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	3301      	adds	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	3301      	adds	r3, #1
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	6a3a      	ldr	r2, [r7, #32]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	429a      	cmp	r2, r3
 8005054:	d3e6      	bcc.n	8005024 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005056:	8bfb      	ldrh	r3, [r7, #30]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01e      	beq.n	800509a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005066:	461a      	mov	r2, r3
 8005068:	f107 0310 	add.w	r3, r7, #16
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
 800507c:	b2da      	uxtb	r2, r3
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	701a      	strb	r2, [r3, #0]
      i++;
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	3301      	adds	r3, #1
 8005086:	623b      	str	r3, [r7, #32]
      pDest++;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	3301      	adds	r3, #1
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800508e:	8bfb      	ldrh	r3, [r7, #30]
 8005090:	3b01      	subs	r3, #1
 8005092:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1ea      	bne.n	8005070 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800509c:	4618      	mov	r0, r3
 800509e:	372c      	adds	r7, #44	; 0x2c
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0301 	and.w	r3, r3, #1
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a13      	ldr	r2, [pc, #76]	; (8005150 <USB_CoreReset+0x64>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e01b      	b.n	8005142 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	daf2      	bge.n	80050f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f043 0201 	orr.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <USB_CoreReset+0x64>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d0f0      	beq.n	8005122 <USB_CoreReset+0x36>

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	00030d40 	.word	0x00030d40

08005154 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005154:	b084      	sub	sp, #16
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005174:	461a      	mov	r2, r3
 8005176:	2300      	movs	r3, #0
 8005178:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10a      	bne.n	80051c6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051be:	f043 0304 	orr.w	r3, r3, #4
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e014      	b.n	80051f0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051d4:	f023 0304 	bic.w	r3, r3, #4
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e009      	b.n	80051f0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ea:	f023 0304 	bic.w	r3, r3, #4
 80051ee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051f0:	2110      	movs	r1, #16
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff fe5e 	bl	8004eb4 <USB_FlushTxFifo>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fe8a 	bl	8004f1c <USB_FlushRxFifo>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e015      	b.n	8005244 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	461a      	mov	r2, r3
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3301      	adds	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d3e5      	bcc.n	8005218 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f04f 32ff 	mov.w	r2, #4294967295
 8005258:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <USB_HostInit+0x16c>)
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <USB_HostInit+0x170>)
 8005278:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800527c:	e009      	b.n	8005292 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a10      	ldr	r2, [pc, #64]	; (80052c8 <USB_HostInit+0x174>)
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a0f      	ldr	r2, [pc, #60]	; (80052cc <USB_HostInit+0x178>)
 800528e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f043 0210 	orr.w	r2, r3, #16
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <USB_HostInit+0x17c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052bc:	b004      	add	sp, #16
 80052be:	4770      	bx	lr
 80052c0:	01000200 	.word	0x01000200
 80052c4:	00e00300 	.word	0x00e00300
 80052c8:	00600080 	.word	0x00600080
 80052cc:	004000e0 	.word	0x004000e0
 80052d0:	a3200008 	.word	0xa3200008

080052d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800530c:	4313      	orrs	r3, r2
 800530e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800531c:	461a      	mov	r2, r3
 800531e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005322:	6053      	str	r3, [r2, #4]
 8005324:	e009      	b.n	800533a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d106      	bne.n	800533a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005332:	461a      	mov	r2, r3
 8005334:	f241 7370 	movw	r3, #6000	; 0x1770
 8005338:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005368:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005376:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005378:	2064      	movs	r0, #100	; 0x64
 800537a:	f7fb fed7 	bl	800112c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800538c:	200a      	movs	r0, #10
 800538e:	f7fb fecd 	bl	800112c <HAL_Delay>

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <USB_DriveVbus+0x44>
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d106      	bne.n	80053e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ea:	d109      	bne.n	8005400 <USB_DriveVbus+0x64>
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	0c5b      	lsrs	r3, r3, #17
 800542c:	f003 0303 	and.w	r3, r3, #3
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	b29b      	uxth	r3, r3
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	461a      	mov	r2, r3
 800546e:	4603      	mov	r3, r0
 8005470:	70fb      	strb	r3, [r7, #3]
 8005472:	460b      	mov	r3, r1
 8005474:	70bb      	strb	r3, [r7, #2]
 8005476:	4613      	mov	r3, r2
 8005478:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548e:	461a      	mov	r2, r3
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005496:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800549a:	2b03      	cmp	r3, #3
 800549c:	d87e      	bhi.n	800559c <USB_HC_Init+0x13c>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <USB_HC_Init+0x44>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	0800555f 	.word	0x0800555f
 80054ac:	080054b5 	.word	0x080054b5
 80054b0:	08005521 	.word	0x08005521
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	461a      	mov	r2, r3
 80054c2:	f240 439d 	movw	r3, #1181	; 0x49d
 80054c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80054c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da10      	bge.n	80054f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ee:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80054f0:	e057      	b.n	80055a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d051      	beq.n	80055a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	440a      	add	r2, r1
 8005514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005518:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800551c:	60d3      	str	r3, [r2, #12]
      break;
 800551e:	e040      	b.n	80055a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552c:	461a      	mov	r2, r3
 800552e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005532:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005534:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	da34      	bge.n	80055a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	440a      	add	r2, r1
 8005552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800555c:	e023      	b.n	80055a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	461a      	mov	r2, r3
 800556c:	f240 2325 	movw	r3, #549	; 0x225
 8005570:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005572:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da17      	bge.n	80055aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	440a      	add	r2, r1
 8005590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005594:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005598:	60d3      	str	r3, [r2, #12]
      }
      break;
 800559a:	e006      	b.n	80055aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	77fb      	strb	r3, [r7, #31]
      break;
 80055a0:	e004      	b.n	80055ac <USB_HC_Init+0x14c>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <USB_HC_Init+0x14c>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <USB_HC_Init+0x14c>
      break;
 80055aa:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c6:	f043 0302 	orr.w	r3, r3, #2
 80055ca:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	2101      	movs	r1, #1
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	6939      	ldr	r1, [r7, #16]
 80055e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055e6:	4313      	orrs	r3, r2
 80055e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da03      	bge.n	8005606 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	e001      	b.n	800560a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff feff 	bl	800540e <USB_GetHostSpeed>
 8005610:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005612:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005616:	2b02      	cmp	r3, #2
 8005618:	d106      	bne.n	8005628 <USB_HC_Init+0x1c8>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d003      	beq.n	8005628 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e001      	b.n	800562c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800562c:	787b      	ldrb	r3, [r7, #1]
 800562e:	059b      	lsls	r3, r3, #22
 8005630:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005634:	78bb      	ldrb	r3, [r7, #2]
 8005636:	02db      	lsls	r3, r3, #11
 8005638:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800563c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800563e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005642:	049b      	lsls	r3, r3, #18
 8005644:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005648:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800564a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800564c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005650:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	0159      	lsls	r1, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	440b      	add	r3, r1
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005668:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800566a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800566e:	2b03      	cmp	r3, #3
 8005670:	d003      	beq.n	800567a <USB_HC_Init+0x21a>
 8005672:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d10f      	bne.n	800569a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	440a      	add	r2, r1
 8005690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005698:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800569a:	7ffb      	ldrb	r3, [r7, #31]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	; 0x30
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80056bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056c0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02d      	beq.n	800572a <USB_HC_StartXfer+0x86>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	791b      	ldrb	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d129      	bne.n	800572a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d117      	bne.n	800570c <USB_HC_StartXfer+0x68>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	79db      	ldrb	r3, [r3, #7]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <USB_HC_StartXfer+0x48>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	79db      	ldrb	r3, [r3, #7]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d10f      	bne.n	800570c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	440a      	add	r2, r1
 8005702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <USB_HC_StartXfer+0x86>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	795b      	ldrb	r3, [r3, #5]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d107      	bne.n	800572a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	4619      	mov	r1, r3
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fa0f 	bl	8005b44 <USB_DoPing>
      return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e0f8      	b.n	800591c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d018      	beq.n	8005764 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	8912      	ldrh	r2, [r2, #8]
 800573a:	4413      	add	r3, r2
 800573c:	3b01      	subs	r3, #1
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	8912      	ldrh	r2, [r2, #8]
 8005742:	fbb3 f3f2 	udiv	r3, r3, r2
 8005746:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005748:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800574a:	8b7b      	ldrh	r3, [r7, #26]
 800574c:	429a      	cmp	r2, r3
 800574e:	d90b      	bls.n	8005768 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005750:	8b7b      	ldrh	r3, [r7, #26]
 8005752:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005754:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	8912      	ldrh	r2, [r2, #8]
 800575a:	fb03 f202 	mul.w	r2, r3, r2
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	611a      	str	r2, [r3, #16]
 8005762:	e001      	b.n	8005768 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005764:	2301      	movs	r3, #1
 8005766:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	78db      	ldrb	r3, [r3, #3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	8912      	ldrh	r2, [r2, #8]
 8005776:	fb03 f202 	mul.w	r2, r3, r2
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	e003      	b.n	8005788 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005790:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005792:	04d9      	lsls	r1, r3, #19
 8005794:	4b63      	ldr	r3, [pc, #396]	; (8005924 <USB_HC_StartXfer+0x280>)
 8005796:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005798:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	7a9b      	ldrb	r3, [r3, #10]
 800579e:	075b      	lsls	r3, r3, #29
 80057a0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	0148      	lsls	r0, r1, #5
 80057a8:	6a39      	ldr	r1, [r7, #32]
 80057aa:	4401      	add	r1, r0
 80057ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	68d9      	ldr	r1, [r3, #12]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ca:	460a      	mov	r2, r1
 80057cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bf0c      	ite	eq
 80057de:	2301      	moveq	r3, #1
 80057e0:	2300      	movne	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005800:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005804:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	7e7b      	ldrb	r3, [r7, #25]
 8005816:	075b      	lsls	r3, r3, #29
 8005818:	69f9      	ldr	r1, [r7, #28]
 800581a:	0148      	lsls	r0, r1, #5
 800581c:	6a39      	ldr	r1, [r7, #32]
 800581e:	4401      	add	r1, r0
 8005820:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005824:	4313      	orrs	r3, r2
 8005826:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800583e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	78db      	ldrb	r3, [r3, #3]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	e003      	b.n	800585a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005858:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005860:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	461a      	mov	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e04e      	b.n	800591c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	78db      	ldrb	r3, [r3, #3]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d149      	bne.n	800591a <USB_HC_StartXfer+0x276>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d045      	beq.n	800591a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	79db      	ldrb	r3, [r3, #7]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d830      	bhi.n	80058f8 <USB_HC_StartXfer+0x254>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USB_HC_StartXfer+0x1f8>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058d1 	.word	0x080058d1
 80058a4:	080058ad 	.word	0x080058ad
 80058a8:	080058d1 	.word	0x080058d1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	3303      	adds	r3, #3
 80058b2:	089b      	lsrs	r3, r3, #2
 80058b4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80058b6:	8afa      	ldrh	r2, [r7, #22]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	b29b      	uxth	r3, r3
 80058be:	429a      	cmp	r2, r3
 80058c0:	d91c      	bls.n	80058fc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80058ce:	e015      	b.n	80058fc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	3303      	adds	r3, #3
 80058d6:	089b      	lsrs	r3, r3, #2
 80058d8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80058da:	8afa      	ldrh	r2, [r7, #22]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d90a      	bls.n	8005900 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80058f6:	e003      	b.n	8005900 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80058f8:	bf00      	nop
 80058fa:	e002      	b.n	8005902 <USB_HC_StartXfer+0x25e>
        break;
 80058fc:	bf00      	nop
 80058fe:	e000      	b.n	8005902 <USB_HC_StartXfer+0x25e>
        break;
 8005900:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	68d9      	ldr	r1, [r3, #12]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	785a      	ldrb	r2, [r3, #1]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	b29b      	uxth	r3, r3
 8005910:	2000      	movs	r0, #0
 8005912:	9000      	str	r0, [sp, #0]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff fb31 	bl	8004f7c <USB_WritePacket>
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3728      	adds	r7, #40	; 0x28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	1ff80000 	.word	0x1ff80000

08005928 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	b29b      	uxth	r3, r3
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800594a:	b480      	push	{r7}
 800594c:	b089      	sub	sp, #36	; 0x24
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0c9b      	lsrs	r3, r3, #18
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	0fdb      	lsrs	r3, r3, #31
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b20      	cmp	r3, #32
 8005998:	d104      	bne.n	80059a4 <USB_HC_Halt+0x5a>
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e0c8      	b.n	8005b36 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <USB_HC_Halt+0x66>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d163      	bne.n	8005a78 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f040 80ab 	bne.w	8005b34 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d133      	bne.n	8005a52 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a08:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a28:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a36:	d81d      	bhi.n	8005a74 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4e:	d0ec      	beq.n	8005a2a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a50:	e070      	b.n	8005b34 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a70:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a72:	e05f      	b.n	8005b34 <USB_HC_Halt+0x1ea>
            break;
 8005a74:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a76:	e05d      	b.n	8005b34 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a96:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d133      	bne.n	8005b10 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ae6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005af4:	d81d      	bhi.n	8005b32 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0c:	d0ec      	beq.n	8005ae8 <USB_HC_Halt+0x19e>
 8005b0e:	e011      	b.n	8005b34 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e000      	b.n	8005b34 <USB_HC_Halt+0x1ea>
          break;
 8005b32:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	04da      	lsls	r2, r3, #19
 8005b60:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <USB_DoPing+0x74>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b8c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	1ff80000 	.word	0x1ff80000

08005bbc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff f911 	bl	8004df8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff f96b 	bl	8004eb4 <USB_FlushTxFifo>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff f997 	bl	8004f1c <USB_FlushRxFifo>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	e01f      	b.n	8005c3e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	461a      	mov	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b0f      	cmp	r3, #15
 8005c42:	d9dc      	bls.n	8005bfe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	e034      	b.n	8005cb4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	461a      	mov	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c90:	d80c      	bhi.n	8005cac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca8:	d0ec      	beq.n	8005c84 <USB_StopHost+0xc8>
 8005caa:	e000      	b.n	8005cae <USB_StopHost+0xf2>
        break;
 8005cac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d9c7      	bls.n	8005c4a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff f880 	bl	8004dd6 <USB_EnableGlobalInt>

  return ret;
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af04      	add	r7, sp, #16
 8005ce6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005ce8:	2301      	movs	r3, #1
 8005cea:	2202      	movs	r2, #2
 8005cec:	2102      	movs	r1, #2
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fc66 	bl	80065c0 <USBH_FindInterface>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2bff      	cmp	r3, #255	; 0xff
 8005cfc:	d002      	beq.n	8005d04 <USBH_CDC_InterfaceInit+0x24>
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d901      	bls.n	8005d08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d04:	2302      	movs	r3, #2
 8005d06:	e13d      	b.n	8005f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fc3b 	bl	8006588 <USBH_SelectInterface>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e131      	b.n	8005f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005d26:	2050      	movs	r0, #80	; 0x50
 8005d28:	f002 fafa 	bl	8008320 <malloc>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005d40:	2302      	movs	r3, #2
 8005d42:	e11f      	b.n	8005f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005d44:	2250      	movs	r2, #80	; 0x50
 8005d46:	2100      	movs	r1, #0
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f002 faf9 	bl	8008340 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	211a      	movs	r1, #26
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b25b      	sxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da15      	bge.n	8005d92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	211a      	movs	r1, #26
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	211a      	movs	r1, #26
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d8c:	881a      	ldrh	r2, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 ff2c 	bl	8007bf6 <USBH_AllocPipe>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	7819      	ldrb	r1, [r3, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	7858      	ldrb	r0, [r3, #1]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	8952      	ldrh	r2, [r2, #10]
 8005dbe:	9202      	str	r2, [sp, #8]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	9201      	str	r2, [sp, #4]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	4623      	mov	r3, r4
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 fee4 	bl	8007b98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f002 f9f3 	bl	80081c4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005dde:	2300      	movs	r3, #0
 8005de0:	2200      	movs	r2, #0
 8005de2:	210a      	movs	r1, #10
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fbeb 	bl	80065c0 <USBH_FindInterface>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2bff      	cmp	r3, #255	; 0xff
 8005df2:	d002      	beq.n	8005dfa <USBH_CDC_InterfaceInit+0x11a>
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d901      	bls.n	8005dfe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e0c2      	b.n	8005f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	211a      	movs	r1, #26
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da16      	bge.n	8005e44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	211a      	movs	r1, #26
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	211a      	movs	r1, #26
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e3c:	881a      	ldrh	r2, [r3, #0]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	835a      	strh	r2, [r3, #26]
 8005e42:	e015      	b.n	8005e70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	211a      	movs	r1, #26
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	211a      	movs	r1, #26
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e6a:	881a      	ldrh	r2, [r3, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	211a      	movs	r1, #26
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da16      	bge.n	8005eb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	211a      	movs	r1, #26
 8005e8e:	fb01 f303 	mul.w	r3, r1, r3
 8005e92:	4413      	add	r3, r2
 8005e94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	211a      	movs	r1, #26
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005eae:	881a      	ldrh	r2, [r3, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	835a      	strh	r2, [r3, #26]
 8005eb4:	e015      	b.n	8005ee2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	211a      	movs	r1, #26
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	211a      	movs	r1, #26
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	7b9b      	ldrb	r3, [r3, #14]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 fe84 	bl	8007bf6 <USBH_AllocPipe>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	7bdb      	ldrb	r3, [r3, #15]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 fe7a 	bl	8007bf6 <USBH_AllocPipe>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	7b59      	ldrb	r1, [r3, #13]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	7b98      	ldrb	r0, [r3, #14]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	8b12      	ldrh	r2, [r2, #24]
 8005f22:	9202      	str	r2, [sp, #8]
 8005f24:	2202      	movs	r2, #2
 8005f26:	9201      	str	r2, [sp, #4]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 fe32 	bl	8007b98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	7b19      	ldrb	r1, [r3, #12]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	7bd8      	ldrb	r0, [r3, #15]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	8b52      	ldrh	r2, [r2, #26]
 8005f4c:	9202      	str	r2, [sp, #8]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	9201      	str	r2, [sp, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	4623      	mov	r3, r4
 8005f56:	4602      	mov	r2, r0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fe1d 	bl	8007b98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	7b5b      	ldrb	r3, [r3, #13]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 f928 	bl	80081c4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	7b1b      	ldrb	r3, [r3, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f002 f921 	bl	80081c4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd90      	pop	{r4, r7, pc}

08005f8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00e      	beq.n	8005fc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 fe12 	bl	8007bd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 fe3d 	bl	8007c38 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	7b1b      	ldrb	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00e      	beq.n	8005fea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	7b1b      	ldrb	r3, [r3, #12]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 fdff 	bl	8007bd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	7b1b      	ldrb	r3, [r3, #12]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 fe2a 	bl	8007c38 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	7b5b      	ldrb	r3, [r3, #13]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	7b5b      	ldrb	r3, [r3, #13]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fdec 	bl	8007bd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	7b5b      	ldrb	r3, [r3, #13]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fe17 	bl	8007c38 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4618      	mov	r0, r3
 8006026:	f002 f983 	bl	8008330 <free>
    phost->pActiveClass->pData = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006030:	2200      	movs	r2, #0
 8006032:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3340      	adds	r3, #64	; 0x40
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8b1 	bl	80061be <GetLineCoding>
 800605c:	4603      	mov	r3, r0
 800605e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800606c:	2102      	movs	r1, #2
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006072:	7afb      	ldrb	r3, [r7, #11]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800609c:	2b04      	cmp	r3, #4
 800609e:	d877      	bhi.n	8006190 <USBH_CDC_Process+0x114>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <USBH_CDC_Process+0x2c>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060bd 	.word	0x080060bd
 80060ac:	080060c3 	.word	0x080060c3
 80060b0:	080060f3 	.word	0x080060f3
 80060b4:	08006167 	.word	0x08006167
 80060b8:	08006175 	.word	0x08006175
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	73fb      	strb	r3, [r7, #15]
      break;
 80060c0:	e06d      	b.n	800619e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f897 	bl	80061fc <SetLineCoding>
 80060ce:	4603      	mov	r3, r0
 80060d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060e0:	e058      	b.n	8006194 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d055      	beq.n	8006194 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2204      	movs	r2, #4
 80060ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060f0:	e050      	b.n	8006194 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	3340      	adds	r3, #64	; 0x40
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f860 	bl	80061be <GetLineCoding>
 80060fe:	4603      	mov	r3, r0
 8006100:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d126      	bne.n	8006156 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	791b      	ldrb	r3, [r3, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d13b      	bne.n	8006198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800612c:	429a      	cmp	r2, r3
 800612e:	d133      	bne.n	8006198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800613c:	429a      	cmp	r2, r3
 800613e:	d12b      	bne.n	8006198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006148:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800614a:	429a      	cmp	r2, r3
 800614c:	d124      	bne.n	8006198 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f958 	bl	8006404 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006154:	e020      	b.n	8006198 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006156:	7bbb      	ldrb	r3, [r7, #14]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d01d      	beq.n	8006198 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2204      	movs	r2, #4
 8006160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006164:	e018      	b.n	8006198 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f867 	bl	800623a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f8da 	bl	8006326 <CDC_ProcessReception>
      break;
 8006172:	e014      	b.n	800619e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006174:	2100      	movs	r1, #0
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 ffef 	bl	800715a <USBH_ClrFeature>
 800617c:	4603      	mov	r3, r0
 800617e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800618e:	e005      	b.n	800619c <USBH_CDC_Process+0x120>

    default:
      break;
 8006190:	bf00      	nop
 8006192:	e004      	b.n	800619e <USBH_CDC_Process+0x122>
      break;
 8006194:	bf00      	nop
 8006196:	e002      	b.n	800619e <USBH_CDC_Process+0x122>
      break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <USBH_CDC_Process+0x122>
      break;
 800619c:	bf00      	nop

  }

  return status;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	22a1      	movs	r2, #161	; 0xa1
 80061cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2221      	movs	r2, #33	; 0x21
 80061d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2207      	movs	r2, #7
 80061e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2207      	movs	r2, #7
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fa81 	bl	80076f4 <USBH_CtlReq>
 80061f2:	4603      	mov	r3, r0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2221      	movs	r2, #33	; 0x21
 800620a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2207      	movs	r2, #7
 8006222:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2207      	movs	r2, #7
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fa62 	bl	80076f4 <USBH_CtlReq>
 8006230:	4603      	mov	r3, r0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b086      	sub	sp, #24
 800623e:	af02      	add	r7, sp, #8
 8006240:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800624c:	2300      	movs	r3, #0
 800624e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006256:	2b01      	cmp	r3, #1
 8006258:	d002      	beq.n	8006260 <CDC_ProcessTransmission+0x26>
 800625a:	2b02      	cmp	r3, #2
 800625c:	d023      	beq.n	80062a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800625e:	e05e      	b.n	800631e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	8b12      	ldrh	r2, [r2, #24]
 8006268:	4293      	cmp	r3, r2
 800626a:	d90b      	bls.n	8006284 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8b1a      	ldrh	r2, [r3, #24]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	7b5b      	ldrb	r3, [r3, #13]
 8006278:	2001      	movs	r0, #1
 800627a:	9000      	str	r0, [sp, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 fc48 	bl	8007b12 <USBH_BulkSendData>
 8006282:	e00b      	b.n	800629c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	7b5b      	ldrb	r3, [r3, #13]
 8006292:	2001      	movs	r0, #1
 8006294:	9000      	str	r0, [sp, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fc3b 	bl	8007b12 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062a4:	e03b      	b.n	800631e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	7b5b      	ldrb	r3, [r3, #13]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 ff5f 	bl	8008170 <USBH_LL_GetURBState>
 80062b2:	4603      	mov	r3, r0
 80062b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d128      	bne.n	800630e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	8b12      	ldrh	r2, [r2, #24]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d90e      	bls.n	80062e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	8b12      	ldrh	r2, [r2, #24]
 80062d0:	1a9a      	subs	r2, r3, r2
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	8b12      	ldrh	r2, [r2, #24]
 80062de:	441a      	add	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	61da      	str	r2, [r3, #28]
 80062e4:	e002      	b.n	80062ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062fc:	e00e      	b.n	800631c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f868 	bl	80063dc <USBH_CDC_TransmitCallback>
      break;
 800630c:	e006      	b.n	800631c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d103      	bne.n	800631c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800631c:	bf00      	nop
  }
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006338:	2300      	movs	r3, #0
 800633a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006342:	2b03      	cmp	r3, #3
 8006344:	d002      	beq.n	800634c <CDC_ProcessReception+0x26>
 8006346:	2b04      	cmp	r3, #4
 8006348:	d00e      	beq.n	8006368 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800634a:	e043      	b.n	80063d4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	6a19      	ldr	r1, [r3, #32]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	8b5a      	ldrh	r2, [r3, #26]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	7b1b      	ldrb	r3, [r3, #12]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fbff 	bl	8007b5c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2204      	movs	r2, #4
 8006362:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006366:	e035      	b.n	80063d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	7b1b      	ldrb	r3, [r3, #12]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fefe 	bl	8008170 <USBH_LL_GetURBState>
 8006374:	4603      	mov	r3, r0
 8006376:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006378:	7cfb      	ldrb	r3, [r7, #19]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d129      	bne.n	80063d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	7b1b      	ldrb	r3, [r3, #12]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fe61 	bl	800804c <USBH_LL_GetLastXferSize>
 800638a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	429a      	cmp	r2, r3
 8006394:	d016      	beq.n	80063c4 <CDC_ProcessReception+0x9e>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	8b5b      	ldrh	r3, [r3, #26]
 800639a:	461a      	mov	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4293      	cmp	r3, r2
 80063a0:	d910      	bls.n	80063c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad2      	subs	r2, r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	6a1a      	ldr	r2, [r3, #32]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	441a      	add	r2, r3
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2203      	movs	r2, #3
 80063be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80063c2:	e006      	b.n	80063d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f80f 	bl	80063f0 <USBH_CDC_ReceiveCallback>
      break;
 80063d2:	bf00      	nop
  }
}
 80063d4:	bf00      	nop
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800642c:	2302      	movs	r3, #2
 800642e:	e029      	b.n	8006484 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	79fa      	ldrb	r2, [r7, #7]
 8006434:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f81f 	bl	800648c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f001 fd31 	bl	8007ee4 <USBH_LL_Init>

  return USBH_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e009      	b.n	80064b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	33e0      	adds	r3, #224	; 0xe0
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b0f      	cmp	r3, #15
 80064b6:	d9f2      	bls.n	800649e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e009      	b.n	80064d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d3f1      	bcc.n	80064be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2240      	movs	r2, #64	; 0x40
 80064fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d016      	beq.n	8006576 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10e      	bne.n	8006570 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	33de      	adds	r3, #222	; 0xde
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
 800656e:	e004      	b.n	800657a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006570:	2302      	movs	r3, #2
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e001      	b.n	800657a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006576:	2302      	movs	r3, #2
 8006578:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d204      	bcs.n	80065ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80065ac:	e001      	b.n	80065b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80065ae:	2302      	movs	r3, #2
 80065b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	461a      	mov	r2, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	70fb      	strb	r3, [r7, #3]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70bb      	strb	r3, [r7, #2]
 80065d6:	4613      	mov	r3, r2
 80065d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80065e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065ea:	e025      	b.n	8006638 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
 80065ee:	221a      	movs	r2, #26
 80065f0:	fb02 f303 	mul.w	r3, r2, r3
 80065f4:	3308      	adds	r3, #8
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	3302      	adds	r3, #2
 80065fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	795b      	ldrb	r3, [r3, #5]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	429a      	cmp	r2, r3
 8006606:	d002      	beq.n	800660e <USBH_FindInterface+0x4e>
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	2bff      	cmp	r3, #255	; 0xff
 800660c:	d111      	bne.n	8006632 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006612:	78ba      	ldrb	r2, [r7, #2]
 8006614:	429a      	cmp	r2, r3
 8006616:	d002      	beq.n	800661e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006618:	78bb      	ldrb	r3, [r7, #2]
 800661a:	2bff      	cmp	r3, #255	; 0xff
 800661c:	d109      	bne.n	8006632 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006622:	787a      	ldrb	r2, [r7, #1]
 8006624:	429a      	cmp	r2, r3
 8006626:	d002      	beq.n	800662e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006628:	787b      	ldrb	r3, [r7, #1]
 800662a:	2bff      	cmp	r3, #255	; 0xff
 800662c:	d101      	bne.n	8006632 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	e006      	b.n	8006640 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	3301      	adds	r3, #1
 8006636:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d9d6      	bls.n	80065ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800663e:	23ff      	movs	r3, #255	; 0xff
}
 8006640:	4618      	mov	r0, r3
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fc81 	bl	8007f5c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800665a:	2101      	movs	r1, #1
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fd9a 	bl	8008196 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af04      	add	r7, sp, #16
 8006672:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006674:	2302      	movs	r3, #2
 8006676:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	d102      	bne.n	800668e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2203      	movs	r2, #3
 800668c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b0b      	cmp	r3, #11
 8006696:	f200 81be 	bhi.w	8006a16 <USBH_Process+0x3aa>
 800669a:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <USBH_Process+0x34>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	08006703 	.word	0x08006703
 80066a8:	0800676b 	.word	0x0800676b
 80066ac:	080069b1 	.word	0x080069b1
 80066b0:	08006a17 	.word	0x08006a17
 80066b4:	0800680f 	.word	0x0800680f
 80066b8:	08006957 	.word	0x08006957
 80066bc:	08006845 	.word	0x08006845
 80066c0:	08006865 	.word	0x08006865
 80066c4:	08006885 	.word	0x08006885
 80066c8:	080068c9 	.word	0x080068c9
 80066cc:	08006999 	.word	0x08006999
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 819e 	beq.w	8006a1a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80066e4:	20c8      	movs	r0, #200	; 0xc8
 80066e6:	f001 fd9d 	bl	8008224 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fc93 	bl	8008016 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006700:	e18b      	b.n	8006a1a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006708:	2b01      	cmp	r3, #1
 800670a:	d107      	bne.n	800671c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800671a:	e18d      	b.n	8006a38 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006726:	d914      	bls.n	8006752 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800672e:	3301      	adds	r3, #1
 8006730:	b2da      	uxtb	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800673e:	2b03      	cmp	r3, #3
 8006740:	d903      	bls.n	800674a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	220d      	movs	r2, #13
 8006746:	701a      	strb	r2, [r3, #0]
      break;
 8006748:	e176      	b.n	8006a38 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	701a      	strb	r2, [r3, #0]
      break;
 8006750:	e172      	b.n	8006a38 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006758:	f103 020a 	add.w	r2, r3, #10
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006762:	200a      	movs	r0, #10
 8006764:	f001 fd5e 	bl	8008224 <USBH_Delay>
      break;
 8006768:	e166      	b.n	8006a38 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800677a:	2104      	movs	r1, #4
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006780:	2064      	movs	r0, #100	; 0x64
 8006782:	f001 fd4f 	bl	8008224 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fc1e 	bl	8007fc8 <USBH_LL_GetSpeed>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2205      	movs	r2, #5
 800679a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fa29 	bl	8007bf6 <USBH_AllocPipe>
 80067a4:	4603      	mov	r3, r0
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fa21 	bl	8007bf6 <USBH_AllocPipe>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	7919      	ldrb	r1, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80067d0:	b292      	uxth	r2, r2
 80067d2:	9202      	str	r2, [sp, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	9201      	str	r2, [sp, #4]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	4603      	mov	r3, r0
 80067dc:	2280      	movs	r2, #128	; 0x80
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f9da 	bl	8007b98 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7959      	ldrb	r1, [r3, #5]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067f8:	b292      	uxth	r2, r2
 80067fa:	9202      	str	r2, [sp, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	9201      	str	r2, [sp, #4]
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	4603      	mov	r3, r0
 8006804:	2200      	movs	r2, #0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 f9c6 	bl	8007b98 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800680c:	e114      	b.n	8006a38 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f918 	bl	8006a44 <USBH_HandleEnum>
 8006814:	4603      	mov	r3, r0
 8006816:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 80fe 	bne.w	8006a1e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006830:	2b01      	cmp	r3, #1
 8006832:	d103      	bne.n	800683c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2208      	movs	r2, #8
 8006838:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800683a:	e0f0      	b.n	8006a1e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2207      	movs	r2, #7
 8006840:	701a      	strb	r2, [r3, #0]
      break;
 8006842:	e0ec      	b.n	8006a1e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80e9 	beq.w	8006a22 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006856:	2101      	movs	r1, #1
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2208      	movs	r2, #8
 8006860:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006862:	e0de      	b.n	8006a22 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800686a:	b29b      	uxth	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fc2c 	bl	80070cc <USBH_SetCfg>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 80d5 	bne.w	8006a26 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2209      	movs	r2, #9
 8006880:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006882:	e0d0      	b.n	8006a26 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d016      	beq.n	80068c0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006892:	2101      	movs	r1, #1
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fc3c 	bl	8007112 <USBH_SetFeature>
 800689a:	4603      	mov	r3, r0
 800689c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	220a      	movs	r2, #10
 80068aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068ac:	e0bd      	b.n	8006a2a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	f040 80b9 	bne.w	8006a2a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	220a      	movs	r2, #10
 80068bc:	701a      	strb	r2, [r3, #0]
      break;
 80068be:	e0b4      	b.n	8006a2a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	220a      	movs	r2, #10
 80068c4:	701a      	strb	r2, [r3, #0]
      break;
 80068c6:	e0b0      	b.n	8006a2a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80ad 	beq.w	8006a2e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e016      	b.n	8006910 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80068e2:	7bfa      	ldrb	r2, [r7, #15]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32de      	adds	r2, #222	; 0xde
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	791a      	ldrb	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d108      	bne.n	800690a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80068f8:	7bfa      	ldrb	r2, [r7, #15]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32de      	adds	r2, #222	; 0xde
 80068fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006908:	e005      	b.n	8006916 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	3301      	adds	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0e5      	beq.n	80068e2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d016      	beq.n	800694e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2206      	movs	r2, #6
 8006936:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800693e:	2103      	movs	r1, #3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006944:	e073      	b.n	8006a2e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	220d      	movs	r2, #13
 800694a:	701a      	strb	r2, [r3, #0]
      break;
 800694c:	e06f      	b.n	8006a2e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	220d      	movs	r2, #13
 8006952:	701a      	strb	r2, [r3, #0]
      break;
 8006954:	e06b      	b.n	8006a2e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d017      	beq.n	8006990 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
 800696c:	4603      	mov	r3, r0
 800696e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	220b      	movs	r2, #11
 800697c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800697e:	e058      	b.n	8006a32 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d154      	bne.n	8006a32 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	220d      	movs	r2, #13
 800698c:	701a      	strb	r2, [r3, #0]
      break;
 800698e:	e050      	b.n	8006a32 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	220d      	movs	r2, #13
 8006994:	701a      	strb	r2, [r3, #0]
      break;
 8006996:	e04c      	b.n	8006a32 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d049      	beq.n	8006a36 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
      }
      break;
 80069ae:	e042      	b.n	8006a36 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff fd67 	bl	800648c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ec:	2105      	movs	r1, #5
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d107      	bne.n	8006a0e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fe20 	bl	800664c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a0c:	e014      	b.n	8006a38 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 faa4 	bl	8007f5c <USBH_LL_Start>
      break;
 8006a14:	e010      	b.n	8006a38 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006a16:	bf00      	nop
 8006a18:	e00e      	b.n	8006a38 <USBH_Process+0x3cc>
      break;
 8006a1a:	bf00      	nop
 8006a1c:	e00c      	b.n	8006a38 <USBH_Process+0x3cc>
      break;
 8006a1e:	bf00      	nop
 8006a20:	e00a      	b.n	8006a38 <USBH_Process+0x3cc>
    break;
 8006a22:	bf00      	nop
 8006a24:	e008      	b.n	8006a38 <USBH_Process+0x3cc>
      break;
 8006a26:	bf00      	nop
 8006a28:	e006      	b.n	8006a38 <USBH_Process+0x3cc>
      break;
 8006a2a:	bf00      	nop
 8006a2c:	e004      	b.n	8006a38 <USBH_Process+0x3cc>
      break;
 8006a2e:	bf00      	nop
 8006a30:	e002      	b.n	8006a38 <USBH_Process+0x3cc>
      break;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <USBH_Process+0x3cc>
      break;
 8006a36:	bf00      	nop
  }
  return USBH_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af04      	add	r7, sp, #16
 8006a4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b07      	cmp	r3, #7
 8006a5a:	f200 81c1 	bhi.w	8006de0 <USBH_HandleEnum+0x39c>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <USBH_HandleEnum+0x20>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a85 	.word	0x08006a85
 8006a68:	08006b43 	.word	0x08006b43
 8006a6c:	08006bad 	.word	0x08006bad
 8006a70:	08006c3b 	.word	0x08006c3b
 8006a74:	08006ca5 	.word	0x08006ca5
 8006a78:	08006d15 	.word	0x08006d15
 8006a7c:	08006d5b 	.word	0x08006d5b
 8006a80:	08006da1 	.word	0x08006da1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006a84:	2108      	movs	r1, #8
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa50 	bl	8006f2c <USBH_Get_DevDesc>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d130      	bne.n	8006af8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7919      	ldrb	r1, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006aba:	b292      	uxth	r2, r2
 8006abc:	9202      	str	r2, [sp, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2280      	movs	r2, #128	; 0x80
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f865 	bl	8007b98 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7959      	ldrb	r1, [r3, #5]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	9202      	str	r2, [sp, #8]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	9201      	str	r2, [sp, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	4603      	mov	r3, r0
 8006aee:	2200      	movs	r2, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f851 	bl	8007b98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006af6:	e175      	b.n	8006de4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	f040 8172 	bne.w	8006de4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b06:	3301      	adds	r3, #1
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d903      	bls.n	8006b22 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	220d      	movs	r2, #13
 8006b1e:	701a      	strb	r2, [r3, #0]
      break;
 8006b20:	e160      	b.n	8006de4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	795b      	ldrb	r3, [r3, #5]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 f885 	bl	8007c38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	791b      	ldrb	r3, [r3, #4]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 f87f 	bl	8007c38 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]
      break;
 8006b40:	e150      	b.n	8006de4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006b42:	2112      	movs	r1, #18
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f9f1 	bl	8006f2c <USBH_Get_DevDesc>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b5a:	e145      	b.n	8006de8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	f040 8142 	bne.w	8006de8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d903      	bls.n	8006b86 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	220d      	movs	r2, #13
 8006b82:	701a      	strb	r2, [r3, #0]
      break;
 8006b84:	e130      	b.n	8006de8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	795b      	ldrb	r3, [r3, #5]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f853 	bl	8007c38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	791b      	ldrb	r3, [r3, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 f84d 	bl	8007c38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	701a      	strb	r2, [r3, #0]
      break;
 8006baa:	e11d      	b.n	8006de8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006bac:	2101      	movs	r1, #1
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa68 	bl	8007084 <USBH_SetAddress>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d132      	bne.n	8006c24 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006bbe:	2002      	movs	r0, #2
 8006bc0:	f001 fb30 	bl	8008224 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7919      	ldrb	r1, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006be6:	b292      	uxth	r2, r2
 8006be8:	9202      	str	r2, [sp, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	9201      	str	r2, [sp, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2280      	movs	r2, #128	; 0x80
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 ffcf 	bl	8007b98 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7959      	ldrb	r1, [r3, #5]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c0e:	b292      	uxth	r2, r2
 8006c10:	9202      	str	r2, [sp, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	9201      	str	r2, [sp, #4]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 ffbb 	bl	8007b98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c22:	e0e3      	b.n	8006dec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	f040 80e0 	bne.w	8006dec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	220d      	movs	r2, #13
 8006c30:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	705a      	strb	r2, [r3, #1]
      break;
 8006c38:	e0d8      	b.n	8006dec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006c3a:	2109      	movs	r1, #9
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f99d 	bl	8006f7c <USBH_Get_CfgDesc>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d103      	bne.n	8006c54 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2204      	movs	r2, #4
 8006c50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c52:	e0cd      	b.n	8006df0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	f040 80ca 	bne.w	8006df0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c62:	3301      	adds	r3, #1
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d903      	bls.n	8006c7e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	220d      	movs	r2, #13
 8006c7a:	701a      	strb	r2, [r3, #0]
      break;
 8006c7c:	e0b8      	b.n	8006df0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	795b      	ldrb	r3, [r3, #5]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 ffd7 	bl	8007c38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 ffd1 	bl	8007c38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
      break;
 8006ca2:	e0a5      	b.n	8006df0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f965 	bl	8006f7c <USBH_Get_CfgDesc>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d103      	bne.n	8006cc4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cc2:	e097      	b.n	8006df4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	f040 8094 	bne.w	8006df4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d903      	bls.n	8006cee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	220d      	movs	r2, #13
 8006cea:	701a      	strb	r2, [r3, #0]
      break;
 8006cec:	e082      	b.n	8006df4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	795b      	ldrb	r3, [r3, #5]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 ff9f 	bl	8007c38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	791b      	ldrb	r3, [r3, #4]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 ff99 	bl	8007c38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]
      break;
 8006d12:	e06f      	b.n	8006df4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d019      	beq.n	8006d52 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006d2a:	23ff      	movs	r3, #255	; 0xff
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f949 	bl	8006fc4 <USBH_Get_StringDesc>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2206      	movs	r2, #6
 8006d40:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d42:	e059      	b.n	8006df8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d156      	bne.n	8006df8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2206      	movs	r2, #6
 8006d4e:	705a      	strb	r2, [r3, #1]
      break;
 8006d50:	e052      	b.n	8006df8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2206      	movs	r2, #6
 8006d56:	705a      	strb	r2, [r3, #1]
      break;
 8006d58:	e04e      	b.n	8006df8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d019      	beq.n	8006d98 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d70:	23ff      	movs	r3, #255	; 0xff
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f926 	bl	8006fc4 <USBH_Get_StringDesc>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2207      	movs	r2, #7
 8006d86:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d88:	e038      	b.n	8006dfc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d135      	bne.n	8006dfc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2207      	movs	r2, #7
 8006d94:	705a      	strb	r2, [r3, #1]
      break;
 8006d96:	e031      	b.n	8006dfc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2207      	movs	r2, #7
 8006d9c:	705a      	strb	r2, [r3, #1]
      break;
 8006d9e:	e02d      	b.n	8006dfc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d017      	beq.n	8006dda <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006db6:	23ff      	movs	r3, #255	; 0xff
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f903 	bl	8006fc4 <USBH_Get_StringDesc>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006dcc:	e018      	b.n	8006e00 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d115      	bne.n	8006e00 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd8:	e012      	b.n	8006e00 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dde:	e00f      	b.n	8006e00 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006de0:	bf00      	nop
 8006de2:	e00e      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006de4:	bf00      	nop
 8006de6:	e00c      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006de8:	bf00      	nop
 8006dea:	e00a      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006dec:	bf00      	nop
 8006dee:	e008      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006df0:	bf00      	nop
 8006df2:	e006      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006df4:	bf00      	nop
 8006df6:	e004      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006df8:	bf00      	nop
 8006dfa:	e002      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e000      	b.n	8006e02 <USBH_HandleEnum+0x3be>
      break;
 8006e00:	bf00      	nop
  }
  return Status;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f804 	bl	8006e4e <USBH_HandleSof>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b0b      	cmp	r3, #11
 8006e5e:	d10a      	bne.n	8006e76 <USBH_HandleSof+0x28>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
  }
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006e8e:	bf00      	nop
}
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006eaa:	bf00      	nop
}
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 f844 	bl	8007f92 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	791b      	ldrb	r3, [r3, #4]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fe91 	bl	8007c38 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	795b      	ldrb	r3, [r3, #5]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fe8b 	bl	8007c38 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f864 	bl	800701a <USBH_GetDescriptor>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f68:	78fa      	ldrb	r2, [r7, #3]
 8006f6a:	b292      	uxth	r2, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f000 f918 	bl	80071a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	331c      	adds	r3, #28
 8006f8c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006f8e:	887b      	ldrh	r3, [r7, #2]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f83d 	bl	800701a <USBH_GetDescriptor>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d107      	bne.n	8006fba <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006faa:	887b      	ldrh	r3, [r7, #2]
 8006fac:	461a      	mov	r2, r3
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f987 	bl	80072c4 <USBH_ParseCfgDesc>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	72fb      	strb	r3, [r7, #11]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006fe0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006fe8:	893b      	ldrh	r3, [r7, #8]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	460b      	mov	r3, r1
 8006fee:	2100      	movs	r1, #0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f812 	bl	800701a <USBH_GetDescriptor>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d107      	bne.n	8007010 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007006:	893a      	ldrh	r2, [r7, #8]
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb24 	bl	8007658 <USBH_ParseStringDesc>
  }

  return status;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	607b      	str	r3, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	72fb      	strb	r3, [r7, #11]
 8007028:	4613      	mov	r3, r2
 800702a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	789b      	ldrb	r3, [r3, #2]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d11c      	bne.n	800706e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800703a:	b2da      	uxtb	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2206      	movs	r2, #6
 8007044:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	893a      	ldrh	r2, [r7, #8]
 800704a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800704c:	893b      	ldrh	r3, [r7, #8]
 800704e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007056:	d104      	bne.n	8007062 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f240 4209 	movw	r2, #1033	; 0x409
 800705e:	829a      	strh	r2, [r3, #20]
 8007060:	e002      	b.n	8007068 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8b3a      	ldrh	r2, [r7, #24]
 800706c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800706e:	8b3b      	ldrh	r3, [r7, #24]
 8007070:	461a      	mov	r2, r3
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fb3d 	bl	80076f4 <USBH_CtlReq>
 800707a:	4603      	mov	r3, r0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	789b      	ldrb	r3, [r3, #2]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10f      	bne.n	80070b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2205      	movs	r2, #5
 80070a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070b8:	2200      	movs	r2, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb19 	bl	80076f4 <USBH_CtlReq>
 80070c2:	4603      	mov	r3, r0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	789b      	ldrb	r3, [r3, #2]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d10e      	bne.n	80070fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2209      	movs	r2, #9
 80070ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	887a      	ldrh	r2, [r7, #2]
 80070f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 faf6 	bl	80076f4 <USBH_CtlReq>
 8007108:	4603      	mov	r3, r0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	789b      	ldrb	r3, [r3, #2]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d10f      	bne.n	8007146 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2203      	movs	r2, #3
 8007130:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	b29a      	uxth	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fad2 	bl	80076f4 <USBH_CtlReq>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	789b      	ldrb	r3, [r3, #2]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10f      	bne.n	800718e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	b29a      	uxth	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800718e:	2200      	movs	r2, #0
 8007190:	2100      	movs	r1, #0
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 faae 	bl	80076f4 <USBH_CtlReq>
 8007198:	4603      	mov	r3, r0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	4613      	mov	r3, r2
 80071ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	785a      	ldrb	r2, [r3, #1]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3302      	adds	r3, #2
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	3303      	adds	r3, #3
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4313      	orrs	r3, r2
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	791a      	ldrb	r2, [r3, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	795a      	ldrb	r2, [r3, #5]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	799a      	ldrb	r2, [r3, #6]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	79da      	ldrb	r2, [r3, #7]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	79db      	ldrb	r3, [r3, #7]
 8007200:	2b20      	cmp	r3, #32
 8007202:	dc11      	bgt.n	8007228 <USBH_ParseDevDesc+0x86>
 8007204:	2b08      	cmp	r3, #8
 8007206:	db16      	blt.n	8007236 <USBH_ParseDevDesc+0x94>
 8007208:	3b08      	subs	r3, #8
 800720a:	2201      	movs	r2, #1
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <USBH_ParseDevDesc+0x8a>
 8007226:	e006      	b.n	8007236 <USBH_ParseDevDesc+0x94>
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d104      	bne.n	8007236 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	79da      	ldrb	r2, [r3, #7]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	71da      	strb	r2, [r3, #7]
      break;
 8007234:	e003      	b.n	800723e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2240      	movs	r2, #64	; 0x40
 800723a:	71da      	strb	r2, [r3, #7]
      break;
 800723c:	bf00      	nop
  }

  if (length > 8U)
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d939      	bls.n	80072b8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	3308      	adds	r3, #8
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	b29a      	uxth	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	3309      	adds	r3, #9
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	b29b      	uxth	r3, r3
 8007258:	4313      	orrs	r3, r2
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	330a      	adds	r3, #10
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	b29a      	uxth	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	330b      	adds	r3, #11
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	021b      	lsls	r3, r3, #8
 8007272:	b29b      	uxth	r3, r3
 8007274:	4313      	orrs	r3, r2
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	330c      	adds	r3, #12
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b29a      	uxth	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	330d      	adds	r3, #13
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	b29b      	uxth	r3, r3
 8007290:	4313      	orrs	r3, r2
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	7b9a      	ldrb	r2, [r3, #14]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	7bda      	ldrb	r2, [r3, #15]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	7c1a      	ldrb	r2, [r3, #16]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	7c5a      	ldrb	r2, [r3, #17]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	745a      	strb	r2, [r3, #17]
  }
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08c      	sub	sp, #48	; 0x30
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072d8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	785a      	ldrb	r2, [r3, #1]
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	3302      	adds	r3, #2
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	b29a      	uxth	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	3303      	adds	r3, #3
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	b29b      	uxth	r3, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	b29b      	uxth	r3, r3
 800731c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007320:	bf28      	it	cs
 8007322:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007326:	b29a      	uxth	r2, r3
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	791a      	ldrb	r2, [r3, #4]
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	795a      	ldrb	r2, [r3, #5]
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	799a      	ldrb	r2, [r3, #6]
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	79da      	ldrb	r2, [r3, #7]
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	7a1a      	ldrb	r2, [r3, #8]
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b09      	cmp	r3, #9
 800735a:	d002      	beq.n	8007362 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	2209      	movs	r2, #9
 8007360:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	2b09      	cmp	r3, #9
 8007366:	f240 809d 	bls.w	80074a4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800736a:	2309      	movs	r3, #9
 800736c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007372:	e081      	b.n	8007478 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007374:	f107 0316 	add.w	r3, r7, #22
 8007378:	4619      	mov	r1, r3
 800737a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800737c:	f000 f99f 	bl	80076be <USBH_GetNextDesc>
 8007380:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b04      	cmp	r3, #4
 8007388:	d176      	bne.n	8007478 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b09      	cmp	r3, #9
 8007390:	d002      	beq.n	8007398 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	2209      	movs	r2, #9
 8007396:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800739c:	221a      	movs	r2, #26
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	3308      	adds	r3, #8
 80073a4:	6a3a      	ldr	r2, [r7, #32]
 80073a6:	4413      	add	r3, r2
 80073a8:	3302      	adds	r3, #2
 80073aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80073ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ae:	69f8      	ldr	r0, [r7, #28]
 80073b0:	f000 f87e 	bl	80074b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80073be:	e043      	b.n	8007448 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80073c0:	f107 0316 	add.w	r3, r7, #22
 80073c4:	4619      	mov	r1, r3
 80073c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c8:	f000 f979 	bl	80076be <USBH_GetNextDesc>
 80073cc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b05      	cmp	r3, #5
 80073d4:	d138      	bne.n	8007448 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	795b      	ldrb	r3, [r3, #5]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d10f      	bne.n	80073fe <USBH_ParseCfgDesc+0x13a>
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	799b      	ldrb	r3, [r3, #6]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d10b      	bne.n	80073fe <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	79db      	ldrb	r3, [r3, #7]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10f      	bne.n	800740e <USBH_ParseCfgDesc+0x14a>
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d00b      	beq.n	800740e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	2209      	movs	r2, #9
 80073fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073fc:	e007      	b.n	800740e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b07      	cmp	r3, #7
 8007404:	d004      	beq.n	8007410 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	2207      	movs	r2, #7
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	e000      	b.n	8007410 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800740e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007414:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007418:	3201      	adds	r2, #1
 800741a:	00d2      	lsls	r2, r2, #3
 800741c:	211a      	movs	r1, #26
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4413      	add	r3, r2
 8007424:	3308      	adds	r3, #8
 8007426:	6a3a      	ldr	r2, [r7, #32]
 8007428:	4413      	add	r3, r2
 800742a:	3304      	adds	r3, #4
 800742c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800742e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007430:	69b9      	ldr	r1, [r7, #24]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f86b 	bl	800750e <USBH_ParseEPDesc>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800743e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007442:	3301      	adds	r3, #1
 8007444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	791b      	ldrb	r3, [r3, #4]
 800744c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007450:	429a      	cmp	r2, r3
 8007452:	d204      	bcs.n	800745e <USBH_ParseCfgDesc+0x19a>
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	885a      	ldrh	r2, [r3, #2]
 8007458:	8afb      	ldrh	r3, [r7, #22]
 800745a:	429a      	cmp	r2, r3
 800745c:	d8b0      	bhi.n	80073c0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	791b      	ldrb	r3, [r3, #4]
 8007462:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007466:	429a      	cmp	r2, r3
 8007468:	d201      	bcs.n	800746e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800746a:	2303      	movs	r3, #3
 800746c:	e01c      	b.n	80074a8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800746e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007472:	3301      	adds	r3, #1
 8007474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800747c:	2b01      	cmp	r3, #1
 800747e:	d805      	bhi.n	800748c <USBH_ParseCfgDesc+0x1c8>
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	885a      	ldrh	r2, [r3, #2]
 8007484:	8afb      	ldrh	r3, [r7, #22]
 8007486:	429a      	cmp	r2, r3
 8007488:	f63f af74 	bhi.w	8007374 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	791b      	ldrb	r3, [r3, #4]
 8007490:	2b02      	cmp	r3, #2
 8007492:	bf28      	it	cs
 8007494:	2302      	movcs	r3, #2
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800749c:	429a      	cmp	r2, r3
 800749e:	d201      	bcs.n	80074a4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e001      	b.n	80074a8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80074a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3730      	adds	r7, #48	; 0x30
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781a      	ldrb	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785a      	ldrb	r2, [r3, #1]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	789a      	ldrb	r2, [r3, #2]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	78da      	ldrb	r2, [r3, #3]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	791a      	ldrb	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	795a      	ldrb	r2, [r3, #5]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	799a      	ldrb	r2, [r3, #6]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	79da      	ldrb	r2, [r3, #7]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	7a1a      	ldrb	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	721a      	strb	r2, [r3, #8]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	785a      	ldrb	r2, [r3, #1]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	789a      	ldrb	r2, [r3, #2]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	78da      	ldrb	r2, [r3, #3]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3304      	adds	r3, #4
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3305      	adds	r3, #5
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	b29b      	uxth	r3, r3
 8007552:	4313      	orrs	r3, r2
 8007554:	b29a      	uxth	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	799a      	ldrb	r2, [r3, #6]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	889b      	ldrh	r3, [r3, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d102      	bne.n	8007570 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800756a:	2303      	movs	r3, #3
 800756c:	75fb      	strb	r3, [r7, #23]
 800756e:	e033      	b.n	80075d8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	889b      	ldrh	r3, [r3, #4]
 8007574:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007578:	f023 0307 	bic.w	r3, r3, #7
 800757c:	b29a      	uxth	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	889b      	ldrh	r3, [r3, #4]
 8007586:	b21a      	sxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b299      	uxth	r1, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3305      	adds	r3, #5
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	b29b      	uxth	r3, r3
 800759c:	430b      	orrs	r3, r1
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d110      	bne.n	80075ca <USBH_ParseEPDesc+0xbc>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3304      	adds	r3, #4
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b299      	uxth	r1, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3305      	adds	r3, #5
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	021b      	lsls	r3, r3, #8
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	430b      	orrs	r3, r1
 80075be:	b29b      	uxth	r3, r3
 80075c0:	b21b      	sxth	r3, r3
 80075c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c6:	b21b      	sxth	r3, r3
 80075c8:	e001      	b.n	80075ce <USBH_ParseEPDesc+0xc0>
 80075ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b21b      	sxth	r3, r3
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d116      	bne.n	8007610 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	78db      	ldrb	r3, [r3, #3]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d005      	beq.n	80075fa <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	78db      	ldrb	r3, [r3, #3]
 80075f2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d127      	bne.n	800764a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	799b      	ldrb	r3, [r3, #6]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <USBH_ParseEPDesc+0xfc>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	799b      	ldrb	r3, [r3, #6]
 8007606:	2b10      	cmp	r3, #16
 8007608:	d91f      	bls.n	800764a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800760a:	2303      	movs	r3, #3
 800760c:	75fb      	strb	r3, [r7, #23]
 800760e:	e01c      	b.n	800764a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	78db      	ldrb	r3, [r3, #3]
 8007614:	f003 0303 	and.w	r3, r3, #3
 8007618:	2b01      	cmp	r3, #1
 800761a:	d10a      	bne.n	8007632 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	799b      	ldrb	r3, [r3, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <USBH_ParseEPDesc+0x11e>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	799b      	ldrb	r3, [r3, #6]
 8007628:	2b10      	cmp	r3, #16
 800762a:	d90e      	bls.n	800764a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800762c:	2303      	movs	r3, #3
 800762e:	75fb      	strb	r3, [r7, #23]
 8007630:	e00b      	b.n	800764a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	78db      	ldrb	r3, [r3, #3]
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	2b03      	cmp	r3, #3
 800763c:	d105      	bne.n	800764a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	799b      	ldrb	r3, [r3, #6]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007646:	2303      	movs	r3, #3
 8007648:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d120      	bne.n	80076b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	1e9a      	subs	r2, r3, #2
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	4293      	cmp	r3, r2
 800767a:	bf28      	it	cs
 800767c:	4613      	movcs	r3, r2
 800767e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3302      	adds	r3, #2
 8007684:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007686:	2300      	movs	r3, #0
 8007688:	82fb      	strh	r3, [r7, #22]
 800768a:	e00b      	b.n	80076a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800768c:	8afb      	ldrh	r3, [r7, #22]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	3301      	adds	r3, #1
 800769c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800769e:	8afb      	ldrh	r3, [r7, #22]
 80076a0:	3302      	adds	r3, #2
 80076a2:	82fb      	strh	r3, [r7, #22]
 80076a4:	8afa      	ldrh	r2, [r7, #22]
 80076a6:	8abb      	ldrh	r3, [r7, #20]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d3ef      	bcc.n	800768c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
  }
}
 80076b2:	bf00      	nop
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	881a      	ldrh	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007702:	2301      	movs	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	789b      	ldrb	r3, [r3, #2]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d002      	beq.n	8007714 <USBH_CtlReq+0x20>
 800770e:	2b02      	cmp	r3, #2
 8007710:	d00f      	beq.n	8007732 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007712:	e027      	b.n	8007764 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	88fa      	ldrh	r2, [r7, #6]
 800771e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2202      	movs	r2, #2
 800772a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800772c:	2301      	movs	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
      break;
 8007730:	e018      	b.n	8007764 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f81c 	bl	8007770 <USBH_HandleControl>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <USBH_CtlReq+0x54>
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d106      	bne.n	8007756 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	761a      	strb	r2, [r3, #24]
      break;
 8007754:	e005      	b.n	8007762 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d102      	bne.n	8007762 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	709a      	strb	r2, [r3, #2]
      break;
 8007762:	bf00      	nop
  }
  return status;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af02      	add	r7, sp, #8
 8007776:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800777c:	2300      	movs	r3, #0
 800777e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7e1b      	ldrb	r3, [r3, #24]
 8007784:	3b01      	subs	r3, #1
 8007786:	2b0a      	cmp	r3, #10
 8007788:	f200 8156 	bhi.w	8007a38 <USBH_HandleControl+0x2c8>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <USBH_HandleControl+0x24>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077c1 	.word	0x080077c1
 8007798:	080077db 	.word	0x080077db
 800779c:	08007845 	.word	0x08007845
 80077a0:	0800786b 	.word	0x0800786b
 80077a4:	080078a3 	.word	0x080078a3
 80077a8:	080078cd 	.word	0x080078cd
 80077ac:	0800791f 	.word	0x0800791f
 80077b0:	08007941 	.word	0x08007941
 80077b4:	0800797d 	.word	0x0800797d
 80077b8:	080079a3 	.word	0x080079a3
 80077bc:	080079e1 	.word	0x080079e1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f103 0110 	add.w	r1, r3, #16
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	795b      	ldrb	r3, [r3, #5]
 80077ca:	461a      	mov	r2, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f943 	bl	8007a58 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	761a      	strb	r2, [r3, #24]
      break;
 80077d8:	e139      	b.n	8007a4e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	795b      	ldrb	r3, [r3, #5]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fcc5 	bl	8008170 <USBH_LL_GetURBState>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d11e      	bne.n	800782e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7c1b      	ldrb	r3, [r3, #16]
 80077f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8adb      	ldrh	r3, [r3, #22]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007802:	7b7b      	ldrb	r3, [r7, #13]
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d103      	bne.n	8007810 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2203      	movs	r2, #3
 800780c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800780e:	e115      	b.n	8007a3c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2205      	movs	r2, #5
 8007814:	761a      	strb	r2, [r3, #24]
      break;
 8007816:	e111      	b.n	8007a3c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007818:	7b7b      	ldrb	r3, [r7, #13]
 800781a:	2b80      	cmp	r3, #128	; 0x80
 800781c:	d103      	bne.n	8007826 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2209      	movs	r2, #9
 8007822:	761a      	strb	r2, [r3, #24]
      break;
 8007824:	e10a      	b.n	8007a3c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2207      	movs	r2, #7
 800782a:	761a      	strb	r2, [r3, #24]
      break;
 800782c:	e106      	b.n	8007a3c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d003      	beq.n	800783c <USBH_HandleControl+0xcc>
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b02      	cmp	r3, #2
 8007838:	f040 8100 	bne.w	8007a3c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	220b      	movs	r2, #11
 8007840:	761a      	strb	r2, [r3, #24]
      break;
 8007842:	e0fb      	b.n	8007a3c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6899      	ldr	r1, [r3, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	899a      	ldrh	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	791b      	ldrb	r3, [r3, #4]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f93a 	bl	8007ad6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2204      	movs	r2, #4
 8007866:	761a      	strb	r2, [r3, #24]
      break;
 8007868:	e0f1      	b.n	8007a4e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	791b      	ldrb	r3, [r3, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fc7d 	bl	8008170 <USBH_LL_GetURBState>
 8007876:	4603      	mov	r3, r0
 8007878:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d102      	bne.n	8007886 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2209      	movs	r2, #9
 8007884:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b05      	cmp	r3, #5
 800788a:	d102      	bne.n	8007892 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800788c:	2303      	movs	r3, #3
 800788e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007890:	e0d6      	b.n	8007a40 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b04      	cmp	r3, #4
 8007896:	f040 80d3 	bne.w	8007a40 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	220b      	movs	r2, #11
 800789e:	761a      	strb	r2, [r3, #24]
      break;
 80078a0:	e0ce      	b.n	8007a40 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6899      	ldr	r1, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	899a      	ldrh	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	795b      	ldrb	r3, [r3, #5]
 80078ae:	2001      	movs	r0, #1
 80078b0:	9000      	str	r0, [sp, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f8ea 	bl	8007a8c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078be:	b29a      	uxth	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2206      	movs	r2, #6
 80078c8:	761a      	strb	r2, [r3, #24]
      break;
 80078ca:	e0c0      	b.n	8007a4e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	795b      	ldrb	r3, [r3, #5]
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fc4c 	bl	8008170 <USBH_LL_GetURBState>
 80078d8:	4603      	mov	r3, r0
 80078da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d103      	bne.n	80078ea <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2207      	movs	r2, #7
 80078e6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078e8:	e0ac      	b.n	8007a44 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b05      	cmp	r3, #5
 80078ee:	d105      	bne.n	80078fc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	220c      	movs	r2, #12
 80078f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
      break;
 80078fa:	e0a3      	b.n	8007a44 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d103      	bne.n	800790a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2205      	movs	r2, #5
 8007906:	761a      	strb	r2, [r3, #24]
      break;
 8007908:	e09c      	b.n	8007a44 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b04      	cmp	r3, #4
 800790e:	f040 8099 	bne.w	8007a44 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	220b      	movs	r2, #11
 8007916:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007918:	2302      	movs	r3, #2
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	e092      	b.n	8007a44 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	791b      	ldrb	r3, [r3, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	2100      	movs	r1, #0
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f8d5 	bl	8007ad6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2208      	movs	r2, #8
 800793c:	761a      	strb	r2, [r3, #24]

      break;
 800793e:	e086      	b.n	8007a4e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	791b      	ldrb	r3, [r3, #4]
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fc12 	bl	8008170 <USBH_LL_GetURBState>
 800794c:	4603      	mov	r3, r0
 800794e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d105      	bne.n	8007962 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	220d      	movs	r2, #13
 800795a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007960:	e072      	b.n	8007a48 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b04      	cmp	r3, #4
 8007966:	d103      	bne.n	8007970 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	220b      	movs	r2, #11
 800796c:	761a      	strb	r2, [r3, #24]
      break;
 800796e:	e06b      	b.n	8007a48 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b05      	cmp	r3, #5
 8007974:	d168      	bne.n	8007a48 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007976:	2303      	movs	r3, #3
 8007978:	73fb      	strb	r3, [r7, #15]
      break;
 800797a:	e065      	b.n	8007a48 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	795b      	ldrb	r3, [r3, #5]
 8007980:	2201      	movs	r2, #1
 8007982:	9200      	str	r2, [sp, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	2100      	movs	r1, #0
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f87f 	bl	8007a8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007994:	b29a      	uxth	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220a      	movs	r2, #10
 800799e:	761a      	strb	r2, [r3, #24]
      break;
 80079a0:	e055      	b.n	8007a4e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	795b      	ldrb	r3, [r3, #5]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fbe1 	bl	8008170 <USBH_LL_GetURBState>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d105      	bne.n	80079c4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	220d      	movs	r2, #13
 80079c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079c2:	e043      	b.n	8007a4c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d103      	bne.n	80079d2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2209      	movs	r2, #9
 80079ce:	761a      	strb	r2, [r3, #24]
      break;
 80079d0:	e03c      	b.n	8007a4c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d139      	bne.n	8007a4c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	220b      	movs	r2, #11
 80079dc:	761a      	strb	r2, [r3, #24]
      break;
 80079de:	e035      	b.n	8007a4c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7e5b      	ldrb	r3, [r3, #25]
 80079e4:	3301      	adds	r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	765a      	strb	r2, [r3, #25]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7e5b      	ldrb	r3, [r3, #25]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d806      	bhi.n	8007a02 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a00:	e025      	b.n	8007a4e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a08:	2106      	movs	r1, #6
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	795b      	ldrb	r3, [r3, #5]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f90c 	bl	8007c38 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	791b      	ldrb	r3, [r3, #4]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f906 	bl	8007c38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a32:	2302      	movs	r3, #2
 8007a34:	73fb      	strb	r3, [r7, #15]
      break;
 8007a36:	e00a      	b.n	8007a4e <USBH_HandleControl+0x2de>

    default:
      break;
 8007a38:	bf00      	nop
 8007a3a:	e008      	b.n	8007a4e <USBH_HandleControl+0x2de>
      break;
 8007a3c:	bf00      	nop
 8007a3e:	e006      	b.n	8007a4e <USBH_HandleControl+0x2de>
      break;
 8007a40:	bf00      	nop
 8007a42:	e004      	b.n	8007a4e <USBH_HandleControl+0x2de>
      break;
 8007a44:	bf00      	nop
 8007a46:	e002      	b.n	8007a4e <USBH_HandleControl+0x2de>
      break;
 8007a48:	bf00      	nop
 8007a4a:	e000      	b.n	8007a4e <USBH_HandleControl+0x2de>
      break;
 8007a4c:	bf00      	nop
  }

  return status;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af04      	add	r7, sp, #16
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a66:	79f9      	ldrb	r1, [r7, #7]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	9302      	str	r3, [sp, #8]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	2300      	movs	r3, #0
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fb46 	bl	800810e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af04      	add	r7, sp, #16
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4611      	mov	r1, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	80fb      	strh	r3, [r7, #6]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ab0:	7979      	ldrb	r1, [r7, #5]
 8007ab2:	7e3b      	ldrb	r3, [r7, #24]
 8007ab4:	9303      	str	r3, [sp, #12]
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	9302      	str	r3, [sp, #8]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	2301      	movs	r3, #1
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fb21 	bl	800810e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b088      	sub	sp, #32
 8007ada:	af04      	add	r7, sp, #16
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	80fb      	strh	r3, [r7, #6]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007aec:	7979      	ldrb	r1, [r7, #5]
 8007aee:	2300      	movs	r3, #0
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	9302      	str	r3, [sp, #8]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	2301      	movs	r3, #1
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2300      	movs	r3, #0
 8007b00:	2201      	movs	r2, #1
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fb03 	bl	800810e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b08:	2300      	movs	r3, #0

}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b088      	sub	sp, #32
 8007b16:	af04      	add	r7, sp, #16
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	461a      	mov	r2, r3
 8007b20:	460b      	mov	r3, r1
 8007b22:	80fb      	strh	r3, [r7, #6]
 8007b24:	4613      	mov	r3, r2
 8007b26:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b36:	7979      	ldrb	r1, [r7, #5]
 8007b38:	7e3b      	ldrb	r3, [r7, #24]
 8007b3a:	9303      	str	r3, [sp, #12]
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	9302      	str	r3, [sp, #8]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	2301      	movs	r3, #1
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	2302      	movs	r3, #2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fade 	bl	800810e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af04      	add	r7, sp, #16
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4611      	mov	r1, r2
 8007b68:	461a      	mov	r2, r3
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	80fb      	strh	r3, [r7, #6]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b72:	7979      	ldrb	r1, [r7, #5]
 8007b74:	2300      	movs	r3, #0
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	2301      	movs	r3, #1
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	2302      	movs	r3, #2
 8007b86:	2201      	movs	r2, #1
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fac0 	bl	800810e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af04      	add	r7, sp, #16
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	70fb      	strb	r3, [r7, #3]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70bb      	strb	r3, [r7, #2]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007bb2:	7878      	ldrb	r0, [r7, #1]
 8007bb4:	78ba      	ldrb	r2, [r7, #2]
 8007bb6:	78f9      	ldrb	r1, [r7, #3]
 8007bb8:	8b3b      	ldrh	r3, [r7, #24]
 8007bba:	9302      	str	r3, [sp, #8]
 8007bbc:	7d3b      	ldrb	r3, [r7, #20]
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	7c3b      	ldrb	r3, [r7, #16]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa53 	bl	8008072 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa72 	bl	80080d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f836 	bl	8007c74 <USBH_GetFreePipe>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00a      	beq.n	8007c2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	89fb      	ldrh	r3, [r7, #14]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	33e0      	adds	r3, #224	; 0xe0
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c2c:	89fb      	ldrh	r3, [r7, #14]
 8007c2e:	b2db      	uxtb	r3, r3
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d80d      	bhi.n	8007c66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	33e0      	adds	r3, #224	; 0xe0
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	33e0      	adds	r3, #224	; 0xe0
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e00f      	b.n	8007ca6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	33e0      	adds	r3, #224	; 0xe0
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	e007      	b.n	8007cb0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	73fb      	strb	r3, [r7, #15]
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	2b0f      	cmp	r3, #15
 8007caa:	d9ec      	bls.n	8007c86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	490e      	ldr	r1, [pc, #56]	; (8007cfc <MX_USB_HOST_Init+0x40>)
 8007cc4:	480e      	ldr	r0, [pc, #56]	; (8007d00 <MX_USB_HOST_Init+0x44>)
 8007cc6:	f7fe fba7 	bl	8006418 <USBH_Init>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007cd0:	f7f8 fff6 	bl	8000cc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007cd4:	490b      	ldr	r1, [pc, #44]	; (8007d04 <MX_USB_HOST_Init+0x48>)
 8007cd6:	480a      	ldr	r0, [pc, #40]	; (8007d00 <MX_USB_HOST_Init+0x44>)
 8007cd8:	f7fe fc2c 	bl	8006534 <USBH_RegisterClass>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ce2:	f7f8 ffed 	bl	8000cc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007ce6:	4806      	ldr	r0, [pc, #24]	; (8007d00 <MX_USB_HOST_Init+0x44>)
 8007ce8:	f7fe fcb0 	bl	800664c <USBH_Start>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007cf2:	f7f8 ffe5 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007cf6:	bf00      	nop
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	08007d1d 	.word	0x08007d1d
 8007d00:	200001f0 	.word	0x200001f0
 8007d04:	2000000c 	.word	0x2000000c

08007d08 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d0c:	4802      	ldr	r0, [pc, #8]	; (8007d18 <MX_USB_HOST_Process+0x10>)
 8007d0e:	f7fe fcad 	bl	800666c <USBH_Process>
}
 8007d12:	bf00      	nop
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200001f0 	.word	0x200001f0

08007d1c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d819      	bhi.n	8007d64 <USBH_UserProcess+0x48>
 8007d30:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <USBH_UserProcess+0x1c>)
 8007d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007d65 	.word	0x08007d65
 8007d3c:	08007d55 	.word	0x08007d55
 8007d40:	08007d65 	.word	0x08007d65
 8007d44:	08007d5d 	.word	0x08007d5d
 8007d48:	08007d4d 	.word	0x08007d4d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <USBH_UserProcess+0x58>)
 8007d4e:	2203      	movs	r2, #3
 8007d50:	701a      	strb	r2, [r3, #0]
  break;
 8007d52:	e008      	b.n	8007d66 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d54:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <USBH_UserProcess+0x58>)
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
  break;
 8007d5a:	e004      	b.n	8007d66 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <USBH_UserProcess+0x58>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	701a      	strb	r2, [r3, #0]
  break;
 8007d62:	e000      	b.n	8007d66 <USBH_UserProcess+0x4a>

  default:
  break;
 8007d64:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	200005c8 	.word	0x200005c8

08007d78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	; 0x28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d80:	f107 0314 	add.w	r3, r7, #20
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	605a      	str	r2, [r3, #4]
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d98:	d147      	bne.n	8007e2a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	4b25      	ldr	r3, [pc, #148]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	4a24      	ldr	r2, [pc, #144]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007da4:	f043 0301 	orr.w	r3, r3, #1
 8007da8:	6313      	str	r3, [r2, #48]	; 0x30
 8007daa:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007dc4:	f107 0314 	add.w	r3, r7, #20
 8007dc8:	4619      	mov	r1, r3
 8007dca:	481b      	ldr	r0, [pc, #108]	; (8007e38 <HAL_HCD_MspInit+0xc0>)
 8007dcc:	f7f9 fae4 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007dd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dde:	2300      	movs	r3, #0
 8007de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007de2:	230a      	movs	r3, #10
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de6:	f107 0314 	add.w	r3, r7, #20
 8007dea:	4619      	mov	r1, r3
 8007dec:	4812      	ldr	r0, [pc, #72]	; (8007e38 <HAL_HCD_MspInit+0xc0>)
 8007dee:	f7f9 fad3 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007df2:	4b10      	ldr	r3, [pc, #64]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	4a0f      	ldr	r2, [pc, #60]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfc:	6353      	str	r3, [r2, #52]	; 0x34
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	4a0b      	ldr	r2, [pc, #44]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <HAL_HCD_MspInit+0xbc>)
 8007e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	2043      	movs	r0, #67	; 0x43
 8007e20:	f7f9 fa83 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e24:	2043      	movs	r0, #67	; 0x43
 8007e26:	f7f9 fa9c 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	3728      	adds	r7, #40	; 0x28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40020000 	.word	0x40020000

08007e3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe ffed 	bl	8006e2a <USBH_LL_IncTimer>
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff f825 	bl	8006eb6 <USBH_LL_Connect>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff f82e 	bl	8006ee4 <USBH_LL_Disconnect>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe ffdf 	bl	8006e7e <USBH_LL_PortEnabled>
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe ffdf 	bl	8006e9a <USBH_LL_PortDisabled>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d12a      	bne.n	8007f4c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ef6:	4a18      	ldr	r2, [pc, #96]	; (8007f58 <USBH_LL_Init+0x74>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f02:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f06:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f0c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f10:	2208      	movs	r2, #8
 8007f12:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f14:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f1a:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f20:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f22:	2202      	movs	r2, #2
 8007f24:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f2c:	480a      	ldr	r0, [pc, #40]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f2e:	f7f9 fbe8 	bl	8001702 <HAL_HCD_Init>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f38:	f7f8 fec2 	bl	8000cc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f3c:	4806      	ldr	r0, [pc, #24]	; (8007f58 <USBH_LL_Init+0x74>)
 8007f3e:	f7f9 ffcc 	bl	8001eda <HAL_HCD_GetCurrentFrame>
 8007f42:	4603      	mov	r3, r0
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fe ff60 	bl	8006e0c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200005cc 	.word	0x200005cc

08007f5c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7f9 ff3b 	bl	8001dee <HAL_HCD_Start>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f95c 	bl	800823c <USBH_Get_USB_Status>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7f9 ff43 	bl	8001e34 <HAL_HCD_Stop>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f941 	bl	800823c <USBH_Get_USB_Status>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f9 ff8b 	bl	8001ef6 <HAL_HCD_GetCurrentSpeed>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d00c      	beq.n	8008000 <USBH_LL_GetSpeed+0x38>
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d80d      	bhi.n	8008006 <USBH_LL_GetSpeed+0x3e>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <USBH_LL_GetSpeed+0x2c>
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d003      	beq.n	8007ffa <USBH_LL_GetSpeed+0x32>
 8007ff2:	e008      	b.n	8008006 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff8:	e008      	b.n	800800c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ffe:	e005      	b.n	800800c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008000:	2302      	movs	r3, #2
 8008002:	73fb      	strb	r3, [r7, #15]
    break;
 8008004:	e002      	b.n	800800c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008006:	2301      	movs	r3, #1
 8008008:	73fb      	strb	r3, [r7, #15]
    break;
 800800a:	bf00      	nop
  }
  return  speed;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800802c:	4618      	mov	r0, r3
 800802e:	f7f9 ff1e 	bl	8001e6e <HAL_HCD_ResetPort>
 8008032:	4603      	mov	r3, r0
 8008034:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f8ff 	bl	800823c <USBH_Get_USB_Status>
 800803e:	4603      	mov	r3, r0
 8008040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008042:	7bbb      	ldrb	r3, [r7, #14]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800805e:	78fa      	ldrb	r2, [r7, #3]
 8008060:	4611      	mov	r1, r2
 8008062:	4618      	mov	r0, r3
 8008064:	f7f9 ff25 	bl	8001eb2 <HAL_HCD_HC_GetXferCount>
 8008068:	4603      	mov	r3, r0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008072:	b590      	push	{r4, r7, lr}
 8008074:	b089      	sub	sp, #36	; 0x24
 8008076:	af04      	add	r7, sp, #16
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	4608      	mov	r0, r1
 800807c:	4611      	mov	r1, r2
 800807e:	461a      	mov	r2, r3
 8008080:	4603      	mov	r3, r0
 8008082:	70fb      	strb	r3, [r7, #3]
 8008084:	460b      	mov	r3, r1
 8008086:	70bb      	strb	r3, [r7, #2]
 8008088:	4613      	mov	r3, r2
 800808a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800809a:	787c      	ldrb	r4, [r7, #1]
 800809c:	78ba      	ldrb	r2, [r7, #2]
 800809e:	78f9      	ldrb	r1, [r7, #3]
 80080a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080a2:	9302      	str	r3, [sp, #8]
 80080a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	4623      	mov	r3, r4
 80080b2:	f7f9 fb88 	bl	80017c6 <HAL_HCD_HC_Init>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f8bd 	bl	800823c <USBH_Get_USB_Status>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd90      	pop	{r4, r7, pc}

080080d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 fbf8 	bl	80018e4 <HAL_HCD_HC_Halt>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f89e 	bl	800823c <USBH_Get_USB_Status>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008104:	7bbb      	ldrb	r3, [r7, #14]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800810e:	b590      	push	{r4, r7, lr}
 8008110:	b089      	sub	sp, #36	; 0x24
 8008112:	af04      	add	r7, sp, #16
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	461a      	mov	r2, r3
 800811c:	4603      	mov	r3, r0
 800811e:	70fb      	strb	r3, [r7, #3]
 8008120:	460b      	mov	r3, r1
 8008122:	70bb      	strb	r3, [r7, #2]
 8008124:	4613      	mov	r3, r2
 8008126:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008136:	787c      	ldrb	r4, [r7, #1]
 8008138:	78ba      	ldrb	r2, [r7, #2]
 800813a:	78f9      	ldrb	r1, [r7, #3]
 800813c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008140:	9303      	str	r3, [sp, #12]
 8008142:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008144:	9302      	str	r3, [sp, #8]
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4623      	mov	r3, r4
 8008152:	f7f9 fbeb 	bl	800192c <HAL_HCD_HC_SubmitRequest>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f86d 	bl	800823c <USBH_Get_USB_Status>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008166:	7bbb      	ldrb	r3, [r7, #14]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	bd90      	pop	{r4, r7, pc}

08008170 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7f9 fe7f 	bl	8001e8a <HAL_HCD_HC_GetURBState>
 800818c:	4603      	mov	r3, r0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d103      	bne.n	80081b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f870 	bl	8008294 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80081b4:	20c8      	movs	r0, #200	; 0xc8
 80081b6:	f7f8 ffb9 	bl	800112c <HAL_Delay>
  return USBH_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
 80081d0:	4613      	mov	r3, r2
 80081d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	212c      	movs	r1, #44	; 0x2c
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	4413      	add	r3, r2
 80081e8:	333b      	adds	r3, #59	; 0x3b
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	212c      	movs	r1, #44	; 0x2c
 80081f6:	fb01 f303 	mul.w	r3, r1, r3
 80081fa:	4413      	add	r3, r2
 80081fc:	3354      	adds	r3, #84	; 0x54
 80081fe:	78ba      	ldrb	r2, [r7, #2]
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e008      	b.n	8008216 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	212c      	movs	r1, #44	; 0x2c
 800820a:	fb01 f303 	mul.w	r3, r1, r3
 800820e:	4413      	add	r3, r2
 8008210:	3355      	adds	r3, #85	; 0x55
 8008212:	78ba      	ldrb	r2, [r7, #2]
 8008214:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7f8 ff7d 	bl	800112c <HAL_Delay>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2b03      	cmp	r3, #3
 800824e:	d817      	bhi.n	8008280 <USBH_Get_USB_Status+0x44>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBH_Get_USB_Status+0x1c>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	08008269 	.word	0x08008269
 800825c:	0800826f 	.word	0x0800826f
 8008260:	08008275 	.word	0x08008275
 8008264:	0800827b 	.word	0x0800827b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
    break;
 800826c:	e00b      	b.n	8008286 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800826e:	2302      	movs	r3, #2
 8008270:	73fb      	strb	r3, [r7, #15]
    break;
 8008272:	e008      	b.n	8008286 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008274:	2301      	movs	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]
    break;
 8008278:	e005      	b.n	8008286 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800827a:	2302      	movs	r3, #2
 800827c:	73fb      	strb	r3, [r7, #15]
    break;
 800827e:	e002      	b.n	8008286 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008280:	2302      	movs	r3, #2
 8008282:	73fb      	strb	r3, [r7, #15]
    break;
 8008284:	bf00      	nop
  }
  return usb_status;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
 80082ac:	e001      	b.n	80082b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80082ae:	2301      	movs	r3, #1
 80082b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	461a      	mov	r2, r3
 80082b6:	2101      	movs	r1, #1
 80082b8:	4803      	ldr	r0, [pc, #12]	; (80082c8 <MX_DriverVbusFS+0x34>)
 80082ba:	f7f9 fa09 	bl	80016d0 <HAL_GPIO_WritePin>
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	40020800 	.word	0x40020800

080082cc <__errno>:
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <__errno+0x8>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	2000002c 	.word	0x2000002c

080082d8 <__libc_init_array>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	4d0d      	ldr	r5, [pc, #52]	; (8008310 <__libc_init_array+0x38>)
 80082dc:	4c0d      	ldr	r4, [pc, #52]	; (8008314 <__libc_init_array+0x3c>)
 80082de:	1b64      	subs	r4, r4, r5
 80082e0:	10a4      	asrs	r4, r4, #2
 80082e2:	2600      	movs	r6, #0
 80082e4:	42a6      	cmp	r6, r4
 80082e6:	d109      	bne.n	80082fc <__libc_init_array+0x24>
 80082e8:	4d0b      	ldr	r5, [pc, #44]	; (8008318 <__libc_init_array+0x40>)
 80082ea:	4c0c      	ldr	r4, [pc, #48]	; (800831c <__libc_init_array+0x44>)
 80082ec:	f000 fc9e 	bl	8008c2c <_init>
 80082f0:	1b64      	subs	r4, r4, r5
 80082f2:	10a4      	asrs	r4, r4, #2
 80082f4:	2600      	movs	r6, #0
 80082f6:	42a6      	cmp	r6, r4
 80082f8:	d105      	bne.n	8008306 <__libc_init_array+0x2e>
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008300:	4798      	blx	r3
 8008302:	3601      	adds	r6, #1
 8008304:	e7ee      	b.n	80082e4 <__libc_init_array+0xc>
 8008306:	f855 3b04 	ldr.w	r3, [r5], #4
 800830a:	4798      	blx	r3
 800830c:	3601      	adds	r6, #1
 800830e:	e7f2      	b.n	80082f6 <__libc_init_array+0x1e>
 8008310:	08008ca8 	.word	0x08008ca8
 8008314:	08008ca8 	.word	0x08008ca8
 8008318:	08008ca8 	.word	0x08008ca8
 800831c:	08008cac 	.word	0x08008cac

08008320 <malloc>:
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <malloc+0xc>)
 8008322:	4601      	mov	r1, r0
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f000 b87f 	b.w	8008428 <_malloc_r>
 800832a:	bf00      	nop
 800832c:	2000002c 	.word	0x2000002c

08008330 <free>:
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <free+0xc>)
 8008332:	4601      	mov	r1, r0
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	f000 b80b 	b.w	8008350 <_free_r>
 800833a:	bf00      	nop
 800833c:	2000002c 	.word	0x2000002c

08008340 <memset>:
 8008340:	4402      	add	r2, r0
 8008342:	4603      	mov	r3, r0
 8008344:	4293      	cmp	r3, r2
 8008346:	d100      	bne.n	800834a <memset+0xa>
 8008348:	4770      	bx	lr
 800834a:	f803 1b01 	strb.w	r1, [r3], #1
 800834e:	e7f9      	b.n	8008344 <memset+0x4>

08008350 <_free_r>:
 8008350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008352:	2900      	cmp	r1, #0
 8008354:	d044      	beq.n	80083e0 <_free_r+0x90>
 8008356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835a:	9001      	str	r0, [sp, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f1a1 0404 	sub.w	r4, r1, #4
 8008362:	bfb8      	it	lt
 8008364:	18e4      	addlt	r4, r4, r3
 8008366:	f000 f903 	bl	8008570 <__malloc_lock>
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <_free_r+0x94>)
 800836c:	9801      	ldr	r0, [sp, #4]
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	b933      	cbnz	r3, 8008380 <_free_r+0x30>
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	6014      	str	r4, [r2, #0]
 8008376:	b003      	add	sp, #12
 8008378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800837c:	f000 b8fe 	b.w	800857c <__malloc_unlock>
 8008380:	42a3      	cmp	r3, r4
 8008382:	d908      	bls.n	8008396 <_free_r+0x46>
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	1961      	adds	r1, r4, r5
 8008388:	428b      	cmp	r3, r1
 800838a:	bf01      	itttt	eq
 800838c:	6819      	ldreq	r1, [r3, #0]
 800838e:	685b      	ldreq	r3, [r3, #4]
 8008390:	1949      	addeq	r1, r1, r5
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	e7ed      	b.n	8008372 <_free_r+0x22>
 8008396:	461a      	mov	r2, r3
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b10b      	cbz	r3, 80083a0 <_free_r+0x50>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d9fa      	bls.n	8008396 <_free_r+0x46>
 80083a0:	6811      	ldr	r1, [r2, #0]
 80083a2:	1855      	adds	r5, r2, r1
 80083a4:	42a5      	cmp	r5, r4
 80083a6:	d10b      	bne.n	80083c0 <_free_r+0x70>
 80083a8:	6824      	ldr	r4, [r4, #0]
 80083aa:	4421      	add	r1, r4
 80083ac:	1854      	adds	r4, r2, r1
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	d1e0      	bne.n	8008376 <_free_r+0x26>
 80083b4:	681c      	ldr	r4, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	6053      	str	r3, [r2, #4]
 80083ba:	4421      	add	r1, r4
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	e7da      	b.n	8008376 <_free_r+0x26>
 80083c0:	d902      	bls.n	80083c8 <_free_r+0x78>
 80083c2:	230c      	movs	r3, #12
 80083c4:	6003      	str	r3, [r0, #0]
 80083c6:	e7d6      	b.n	8008376 <_free_r+0x26>
 80083c8:	6825      	ldr	r5, [r4, #0]
 80083ca:	1961      	adds	r1, r4, r5
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf04      	itt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	6063      	str	r3, [r4, #4]
 80083d6:	bf04      	itt	eq
 80083d8:	1949      	addeq	r1, r1, r5
 80083da:	6021      	streq	r1, [r4, #0]
 80083dc:	6054      	str	r4, [r2, #4]
 80083de:	e7ca      	b.n	8008376 <_free_r+0x26>
 80083e0:	b003      	add	sp, #12
 80083e2:	bd30      	pop	{r4, r5, pc}
 80083e4:	200008d0 	.word	0x200008d0

080083e8 <sbrk_aligned>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	4e0e      	ldr	r6, [pc, #56]	; (8008424 <sbrk_aligned+0x3c>)
 80083ec:	460c      	mov	r4, r1
 80083ee:	6831      	ldr	r1, [r6, #0]
 80083f0:	4605      	mov	r5, r0
 80083f2:	b911      	cbnz	r1, 80083fa <sbrk_aligned+0x12>
 80083f4:	f000 f88c 	bl	8008510 <_sbrk_r>
 80083f8:	6030      	str	r0, [r6, #0]
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f887 	bl	8008510 <_sbrk_r>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d00a      	beq.n	800841c <sbrk_aligned+0x34>
 8008406:	1cc4      	adds	r4, r0, #3
 8008408:	f024 0403 	bic.w	r4, r4, #3
 800840c:	42a0      	cmp	r0, r4
 800840e:	d007      	beq.n	8008420 <sbrk_aligned+0x38>
 8008410:	1a21      	subs	r1, r4, r0
 8008412:	4628      	mov	r0, r5
 8008414:	f000 f87c 	bl	8008510 <_sbrk_r>
 8008418:	3001      	adds	r0, #1
 800841a:	d101      	bne.n	8008420 <sbrk_aligned+0x38>
 800841c:	f04f 34ff 	mov.w	r4, #4294967295
 8008420:	4620      	mov	r0, r4
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	200008d4 	.word	0x200008d4

08008428 <_malloc_r>:
 8008428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842c:	1ccd      	adds	r5, r1, #3
 800842e:	f025 0503 	bic.w	r5, r5, #3
 8008432:	3508      	adds	r5, #8
 8008434:	2d0c      	cmp	r5, #12
 8008436:	bf38      	it	cc
 8008438:	250c      	movcc	r5, #12
 800843a:	2d00      	cmp	r5, #0
 800843c:	4607      	mov	r7, r0
 800843e:	db01      	blt.n	8008444 <_malloc_r+0x1c>
 8008440:	42a9      	cmp	r1, r5
 8008442:	d905      	bls.n	8008450 <_malloc_r+0x28>
 8008444:	230c      	movs	r3, #12
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	2600      	movs	r6, #0
 800844a:	4630      	mov	r0, r6
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	4e2e      	ldr	r6, [pc, #184]	; (800850c <_malloc_r+0xe4>)
 8008452:	f000 f88d 	bl	8008570 <__malloc_lock>
 8008456:	6833      	ldr	r3, [r6, #0]
 8008458:	461c      	mov	r4, r3
 800845a:	bb34      	cbnz	r4, 80084aa <_malloc_r+0x82>
 800845c:	4629      	mov	r1, r5
 800845e:	4638      	mov	r0, r7
 8008460:	f7ff ffc2 	bl	80083e8 <sbrk_aligned>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	4604      	mov	r4, r0
 8008468:	d14d      	bne.n	8008506 <_malloc_r+0xde>
 800846a:	6834      	ldr	r4, [r6, #0]
 800846c:	4626      	mov	r6, r4
 800846e:	2e00      	cmp	r6, #0
 8008470:	d140      	bne.n	80084f4 <_malloc_r+0xcc>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	4631      	mov	r1, r6
 8008476:	4638      	mov	r0, r7
 8008478:	eb04 0803 	add.w	r8, r4, r3
 800847c:	f000 f848 	bl	8008510 <_sbrk_r>
 8008480:	4580      	cmp	r8, r0
 8008482:	d13a      	bne.n	80084fa <_malloc_r+0xd2>
 8008484:	6821      	ldr	r1, [r4, #0]
 8008486:	3503      	adds	r5, #3
 8008488:	1a6d      	subs	r5, r5, r1
 800848a:	f025 0503 	bic.w	r5, r5, #3
 800848e:	3508      	adds	r5, #8
 8008490:	2d0c      	cmp	r5, #12
 8008492:	bf38      	it	cc
 8008494:	250c      	movcc	r5, #12
 8008496:	4629      	mov	r1, r5
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ffa5 	bl	80083e8 <sbrk_aligned>
 800849e:	3001      	adds	r0, #1
 80084a0:	d02b      	beq.n	80084fa <_malloc_r+0xd2>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	442b      	add	r3, r5
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	e00e      	b.n	80084c8 <_malloc_r+0xa0>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	1b52      	subs	r2, r2, r5
 80084ae:	d41e      	bmi.n	80084ee <_malloc_r+0xc6>
 80084b0:	2a0b      	cmp	r2, #11
 80084b2:	d916      	bls.n	80084e2 <_malloc_r+0xba>
 80084b4:	1961      	adds	r1, r4, r5
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	6025      	str	r5, [r4, #0]
 80084ba:	bf18      	it	ne
 80084bc:	6059      	strne	r1, [r3, #4]
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	bf08      	it	eq
 80084c2:	6031      	streq	r1, [r6, #0]
 80084c4:	5162      	str	r2, [r4, r5]
 80084c6:	604b      	str	r3, [r1, #4]
 80084c8:	4638      	mov	r0, r7
 80084ca:	f104 060b 	add.w	r6, r4, #11
 80084ce:	f000 f855 	bl	800857c <__malloc_unlock>
 80084d2:	f026 0607 	bic.w	r6, r6, #7
 80084d6:	1d23      	adds	r3, r4, #4
 80084d8:	1af2      	subs	r2, r6, r3
 80084da:	d0b6      	beq.n	800844a <_malloc_r+0x22>
 80084dc:	1b9b      	subs	r3, r3, r6
 80084de:	50a3      	str	r3, [r4, r2]
 80084e0:	e7b3      	b.n	800844a <_malloc_r+0x22>
 80084e2:	6862      	ldr	r2, [r4, #4]
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	bf0c      	ite	eq
 80084e8:	6032      	streq	r2, [r6, #0]
 80084ea:	605a      	strne	r2, [r3, #4]
 80084ec:	e7ec      	b.n	80084c8 <_malloc_r+0xa0>
 80084ee:	4623      	mov	r3, r4
 80084f0:	6864      	ldr	r4, [r4, #4]
 80084f2:	e7b2      	b.n	800845a <_malloc_r+0x32>
 80084f4:	4634      	mov	r4, r6
 80084f6:	6876      	ldr	r6, [r6, #4]
 80084f8:	e7b9      	b.n	800846e <_malloc_r+0x46>
 80084fa:	230c      	movs	r3, #12
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	4638      	mov	r0, r7
 8008500:	f000 f83c 	bl	800857c <__malloc_unlock>
 8008504:	e7a1      	b.n	800844a <_malloc_r+0x22>
 8008506:	6025      	str	r5, [r4, #0]
 8008508:	e7de      	b.n	80084c8 <_malloc_r+0xa0>
 800850a:	bf00      	nop
 800850c:	200008d0 	.word	0x200008d0

08008510 <_sbrk_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d06      	ldr	r5, [pc, #24]	; (800852c <_sbrk_r+0x1c>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	f7f8 fcb0 	bl	8000e80 <_sbrk>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_sbrk_r+0x1a>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_sbrk_r+0x1a>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	200008d8 	.word	0x200008d8

08008530 <siprintf>:
 8008530:	b40e      	push	{r1, r2, r3}
 8008532:	b500      	push	{lr}
 8008534:	b09c      	sub	sp, #112	; 0x70
 8008536:	ab1d      	add	r3, sp, #116	; 0x74
 8008538:	9002      	str	r0, [sp, #8]
 800853a:	9006      	str	r0, [sp, #24]
 800853c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008540:	4809      	ldr	r0, [pc, #36]	; (8008568 <siprintf+0x38>)
 8008542:	9107      	str	r1, [sp, #28]
 8008544:	9104      	str	r1, [sp, #16]
 8008546:	4909      	ldr	r1, [pc, #36]	; (800856c <siprintf+0x3c>)
 8008548:	f853 2b04 	ldr.w	r2, [r3], #4
 800854c:	9105      	str	r1, [sp, #20]
 800854e:	6800      	ldr	r0, [r0, #0]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	a902      	add	r1, sp, #8
 8008554:	f000 f874 	bl	8008640 <_svfiprintf_r>
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	b01c      	add	sp, #112	; 0x70
 8008560:	f85d eb04 	ldr.w	lr, [sp], #4
 8008564:	b003      	add	sp, #12
 8008566:	4770      	bx	lr
 8008568:	2000002c 	.word	0x2000002c
 800856c:	ffff0208 	.word	0xffff0208

08008570 <__malloc_lock>:
 8008570:	4801      	ldr	r0, [pc, #4]	; (8008578 <__malloc_lock+0x8>)
 8008572:	f000 baf9 	b.w	8008b68 <__retarget_lock_acquire_recursive>
 8008576:	bf00      	nop
 8008578:	200008dc 	.word	0x200008dc

0800857c <__malloc_unlock>:
 800857c:	4801      	ldr	r0, [pc, #4]	; (8008584 <__malloc_unlock+0x8>)
 800857e:	f000 baf4 	b.w	8008b6a <__retarget_lock_release_recursive>
 8008582:	bf00      	nop
 8008584:	200008dc 	.word	0x200008dc

08008588 <__ssputs_r>:
 8008588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	688e      	ldr	r6, [r1, #8]
 800858e:	429e      	cmp	r6, r3
 8008590:	4682      	mov	sl, r0
 8008592:	460c      	mov	r4, r1
 8008594:	4690      	mov	r8, r2
 8008596:	461f      	mov	r7, r3
 8008598:	d838      	bhi.n	800860c <__ssputs_r+0x84>
 800859a:	898a      	ldrh	r2, [r1, #12]
 800859c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085a0:	d032      	beq.n	8008608 <__ssputs_r+0x80>
 80085a2:	6825      	ldr	r5, [r4, #0]
 80085a4:	6909      	ldr	r1, [r1, #16]
 80085a6:	eba5 0901 	sub.w	r9, r5, r1
 80085aa:	6965      	ldr	r5, [r4, #20]
 80085ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085b4:	3301      	adds	r3, #1
 80085b6:	444b      	add	r3, r9
 80085b8:	106d      	asrs	r5, r5, #1
 80085ba:	429d      	cmp	r5, r3
 80085bc:	bf38      	it	cc
 80085be:	461d      	movcc	r5, r3
 80085c0:	0553      	lsls	r3, r2, #21
 80085c2:	d531      	bpl.n	8008628 <__ssputs_r+0xa0>
 80085c4:	4629      	mov	r1, r5
 80085c6:	f7ff ff2f 	bl	8008428 <_malloc_r>
 80085ca:	4606      	mov	r6, r0
 80085cc:	b950      	cbnz	r0, 80085e4 <__ssputs_r+0x5c>
 80085ce:	230c      	movs	r3, #12
 80085d0:	f8ca 3000 	str.w	r3, [sl]
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295
 80085e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e4:	6921      	ldr	r1, [r4, #16]
 80085e6:	464a      	mov	r2, r9
 80085e8:	f000 fac0 	bl	8008b6c <memcpy>
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	6126      	str	r6, [r4, #16]
 80085fa:	6165      	str	r5, [r4, #20]
 80085fc:	444e      	add	r6, r9
 80085fe:	eba5 0509 	sub.w	r5, r5, r9
 8008602:	6026      	str	r6, [r4, #0]
 8008604:	60a5      	str	r5, [r4, #8]
 8008606:	463e      	mov	r6, r7
 8008608:	42be      	cmp	r6, r7
 800860a:	d900      	bls.n	800860e <__ssputs_r+0x86>
 800860c:	463e      	mov	r6, r7
 800860e:	6820      	ldr	r0, [r4, #0]
 8008610:	4632      	mov	r2, r6
 8008612:	4641      	mov	r1, r8
 8008614:	f000 fab8 	bl	8008b88 <memmove>
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	1b9b      	subs	r3, r3, r6
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	4433      	add	r3, r6
 8008622:	6023      	str	r3, [r4, #0]
 8008624:	2000      	movs	r0, #0
 8008626:	e7db      	b.n	80085e0 <__ssputs_r+0x58>
 8008628:	462a      	mov	r2, r5
 800862a:	f000 fac7 	bl	8008bbc <_realloc_r>
 800862e:	4606      	mov	r6, r0
 8008630:	2800      	cmp	r0, #0
 8008632:	d1e1      	bne.n	80085f8 <__ssputs_r+0x70>
 8008634:	6921      	ldr	r1, [r4, #16]
 8008636:	4650      	mov	r0, sl
 8008638:	f7ff fe8a 	bl	8008350 <_free_r>
 800863c:	e7c7      	b.n	80085ce <__ssputs_r+0x46>
	...

08008640 <_svfiprintf_r>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	4698      	mov	r8, r3
 8008646:	898b      	ldrh	r3, [r1, #12]
 8008648:	061b      	lsls	r3, r3, #24
 800864a:	b09d      	sub	sp, #116	; 0x74
 800864c:	4607      	mov	r7, r0
 800864e:	460d      	mov	r5, r1
 8008650:	4614      	mov	r4, r2
 8008652:	d50e      	bpl.n	8008672 <_svfiprintf_r+0x32>
 8008654:	690b      	ldr	r3, [r1, #16]
 8008656:	b963      	cbnz	r3, 8008672 <_svfiprintf_r+0x32>
 8008658:	2140      	movs	r1, #64	; 0x40
 800865a:	f7ff fee5 	bl	8008428 <_malloc_r>
 800865e:	6028      	str	r0, [r5, #0]
 8008660:	6128      	str	r0, [r5, #16]
 8008662:	b920      	cbnz	r0, 800866e <_svfiprintf_r+0x2e>
 8008664:	230c      	movs	r3, #12
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	e0d1      	b.n	8008812 <_svfiprintf_r+0x1d2>
 800866e:	2340      	movs	r3, #64	; 0x40
 8008670:	616b      	str	r3, [r5, #20]
 8008672:	2300      	movs	r3, #0
 8008674:	9309      	str	r3, [sp, #36]	; 0x24
 8008676:	2320      	movs	r3, #32
 8008678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800867c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008680:	2330      	movs	r3, #48	; 0x30
 8008682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800882c <_svfiprintf_r+0x1ec>
 8008686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800868a:	f04f 0901 	mov.w	r9, #1
 800868e:	4623      	mov	r3, r4
 8008690:	469a      	mov	sl, r3
 8008692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008696:	b10a      	cbz	r2, 800869c <_svfiprintf_r+0x5c>
 8008698:	2a25      	cmp	r2, #37	; 0x25
 800869a:	d1f9      	bne.n	8008690 <_svfiprintf_r+0x50>
 800869c:	ebba 0b04 	subs.w	fp, sl, r4
 80086a0:	d00b      	beq.n	80086ba <_svfiprintf_r+0x7a>
 80086a2:	465b      	mov	r3, fp
 80086a4:	4622      	mov	r2, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	4638      	mov	r0, r7
 80086aa:	f7ff ff6d 	bl	8008588 <__ssputs_r>
 80086ae:	3001      	adds	r0, #1
 80086b0:	f000 80aa 	beq.w	8008808 <_svfiprintf_r+0x1c8>
 80086b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b6:	445a      	add	r2, fp
 80086b8:	9209      	str	r2, [sp, #36]	; 0x24
 80086ba:	f89a 3000 	ldrb.w	r3, [sl]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80a2 	beq.w	8008808 <_svfiprintf_r+0x1c8>
 80086c4:	2300      	movs	r3, #0
 80086c6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ce:	f10a 0a01 	add.w	sl, sl, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	9307      	str	r3, [sp, #28]
 80086d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086da:	931a      	str	r3, [sp, #104]	; 0x68
 80086dc:	4654      	mov	r4, sl
 80086de:	2205      	movs	r2, #5
 80086e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e4:	4851      	ldr	r0, [pc, #324]	; (800882c <_svfiprintf_r+0x1ec>)
 80086e6:	f7f7 fd73 	bl	80001d0 <memchr>
 80086ea:	9a04      	ldr	r2, [sp, #16]
 80086ec:	b9d8      	cbnz	r0, 8008726 <_svfiprintf_r+0xe6>
 80086ee:	06d0      	lsls	r0, r2, #27
 80086f0:	bf44      	itt	mi
 80086f2:	2320      	movmi	r3, #32
 80086f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086f8:	0711      	lsls	r1, r2, #28
 80086fa:	bf44      	itt	mi
 80086fc:	232b      	movmi	r3, #43	; 0x2b
 80086fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008702:	f89a 3000 	ldrb.w	r3, [sl]
 8008706:	2b2a      	cmp	r3, #42	; 0x2a
 8008708:	d015      	beq.n	8008736 <_svfiprintf_r+0xf6>
 800870a:	9a07      	ldr	r2, [sp, #28]
 800870c:	4654      	mov	r4, sl
 800870e:	2000      	movs	r0, #0
 8008710:	f04f 0c0a 	mov.w	ip, #10
 8008714:	4621      	mov	r1, r4
 8008716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800871a:	3b30      	subs	r3, #48	; 0x30
 800871c:	2b09      	cmp	r3, #9
 800871e:	d94e      	bls.n	80087be <_svfiprintf_r+0x17e>
 8008720:	b1b0      	cbz	r0, 8008750 <_svfiprintf_r+0x110>
 8008722:	9207      	str	r2, [sp, #28]
 8008724:	e014      	b.n	8008750 <_svfiprintf_r+0x110>
 8008726:	eba0 0308 	sub.w	r3, r0, r8
 800872a:	fa09 f303 	lsl.w	r3, r9, r3
 800872e:	4313      	orrs	r3, r2
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	46a2      	mov	sl, r4
 8008734:	e7d2      	b.n	80086dc <_svfiprintf_r+0x9c>
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	1d19      	adds	r1, r3, #4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	9103      	str	r1, [sp, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfbb      	ittet	lt
 8008742:	425b      	neglt	r3, r3
 8008744:	f042 0202 	orrlt.w	r2, r2, #2
 8008748:	9307      	strge	r3, [sp, #28]
 800874a:	9307      	strlt	r3, [sp, #28]
 800874c:	bfb8      	it	lt
 800874e:	9204      	strlt	r2, [sp, #16]
 8008750:	7823      	ldrb	r3, [r4, #0]
 8008752:	2b2e      	cmp	r3, #46	; 0x2e
 8008754:	d10c      	bne.n	8008770 <_svfiprintf_r+0x130>
 8008756:	7863      	ldrb	r3, [r4, #1]
 8008758:	2b2a      	cmp	r3, #42	; 0x2a
 800875a:	d135      	bne.n	80087c8 <_svfiprintf_r+0x188>
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	1d1a      	adds	r2, r3, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	9203      	str	r2, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	bfb8      	it	lt
 8008768:	f04f 33ff 	movlt.w	r3, #4294967295
 800876c:	3402      	adds	r4, #2
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800883c <_svfiprintf_r+0x1fc>
 8008774:	7821      	ldrb	r1, [r4, #0]
 8008776:	2203      	movs	r2, #3
 8008778:	4650      	mov	r0, sl
 800877a:	f7f7 fd29 	bl	80001d0 <memchr>
 800877e:	b140      	cbz	r0, 8008792 <_svfiprintf_r+0x152>
 8008780:	2340      	movs	r3, #64	; 0x40
 8008782:	eba0 000a 	sub.w	r0, r0, sl
 8008786:	fa03 f000 	lsl.w	r0, r3, r0
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	4303      	orrs	r3, r0
 800878e:	3401      	adds	r4, #1
 8008790:	9304      	str	r3, [sp, #16]
 8008792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008796:	4826      	ldr	r0, [pc, #152]	; (8008830 <_svfiprintf_r+0x1f0>)
 8008798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800879c:	2206      	movs	r2, #6
 800879e:	f7f7 fd17 	bl	80001d0 <memchr>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d038      	beq.n	8008818 <_svfiprintf_r+0x1d8>
 80087a6:	4b23      	ldr	r3, [pc, #140]	; (8008834 <_svfiprintf_r+0x1f4>)
 80087a8:	bb1b      	cbnz	r3, 80087f2 <_svfiprintf_r+0x1b2>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	3307      	adds	r3, #7
 80087ae:	f023 0307 	bic.w	r3, r3, #7
 80087b2:	3308      	adds	r3, #8
 80087b4:	9303      	str	r3, [sp, #12]
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	4433      	add	r3, r6
 80087ba:	9309      	str	r3, [sp, #36]	; 0x24
 80087bc:	e767      	b.n	800868e <_svfiprintf_r+0x4e>
 80087be:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c2:	460c      	mov	r4, r1
 80087c4:	2001      	movs	r0, #1
 80087c6:	e7a5      	b.n	8008714 <_svfiprintf_r+0xd4>
 80087c8:	2300      	movs	r3, #0
 80087ca:	3401      	adds	r4, #1
 80087cc:	9305      	str	r3, [sp, #20]
 80087ce:	4619      	mov	r1, r3
 80087d0:	f04f 0c0a 	mov.w	ip, #10
 80087d4:	4620      	mov	r0, r4
 80087d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087da:	3a30      	subs	r2, #48	; 0x30
 80087dc:	2a09      	cmp	r2, #9
 80087de:	d903      	bls.n	80087e8 <_svfiprintf_r+0x1a8>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d0c5      	beq.n	8008770 <_svfiprintf_r+0x130>
 80087e4:	9105      	str	r1, [sp, #20]
 80087e6:	e7c3      	b.n	8008770 <_svfiprintf_r+0x130>
 80087e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ec:	4604      	mov	r4, r0
 80087ee:	2301      	movs	r3, #1
 80087f0:	e7f0      	b.n	80087d4 <_svfiprintf_r+0x194>
 80087f2:	ab03      	add	r3, sp, #12
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	462a      	mov	r2, r5
 80087f8:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <_svfiprintf_r+0x1f8>)
 80087fa:	a904      	add	r1, sp, #16
 80087fc:	4638      	mov	r0, r7
 80087fe:	f3af 8000 	nop.w
 8008802:	1c42      	adds	r2, r0, #1
 8008804:	4606      	mov	r6, r0
 8008806:	d1d6      	bne.n	80087b6 <_svfiprintf_r+0x176>
 8008808:	89ab      	ldrh	r3, [r5, #12]
 800880a:	065b      	lsls	r3, r3, #25
 800880c:	f53f af2c 	bmi.w	8008668 <_svfiprintf_r+0x28>
 8008810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008812:	b01d      	add	sp, #116	; 0x74
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	ab03      	add	r3, sp, #12
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	462a      	mov	r2, r5
 800881e:	4b06      	ldr	r3, [pc, #24]	; (8008838 <_svfiprintf_r+0x1f8>)
 8008820:	a904      	add	r1, sp, #16
 8008822:	4638      	mov	r0, r7
 8008824:	f000 f87a 	bl	800891c <_printf_i>
 8008828:	e7eb      	b.n	8008802 <_svfiprintf_r+0x1c2>
 800882a:	bf00      	nop
 800882c:	08008c6c 	.word	0x08008c6c
 8008830:	08008c76 	.word	0x08008c76
 8008834:	00000000 	.word	0x00000000
 8008838:	08008589 	.word	0x08008589
 800883c:	08008c72 	.word	0x08008c72

08008840 <_printf_common>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	4616      	mov	r6, r2
 8008846:	4699      	mov	r9, r3
 8008848:	688a      	ldr	r2, [r1, #8]
 800884a:	690b      	ldr	r3, [r1, #16]
 800884c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008850:	4293      	cmp	r3, r2
 8008852:	bfb8      	it	lt
 8008854:	4613      	movlt	r3, r2
 8008856:	6033      	str	r3, [r6, #0]
 8008858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800885c:	4607      	mov	r7, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b10a      	cbz	r2, 8008866 <_printf_common+0x26>
 8008862:	3301      	adds	r3, #1
 8008864:	6033      	str	r3, [r6, #0]
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	0699      	lsls	r1, r3, #26
 800886a:	bf42      	ittt	mi
 800886c:	6833      	ldrmi	r3, [r6, #0]
 800886e:	3302      	addmi	r3, #2
 8008870:	6033      	strmi	r3, [r6, #0]
 8008872:	6825      	ldr	r5, [r4, #0]
 8008874:	f015 0506 	ands.w	r5, r5, #6
 8008878:	d106      	bne.n	8008888 <_printf_common+0x48>
 800887a:	f104 0a19 	add.w	sl, r4, #25
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	6832      	ldr	r2, [r6, #0]
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	42ab      	cmp	r3, r5
 8008886:	dc26      	bgt.n	80088d6 <_printf_common+0x96>
 8008888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800888c:	1e13      	subs	r3, r2, #0
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	bf18      	it	ne
 8008892:	2301      	movne	r3, #1
 8008894:	0692      	lsls	r2, r2, #26
 8008896:	d42b      	bmi.n	80088f0 <_printf_common+0xb0>
 8008898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800889c:	4649      	mov	r1, r9
 800889e:	4638      	mov	r0, r7
 80088a0:	47c0      	blx	r8
 80088a2:	3001      	adds	r0, #1
 80088a4:	d01e      	beq.n	80088e4 <_printf_common+0xa4>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	68e5      	ldr	r5, [r4, #12]
 80088aa:	6832      	ldr	r2, [r6, #0]
 80088ac:	f003 0306 	and.w	r3, r3, #6
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	bf08      	it	eq
 80088b4:	1aad      	subeq	r5, r5, r2
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	6922      	ldr	r2, [r4, #16]
 80088ba:	bf0c      	ite	eq
 80088bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088c0:	2500      	movne	r5, #0
 80088c2:	4293      	cmp	r3, r2
 80088c4:	bfc4      	itt	gt
 80088c6:	1a9b      	subgt	r3, r3, r2
 80088c8:	18ed      	addgt	r5, r5, r3
 80088ca:	2600      	movs	r6, #0
 80088cc:	341a      	adds	r4, #26
 80088ce:	42b5      	cmp	r5, r6
 80088d0:	d11a      	bne.n	8008908 <_printf_common+0xc8>
 80088d2:	2000      	movs	r0, #0
 80088d4:	e008      	b.n	80088e8 <_printf_common+0xa8>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4652      	mov	r2, sl
 80088da:	4649      	mov	r1, r9
 80088dc:	4638      	mov	r0, r7
 80088de:	47c0      	blx	r8
 80088e0:	3001      	adds	r0, #1
 80088e2:	d103      	bne.n	80088ec <_printf_common+0xac>
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ec:	3501      	adds	r5, #1
 80088ee:	e7c6      	b.n	800887e <_printf_common+0x3e>
 80088f0:	18e1      	adds	r1, r4, r3
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	2030      	movs	r0, #48	; 0x30
 80088f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088fa:	4422      	add	r2, r4
 80088fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008904:	3302      	adds	r3, #2
 8008906:	e7c7      	b.n	8008898 <_printf_common+0x58>
 8008908:	2301      	movs	r3, #1
 800890a:	4622      	mov	r2, r4
 800890c:	4649      	mov	r1, r9
 800890e:	4638      	mov	r0, r7
 8008910:	47c0      	blx	r8
 8008912:	3001      	adds	r0, #1
 8008914:	d0e6      	beq.n	80088e4 <_printf_common+0xa4>
 8008916:	3601      	adds	r6, #1
 8008918:	e7d9      	b.n	80088ce <_printf_common+0x8e>
	...

0800891c <_printf_i>:
 800891c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	7e0f      	ldrb	r7, [r1, #24]
 8008922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008924:	2f78      	cmp	r7, #120	; 0x78
 8008926:	4691      	mov	r9, r2
 8008928:	4680      	mov	r8, r0
 800892a:	460c      	mov	r4, r1
 800892c:	469a      	mov	sl, r3
 800892e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008932:	d807      	bhi.n	8008944 <_printf_i+0x28>
 8008934:	2f62      	cmp	r7, #98	; 0x62
 8008936:	d80a      	bhi.n	800894e <_printf_i+0x32>
 8008938:	2f00      	cmp	r7, #0
 800893a:	f000 80d8 	beq.w	8008aee <_printf_i+0x1d2>
 800893e:	2f58      	cmp	r7, #88	; 0x58
 8008940:	f000 80a3 	beq.w	8008a8a <_printf_i+0x16e>
 8008944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800894c:	e03a      	b.n	80089c4 <_printf_i+0xa8>
 800894e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008952:	2b15      	cmp	r3, #21
 8008954:	d8f6      	bhi.n	8008944 <_printf_i+0x28>
 8008956:	a101      	add	r1, pc, #4	; (adr r1, 800895c <_printf_i+0x40>)
 8008958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800895c:	080089b5 	.word	0x080089b5
 8008960:	080089c9 	.word	0x080089c9
 8008964:	08008945 	.word	0x08008945
 8008968:	08008945 	.word	0x08008945
 800896c:	08008945 	.word	0x08008945
 8008970:	08008945 	.word	0x08008945
 8008974:	080089c9 	.word	0x080089c9
 8008978:	08008945 	.word	0x08008945
 800897c:	08008945 	.word	0x08008945
 8008980:	08008945 	.word	0x08008945
 8008984:	08008945 	.word	0x08008945
 8008988:	08008ad5 	.word	0x08008ad5
 800898c:	080089f9 	.word	0x080089f9
 8008990:	08008ab7 	.word	0x08008ab7
 8008994:	08008945 	.word	0x08008945
 8008998:	08008945 	.word	0x08008945
 800899c:	08008af7 	.word	0x08008af7
 80089a0:	08008945 	.word	0x08008945
 80089a4:	080089f9 	.word	0x080089f9
 80089a8:	08008945 	.word	0x08008945
 80089ac:	08008945 	.word	0x08008945
 80089b0:	08008abf 	.word	0x08008abf
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	1d1a      	adds	r2, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	602a      	str	r2, [r5, #0]
 80089bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089c4:	2301      	movs	r3, #1
 80089c6:	e0a3      	b.n	8008b10 <_printf_i+0x1f4>
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	6829      	ldr	r1, [r5, #0]
 80089cc:	0606      	lsls	r6, r0, #24
 80089ce:	f101 0304 	add.w	r3, r1, #4
 80089d2:	d50a      	bpl.n	80089ea <_printf_i+0xce>
 80089d4:	680e      	ldr	r6, [r1, #0]
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	2e00      	cmp	r6, #0
 80089da:	da03      	bge.n	80089e4 <_printf_i+0xc8>
 80089dc:	232d      	movs	r3, #45	; 0x2d
 80089de:	4276      	negs	r6, r6
 80089e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e4:	485e      	ldr	r0, [pc, #376]	; (8008b60 <_printf_i+0x244>)
 80089e6:	230a      	movs	r3, #10
 80089e8:	e019      	b.n	8008a1e <_printf_i+0x102>
 80089ea:	680e      	ldr	r6, [r1, #0]
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089f2:	bf18      	it	ne
 80089f4:	b236      	sxthne	r6, r6
 80089f6:	e7ef      	b.n	80089d8 <_printf_i+0xbc>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	6820      	ldr	r0, [r4, #0]
 80089fc:	1d19      	adds	r1, r3, #4
 80089fe:	6029      	str	r1, [r5, #0]
 8008a00:	0601      	lsls	r1, r0, #24
 8008a02:	d501      	bpl.n	8008a08 <_printf_i+0xec>
 8008a04:	681e      	ldr	r6, [r3, #0]
 8008a06:	e002      	b.n	8008a0e <_printf_i+0xf2>
 8008a08:	0646      	lsls	r6, r0, #25
 8008a0a:	d5fb      	bpl.n	8008a04 <_printf_i+0xe8>
 8008a0c:	881e      	ldrh	r6, [r3, #0]
 8008a0e:	4854      	ldr	r0, [pc, #336]	; (8008b60 <_printf_i+0x244>)
 8008a10:	2f6f      	cmp	r7, #111	; 0x6f
 8008a12:	bf0c      	ite	eq
 8008a14:	2308      	moveq	r3, #8
 8008a16:	230a      	movne	r3, #10
 8008a18:	2100      	movs	r1, #0
 8008a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a1e:	6865      	ldr	r5, [r4, #4]
 8008a20:	60a5      	str	r5, [r4, #8]
 8008a22:	2d00      	cmp	r5, #0
 8008a24:	bfa2      	ittt	ge
 8008a26:	6821      	ldrge	r1, [r4, #0]
 8008a28:	f021 0104 	bicge.w	r1, r1, #4
 8008a2c:	6021      	strge	r1, [r4, #0]
 8008a2e:	b90e      	cbnz	r6, 8008a34 <_printf_i+0x118>
 8008a30:	2d00      	cmp	r5, #0
 8008a32:	d04d      	beq.n	8008ad0 <_printf_i+0x1b4>
 8008a34:	4615      	mov	r5, r2
 8008a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a3e:	5dc7      	ldrb	r7, [r0, r7]
 8008a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a44:	4637      	mov	r7, r6
 8008a46:	42bb      	cmp	r3, r7
 8008a48:	460e      	mov	r6, r1
 8008a4a:	d9f4      	bls.n	8008a36 <_printf_i+0x11a>
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d10b      	bne.n	8008a68 <_printf_i+0x14c>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	07de      	lsls	r6, r3, #31
 8008a54:	d508      	bpl.n	8008a68 <_printf_i+0x14c>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	6861      	ldr	r1, [r4, #4]
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	bfde      	ittt	le
 8008a5e:	2330      	movle	r3, #48	; 0x30
 8008a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a68:	1b52      	subs	r2, r2, r5
 8008a6a:	6122      	str	r2, [r4, #16]
 8008a6c:	f8cd a000 	str.w	sl, [sp]
 8008a70:	464b      	mov	r3, r9
 8008a72:	aa03      	add	r2, sp, #12
 8008a74:	4621      	mov	r1, r4
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7ff fee2 	bl	8008840 <_printf_common>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d14c      	bne.n	8008b1a <_printf_i+0x1fe>
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	b004      	add	sp, #16
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	4835      	ldr	r0, [pc, #212]	; (8008b60 <_printf_i+0x244>)
 8008a8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a90:	6829      	ldr	r1, [r5, #0]
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a98:	6029      	str	r1, [r5, #0]
 8008a9a:	061d      	lsls	r5, r3, #24
 8008a9c:	d514      	bpl.n	8008ac8 <_printf_i+0x1ac>
 8008a9e:	07df      	lsls	r7, r3, #31
 8008aa0:	bf44      	itt	mi
 8008aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8008aa6:	6023      	strmi	r3, [r4, #0]
 8008aa8:	b91e      	cbnz	r6, 8008ab2 <_printf_i+0x196>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	f023 0320 	bic.w	r3, r3, #32
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	2310      	movs	r3, #16
 8008ab4:	e7b0      	b.n	8008a18 <_printf_i+0xfc>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	f043 0320 	orr.w	r3, r3, #32
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	2378      	movs	r3, #120	; 0x78
 8008ac0:	4828      	ldr	r0, [pc, #160]	; (8008b64 <_printf_i+0x248>)
 8008ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ac6:	e7e3      	b.n	8008a90 <_printf_i+0x174>
 8008ac8:	0659      	lsls	r1, r3, #25
 8008aca:	bf48      	it	mi
 8008acc:	b2b6      	uxthmi	r6, r6
 8008ace:	e7e6      	b.n	8008a9e <_printf_i+0x182>
 8008ad0:	4615      	mov	r5, r2
 8008ad2:	e7bb      	b.n	8008a4c <_printf_i+0x130>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	6826      	ldr	r6, [r4, #0]
 8008ad8:	6961      	ldr	r1, [r4, #20]
 8008ada:	1d18      	adds	r0, r3, #4
 8008adc:	6028      	str	r0, [r5, #0]
 8008ade:	0635      	lsls	r5, r6, #24
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	d501      	bpl.n	8008ae8 <_printf_i+0x1cc>
 8008ae4:	6019      	str	r1, [r3, #0]
 8008ae6:	e002      	b.n	8008aee <_printf_i+0x1d2>
 8008ae8:	0670      	lsls	r0, r6, #25
 8008aea:	d5fb      	bpl.n	8008ae4 <_printf_i+0x1c8>
 8008aec:	8019      	strh	r1, [r3, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	4615      	mov	r5, r2
 8008af4:	e7ba      	b.n	8008a6c <_printf_i+0x150>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	602a      	str	r2, [r5, #0]
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	6862      	ldr	r2, [r4, #4]
 8008b00:	2100      	movs	r1, #0
 8008b02:	4628      	mov	r0, r5
 8008b04:	f7f7 fb64 	bl	80001d0 <memchr>
 8008b08:	b108      	cbz	r0, 8008b0e <_printf_i+0x1f2>
 8008b0a:	1b40      	subs	r0, r0, r5
 8008b0c:	6060      	str	r0, [r4, #4]
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	2300      	movs	r3, #0
 8008b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b18:	e7a8      	b.n	8008a6c <_printf_i+0x150>
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4640      	mov	r0, r8
 8008b22:	47d0      	blx	sl
 8008b24:	3001      	adds	r0, #1
 8008b26:	d0ab      	beq.n	8008a80 <_printf_i+0x164>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	079b      	lsls	r3, r3, #30
 8008b2c:	d413      	bmi.n	8008b56 <_printf_i+0x23a>
 8008b2e:	68e0      	ldr	r0, [r4, #12]
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	4298      	cmp	r0, r3
 8008b34:	bfb8      	it	lt
 8008b36:	4618      	movlt	r0, r3
 8008b38:	e7a4      	b.n	8008a84 <_printf_i+0x168>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	4649      	mov	r1, r9
 8008b40:	4640      	mov	r0, r8
 8008b42:	47d0      	blx	sl
 8008b44:	3001      	adds	r0, #1
 8008b46:	d09b      	beq.n	8008a80 <_printf_i+0x164>
 8008b48:	3501      	adds	r5, #1
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	9903      	ldr	r1, [sp, #12]
 8008b4e:	1a5b      	subs	r3, r3, r1
 8008b50:	42ab      	cmp	r3, r5
 8008b52:	dcf2      	bgt.n	8008b3a <_printf_i+0x21e>
 8008b54:	e7eb      	b.n	8008b2e <_printf_i+0x212>
 8008b56:	2500      	movs	r5, #0
 8008b58:	f104 0619 	add.w	r6, r4, #25
 8008b5c:	e7f5      	b.n	8008b4a <_printf_i+0x22e>
 8008b5e:	bf00      	nop
 8008b60:	08008c7d 	.word	0x08008c7d
 8008b64:	08008c8e 	.word	0x08008c8e

08008b68 <__retarget_lock_acquire_recursive>:
 8008b68:	4770      	bx	lr

08008b6a <__retarget_lock_release_recursive>:
 8008b6a:	4770      	bx	lr

08008b6c <memcpy>:
 8008b6c:	440a      	add	r2, r1
 8008b6e:	4291      	cmp	r1, r2
 8008b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b74:	d100      	bne.n	8008b78 <memcpy+0xc>
 8008b76:	4770      	bx	lr
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b82:	4291      	cmp	r1, r2
 8008b84:	d1f9      	bne.n	8008b7a <memcpy+0xe>
 8008b86:	bd10      	pop	{r4, pc}

08008b88 <memmove>:
 8008b88:	4288      	cmp	r0, r1
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	eb01 0402 	add.w	r4, r1, r2
 8008b90:	d902      	bls.n	8008b98 <memmove+0x10>
 8008b92:	4284      	cmp	r4, r0
 8008b94:	4623      	mov	r3, r4
 8008b96:	d807      	bhi.n	8008ba8 <memmove+0x20>
 8008b98:	1e43      	subs	r3, r0, #1
 8008b9a:	42a1      	cmp	r1, r4
 8008b9c:	d008      	beq.n	8008bb0 <memmove+0x28>
 8008b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ba6:	e7f8      	b.n	8008b9a <memmove+0x12>
 8008ba8:	4402      	add	r2, r0
 8008baa:	4601      	mov	r1, r0
 8008bac:	428a      	cmp	r2, r1
 8008bae:	d100      	bne.n	8008bb2 <memmove+0x2a>
 8008bb0:	bd10      	pop	{r4, pc}
 8008bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bba:	e7f7      	b.n	8008bac <memmove+0x24>

08008bbc <_realloc_r>:
 8008bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	460e      	mov	r6, r1
 8008bc6:	b921      	cbnz	r1, 8008bd2 <_realloc_r+0x16>
 8008bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bcc:	4611      	mov	r1, r2
 8008bce:	f7ff bc2b 	b.w	8008428 <_malloc_r>
 8008bd2:	b92a      	cbnz	r2, 8008be0 <_realloc_r+0x24>
 8008bd4:	f7ff fbbc 	bl	8008350 <_free_r>
 8008bd8:	4625      	mov	r5, r4
 8008bda:	4628      	mov	r0, r5
 8008bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be0:	f000 f81b 	bl	8008c1a <_malloc_usable_size_r>
 8008be4:	4284      	cmp	r4, r0
 8008be6:	4607      	mov	r7, r0
 8008be8:	d802      	bhi.n	8008bf0 <_realloc_r+0x34>
 8008bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bee:	d812      	bhi.n	8008c16 <_realloc_r+0x5a>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f7ff fc18 	bl	8008428 <_malloc_r>
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d0ed      	beq.n	8008bda <_realloc_r+0x1e>
 8008bfe:	42bc      	cmp	r4, r7
 8008c00:	4622      	mov	r2, r4
 8008c02:	4631      	mov	r1, r6
 8008c04:	bf28      	it	cs
 8008c06:	463a      	movcs	r2, r7
 8008c08:	f7ff ffb0 	bl	8008b6c <memcpy>
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4640      	mov	r0, r8
 8008c10:	f7ff fb9e 	bl	8008350 <_free_r>
 8008c14:	e7e1      	b.n	8008bda <_realloc_r+0x1e>
 8008c16:	4635      	mov	r5, r6
 8008c18:	e7df      	b.n	8008bda <_realloc_r+0x1e>

08008c1a <_malloc_usable_size_r>:
 8008c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c1e:	1f18      	subs	r0, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bfbc      	itt	lt
 8008c24:	580b      	ldrlt	r3, [r1, r0]
 8008c26:	18c0      	addlt	r0, r0, r3
 8008c28:	4770      	bx	lr
	...

08008c2c <_init>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	bf00      	nop
 8008c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c32:	bc08      	pop	{r3}
 8008c34:	469e      	mov	lr, r3
 8008c36:	4770      	bx	lr

08008c38 <_fini>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	bf00      	nop
 8008c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3e:	bc08      	pop	{r3}
 8008c40:	469e      	mov	lr, r3
 8008c42:	4770      	bx	lr
