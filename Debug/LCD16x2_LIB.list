
LCD16x2_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de4  08008de4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dec  08008dec  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dec  08008dec  00018dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000850  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e0  200008e0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b68a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044f7  00000000  00000000  0003b74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001540  00000000  00000000  00041378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fad  00000000  00000000  000428b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f592  00000000  00000000  00068865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d68  00000000  00000000  00087df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015bb5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064ac  00000000  00000000  0015bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d58 	.word	0x08008d58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008d58 	.word	0x08008d58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LCD_delay>:
#include "gpio.h"
#include "tim.h"
extern TIM_HandleTypeDef timer;


void LCD_delay(uint32_t us){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim1);
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <LCD_delay+0x30>)
 800057e:	f004 f979 	bl	8004874 <HAL_TIM_Base_Start>
	htim1.Instance->CNT=0;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LCD_delay+0x30>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2200      	movs	r2, #0
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim1.Instance->CNT < us);
 800058a:	bf00      	nop
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LCD_delay+0x30>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	429a      	cmp	r2, r3
 8000596:	d8f9      	bhi.n	800058c <LCD_delay+0x18>

}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200001a4 	.word	0x200001a4

080005a8 <LCD_init>:


void LCD_init(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

	LCD_send_cmd(0x02);		// To initialize LCD in 4-bit mode.
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 f837 	bl	8000620 <LCD_send_cmd>
	HAL_Delay(3);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 fde8 	bl	8001188 <HAL_Delay>
	LCD_send_cmd(0x28);		// To initialize LCD in 2 lines, 5x7 dots and 4bit mode.
 80005b8:	2028      	movs	r0, #40	; 0x28
 80005ba:	f000 f831 	bl	8000620 <LCD_send_cmd>
	HAL_Delay(2);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 fde2 	bl	8001188 <HAL_Delay>
	LCD_send_cmd(0x0C);
 80005c4:	200c      	movs	r0, #12
 80005c6:	f000 f82b 	bl	8000620 <LCD_send_cmd>
	HAL_Delay(2);
 80005ca:	2002      	movs	r0, #2
 80005cc:	f000 fddc 	bl	8001188 <HAL_Delay>
	LCD_send_cmd(0x06);
 80005d0:	2006      	movs	r0, #6
 80005d2:	f000 f825 	bl	8000620 <LCD_send_cmd>
	HAL_Delay(2);
 80005d6:	2002      	movs	r0, #2
 80005d8:	f000 fdd6 	bl	8001188 <HAL_Delay>
	LCD_send_cmd(0x80);
 80005dc:	2080      	movs	r0, #128	; 0x80
 80005de:	f000 f81f 	bl	8000620 <LCD_send_cmd>
	HAL_Delay(2);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f000 fdd0 	bl	8001188 <HAL_Delay>
//    LCD_send_cmd(0x00);
//    LCD_send_cmd(0x06);
//    LCD_send_cmd(0x00);
//    LCD_send_cmd(0x01);

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LCD_send_data>:


void LCD_send_data(char data){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	char datatosend;
	datatosend = ((data>>4)&0x0f);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	73fb      	strb	r3, [r7, #15]
	LCD_send(datatosend, 1);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2101      	movs	r1, #1
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f827 	bl	8000654 <LCD_send>
	datatosend = ((data)&0x0f);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	73fb      	strb	r3, [r7, #15]
	LCD_send(datatosend, 1);
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f81e 	bl	8000654 <LCD_send>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <LCD_send_cmd>:


void LCD_send_cmd(char cmd){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

    char datatosend;
    datatosend = ((cmd>>4)&0x0f);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	091b      	lsrs	r3, r3, #4
 800062e:	73fb      	strb	r3, [r7, #15]
    LCD_send(datatosend,0);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f80d 	bl	8000654 <LCD_send>
    datatosend = ((cmd)&0x0f);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 030f 	and.w	r3, r3, #15
 8000640:	73fb      	strb	r3, [r7, #15]
    LCD_send(datatosend, 0);
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f804 	bl	8000654 <LCD_send>

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <LCD_send>:


void LCD_send(char data, int rs){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GPIOE, RS_Pin, rs);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066a:	4822      	ldr	r0, [pc, #136]	; (80006f4 <LCD_send+0xa0>)
 800066c:	f001 f85e 	bl	800172c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, D7_Pin, ((data>>3)&0x01));
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000682:	481c      	ldr	r0, [pc, #112]	; (80006f4 <LCD_send+0xa0>)
 8000684:	f001 f852 	bl	800172c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, D6_Pin, ((data>>2)&0x01));
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <LCD_send+0xa0>)
 800069c:	f001 f846 	bl	800172c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, D5_Pin, ((data>>1)&0x01));
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	4810      	ldr	r0, [pc, #64]	; (80006f4 <LCD_send+0xa0>)
 80006b4:	f001 f83a 	bl	800172c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, D4_Pin, ((data>>0)&0x01));
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	461a      	mov	r2, r3
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <LCD_send+0xa0>)
 80006c8:	f001 f830 	bl	800172c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, E_Pin, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <LCD_send+0xa0>)
 80006d4:	f001 f82a 	bl	800172c <HAL_GPIO_WritePin>
    //LCD_delay(200);
    /*--working:
     *  HAL_Delay(4);
     */
    //HAL_Delay(1);
    LCD_delay(80);
 80006d8:	2050      	movs	r0, #80	; 0x50
 80006da:	f7ff ff4b 	bl	8000574 <LCD_delay>
    HAL_GPIO_WritePin(GPIOE, E_Pin, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <LCD_send+0xa0>)
 80006e6:	f001 f821 	bl	800172c <HAL_GPIO_WritePin>
    //LCD_delay(0);
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <LCD_send_string>:


void LCD_send_string(char *str){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(4);
 8000700:	2004      	movs	r0, #4
 8000702:	f000 fd41 	bl	8001188 <HAL_Delay>
	while (*str) LCD_send_data(*str++);
 8000706:	e006      	b.n	8000716 <LCD_send_string+0x1e>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff6b 	bl	80005ec <LCD_send_data>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f4      	bne.n	8000708 <LCD_send_string+0x10>
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <LCD_cur>:


void LCD_cur(int row, int col){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]

    switch(row)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <LCD_cur+0x18>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d005      	beq.n	800074a <LCD_cur+0x22>
 800073e:	e009      	b.n	8000754 <LCD_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000746:	603b      	str	r3, [r7, #0]
            break;
 8000748:	e004      	b.n	8000754 <LCD_cur+0x2c>
        case 1:
            col |= 0xC0;
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000750:	603b      	str	r3, [r7, #0]
            break;
 8000752:	bf00      	nop
    }
    LCD_send_cmd(col);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff61 	bl	8000620 <LCD_send_cmd>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <LCD_cls>:


void LCD_cls(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	//LCD_send_cmd(0x00);
	LCD_cur(0, 0);
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ffda 	bl	8000728 <LCD_cur>
	LCD_send_string("                ");
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <LCD_cls+0x24>)
 8000776:	f7ff ffbf 	bl	80006f8 <LCD_send_string>
	LCD_cur(1, 0);
 800077a:	2100      	movs	r1, #0
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff ffd3 	bl	8000728 <LCD_cur>
	LCD_send_string("                ");
 8000782:	4802      	ldr	r0, [pc, #8]	; (800078c <LCD_cls+0x24>)
 8000784:	f7ff ffb8 	bl	80006f8 <LCD_send_string>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08008d70 	.word	0x08008d70

08000790 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b73      	ldr	r3, [pc, #460]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a72      	ldr	r2, [pc, #456]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b70      	ldr	r3, [pc, #448]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b6c      	ldr	r3, [pc, #432]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a6b      	ldr	r2, [pc, #428]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b69      	ldr	r3, [pc, #420]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b65      	ldr	r3, [pc, #404]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a64      	ldr	r2, [pc, #400]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b62      	ldr	r3, [pc, #392]	; (8000978 <MX_GPIO_Init+0x1e8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a5d      	ldr	r2, [pc, #372]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b5b      	ldr	r3, [pc, #364]	; (8000978 <MX_GPIO_Init+0x1e8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b57      	ldr	r3, [pc, #348]	; (8000978 <MX_GPIO_Init+0x1e8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a56      	ldr	r2, [pc, #344]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b54      	ldr	r3, [pc, #336]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b50      	ldr	r3, [pc, #320]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a4f      	ldr	r2, [pc, #316]	; (8000978 <MX_GPIO_Init+0x1e8>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RW_Pin|RS_Pin|E_Pin
 800084e:	2200      	movs	r2, #0
 8000850:	f64f 6108 	movw	r1, #65032	; 0xfe08
 8000854:	4849      	ldr	r0, [pc, #292]	; (800097c <MX_GPIO_Init+0x1ec>)
 8000856:	f000 ff69 	bl	800172c <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2101      	movs	r1, #1
 800085e:	4848      	ldr	r0, [pc, #288]	; (8000980 <MX_GPIO_Init+0x1f0>)
 8000860:	f000 ff64 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000864:	2200      	movs	r2, #0
 8000866:	f24f 0110 	movw	r1, #61456	; 0xf010
 800086a:	4846      	ldr	r0, [pc, #280]	; (8000984 <MX_GPIO_Init+0x1f4>)
 800086c:	f000 ff5e 	bl	800172c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RW_Pin|RS_Pin|E_Pin
 8000870:	f64f 6308 	movw	r3, #65032	; 0xfe08
 8000874:	61fb      	str	r3, [r7, #28]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	483c      	ldr	r0, [pc, #240]	; (800097c <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fdb3 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4836      	ldr	r0, [pc, #216]	; (8000980 <MX_GPIO_Init+0x1f0>)
 80008a6:	f000 fda5 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	482e      	ldr	r0, [pc, #184]	; (8000980 <MX_GPIO_Init+0x1f0>)
 80008c6:	f000 fd95 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	482a      	ldr	r0, [pc, #168]	; (8000988 <MX_GPIO_Init+0x1f8>)
 80008e0:	f000 fd88 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e4:	2304      	movs	r3, #4
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4825      	ldr	r0, [pc, #148]	; (800098c <MX_GPIO_Init+0x1fc>)
 80008f8:	f000 fd7c 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	481c      	ldr	r0, [pc, #112]	; (800098c <MX_GPIO_Init+0x1fc>)
 800091a:	f000 fd6b 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000922:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_GPIO_Init+0x1f4>)
 8000938:	f000 fd5c 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800093c:	2320      	movs	r3, #32
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_GPIO_Init+0x1f4>)
 8000950:	f000 fd50 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000954:	2302      	movs	r3, #2
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000958:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0x1ec>)
 800096a:	f000 fd43 	bl	80013f4 <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3730      	adds	r7, #48	; 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40021000 	.word	0x40021000
 8000980:	40020800 	.word	0x40020800
 8000984:	40020c00 	.word	0x40020c00
 8000988:	40020000 	.word	0x40020000
 800098c:	40020400 	.word	0x40020400

08000990 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <MX_I2C1_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C1_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ce:	f002 fad1 	bl	8002f74 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f000 f9a0 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000ac 	.word	0x200000ac
 80009e4:	40005400 	.word	0x40005400
 80009e8:	000186a0 	.word	0x000186a0

080009ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12c      	bne.n	8000a68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <HAL_I2C_MspInit+0x8c>)
 8000a48:	f000 fcd4 	bl	80013f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400

08000a7c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <MX_I2S3_Init+0x58>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <MX_I2S3_Init+0x5c>)
 8000aa6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_I2S3_Init+0x54>)
 8000abc:	f002 fb9e 	bl	80031fc <HAL_I2S_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ac6:	f000 f929 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000100 	.word	0x20000100
 8000ad4:	40003c00 	.word	0x40003c00
 8000ad8:	00017700 	.word	0x00017700

08000adc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	; 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <HAL_I2S_MspInit+0xf0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d15a      	bne.n	8000bc2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b10:	23c0      	movs	r3, #192	; 0xc0
 8000b12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fc91 	bl	8004444 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b28:	f000 f8f8 	bl	8000d1c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_I2S_MspInit+0xf4>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b80:	2310      	movs	r3, #16
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b90:	2306      	movs	r3, #6
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <HAL_I2S_MspInit+0xf8>)
 8000b9c:	f000 fc2a 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <HAL_I2S_MspInit+0xfc>)
 8000bbe:	f000 fc19 	bl	80013f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	; 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40003c00 	.word	0x40003c00
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020800 	.word	0x40020800

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be2:	f000 fa5f 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be6:	f000 f82f 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f7ff fdd1 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bee:	f7ff fecf 	bl	8000990 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000bf2:	f7ff ff43 	bl	8000a7c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bf6:	f000 f897 	bl	8000d28 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bfa:	f000 f9b7 	bl	8000f6c <MX_TIM1_Init>
  MX_USB_HOST_Init();
 8000bfe:	f007 f8f3 	bl	8007de8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000c02:	f7ff fcd1 	bl	80005a8 <LCD_init>
  LCD_cls();
 8000c06:	f7ff fdaf 	bl	8000768 <LCD_cls>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c0a:	f007 f913 	bl	8007e34 <MX_USB_HOST_Process>
    LCD_cur(0,0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fd89 	bl	8000728 <LCD_cur>
    char str[16];
    sprintf(str, "Hello World!%d", 2023);
 8000c16:	463b      	mov	r3, r7
 8000c18:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8000c1c:	4909      	ldr	r1, [pc, #36]	; (8000c44 <main+0x68>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f007 fd1c 	bl	800865c <siprintf>
    LCD_send_string(str);
 8000c24:	463b      	mov	r3, r7
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd66 	bl	80006f8 <LCD_send_string>
    HAL_Delay(500);
 8000c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c30:	f000 faaa 	bl	8001188 <HAL_Delay>
    LCD_cls();
 8000c34:	f7ff fd98 	bl	8000768 <LCD_cls>
    HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f000 faa4 	bl	8001188 <HAL_Delay>
  {
 8000c40:	e7e3      	b.n	8000c0a <main+0x2e>
 8000c42:	bf00      	nop
 8000c44:	08008d84 	.word	0x08008d84

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0320 	add.w	r3, r7, #32
 8000c52:	2230      	movs	r2, #48	; 0x30
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f007 fc08 	bl	800846c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <SystemClock_Config+0xd0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <SystemClock_Config+0xd0>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <SystemClock_Config+0xd0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 ff34 	bl	8003b3c <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cda:	f000 f81f 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 f995 	bl	800402c <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d08:	f000 f808 	bl	8000d1c <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	; 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d2e:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <MX_SPI1_Init+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d74:	220a      	movs	r2, #10
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_SPI1_Init+0x64>)
 8000d7a:	f003 fca3 	bl	80046c4 <HAL_SPI_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d84:	f7ff ffca 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000148 	.word	0x20000148
 8000d90:	40013000 	.word	0x40013000

08000d94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_SPI_MspInit+0x84>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12b      	bne.n	8000e0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dee:	23e0      	movs	r3, #224	; 0xe0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_SPI_MspInit+0x8c>)
 8000e0a:	f000 faf3 	bl	80013f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e62:	2007      	movs	r0, #7
 8000e64:	f000 fa84 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f942 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <OTG_FS_IRQHandler+0x10>)
 8000ece:	f000 feb1 	bl	8001c34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200005cc 	.word	0x200005cc

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f007 fa74 	bl	80083f8 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	200001a0 	.word	0x200001a0
 8000f44:	200008e0 	.word	0x200008e0

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_TIM1_Init+0x98>)
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <MX_TIM1_Init+0x9c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM1_Init+0x98>)
 8000f90:	22a7      	movs	r2, #167	; 0xa7
 8000f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_TIM1_Init+0x98>)
 8000f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM1_Init+0x98>)
 8000fb6:	f003 fc0e 	bl	80047d6 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fc0:	f7ff feac 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM1_Init+0x98>)
 8000fd2:	f003 fcb7 	bl	8004944 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fdc:	f7ff fe9e 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM1_Init+0x98>)
 8000fee:	f003 feab 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f7ff fe90 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200001a4 	.word	0x200001a4
 8001008:	40010000 	.word	0x40010000

0800100c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_Base_MspInit+0x3c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10d      	bne.n	800103a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_TIM_Base_MspInit+0x40>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x40>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_TIM_Base_MspInit+0x40>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40010000 	.word	0x40010000
 800104c:	40023800 	.word	0x40023800

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopFillZerobss+0x26>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107a:	f7ff ff65 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f007 f9c1 	bl	8008404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fdab 	bl	8000bdc <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001094:	08008df4 	.word	0x08008df4
  ldr r2, =_sbss
 8001098:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800109c:	200008e0 	.word	0x200008e0

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_Init+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_Init+0x40>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x40>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f94f 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f808 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fea4 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x54>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x58>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f967 	bl	80013da <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 f92f 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_InitTick+0x5c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000000 	.word	0x20000000
 8001140:	20000008 	.word	0x20000008
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	200001ec 	.word	0x200001ec

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200001ec 	.word	0x200001ec

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff29 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff3e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff8e 	bl	80012c4 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff31 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e16b      	b.n	80016e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 815a 	bne.w	80016e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80b4 	beq.w	80016e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b60      	ldr	r3, [pc, #384]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a5f      	ldr	r2, [pc, #380]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_GPIO_Init+0x30c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <HAL_GPIO_Init+0x310>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x314>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d02b      	beq.n	800161a <HAL_GPIO_Init+0x226>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x318>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x222>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_GPIO_Init+0x31c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x21e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x320>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x324>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x328>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x32c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x330>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x20a>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00e      	b.n	800161c <HAL_GPIO_Init+0x228>
 80015fe:	2308      	movs	r3, #8
 8001600:	e00c      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001602:	2306      	movs	r3, #6
 8001604:	e00a      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001606:	2305      	movs	r3, #5
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160a:	2304      	movs	r3, #4
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x228>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x310>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_GPIO_Init+0x334>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_GPIO_Init+0x334>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f ae90 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40021400 	.word	0x40021400
 8001720:	40021800 	.word	0x40021800
 8001724:	40021c00 	.word	0x40021c00
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800175e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001760:	b08f      	sub	sp, #60	; 0x3c
 8001762:	af0a      	add	r7, sp, #40	; 0x28
 8001764:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e054      	b.n	800181a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f006 fb8a 	bl	8007ea4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2203      	movs	r2, #3
 8001794:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fbb8 	bl	8004f24 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	687e      	ldr	r6, [r7, #4]
 80017bc:	466d      	mov	r5, sp
 80017be:	f106 0410 	add.w	r4, r6, #16
 80017c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80017d2:	1d33      	adds	r3, r6, #4
 80017d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f003 fb32 	bl	8004e40 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fbaf 	bl	8004f46 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	687e      	ldr	r6, [r7, #4]
 80017f0:	466d      	mov	r5, sp
 80017f2:	f106 0410 	add.w	r4, r6, #16
 80017f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001802:	e885 0003 	stmia.w	r5, {r0, r1}
 8001806:	1d33      	adds	r3, r6, #4
 8001808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180a:	6838      	ldr	r0, [r7, #0]
 800180c:	f003 fd38 	bl	8005280 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001822 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001822:	b590      	push	{r4, r7, lr}
 8001824:	b089      	sub	sp, #36	; 0x24
 8001826:	af04      	add	r7, sp, #16
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	4608      	mov	r0, r1
 800182c:	4611      	mov	r1, r2
 800182e:	461a      	mov	r2, r3
 8001830:	4603      	mov	r3, r0
 8001832:	70fb      	strb	r3, [r7, #3]
 8001834:	460b      	mov	r3, r1
 8001836:	70bb      	strb	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_HCD_HC_Init+0x28>
 8001846:	2302      	movs	r3, #2
 8001848:	e076      	b.n	8001938 <HAL_HCD_HC_Init+0x116>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	333d      	adds	r3, #61	; 0x3d
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3338      	adds	r3, #56	; 0x38
 8001872:	787a      	ldrb	r2, [r7, #1]
 8001874:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3340      	adds	r3, #64	; 0x40
 8001884:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001886:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3339      	adds	r3, #57	; 0x39
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	333f      	adds	r3, #63	; 0x3f
 80018a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	78ba      	ldrb	r2, [r7, #2]
 80018b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018b6:	b2d0      	uxtb	r0, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	333a      	adds	r3, #58	; 0x3a
 80018c4:	4602      	mov	r2, r0
 80018c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da09      	bge.n	80018e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	212c      	movs	r1, #44	; 0x2c
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	333b      	adds	r3, #59	; 0x3b
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e008      	b.n	80018f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	333b      	adds	r3, #59	; 0x3b
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	333c      	adds	r3, #60	; 0x3c
 8001904:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001908:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	787c      	ldrb	r4, [r7, #1]
 8001910:	78ba      	ldrb	r2, [r7, #2]
 8001912:	78f9      	ldrb	r1, [r7, #3]
 8001914:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	4623      	mov	r3, r4
 8001926:	f003 fe31 	bl	800558c <USB_HC_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}

08001940 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_HCD_HC_Halt+0x1e>
 800195a:	2302      	movs	r3, #2
 800195c:	e00f      	b.n	800197e <HAL_HCD_HC_Halt+0x3e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f004 f881 	bl	8005a76 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	70fb      	strb	r3, [r7, #3]
 800199a:	460b      	mov	r3, r1
 800199c:	70bb      	strb	r3, [r7, #2]
 800199e:	4613      	mov	r3, r2
 80019a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	333b      	adds	r3, #59	; 0x3b
 80019b0:	78ba      	ldrb	r2, [r7, #2]
 80019b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	333f      	adds	r3, #63	; 0x3f
 80019c2:	787a      	ldrb	r2, [r7, #1]
 80019c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019c6:	7c3b      	ldrb	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d112      	bne.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3342      	adds	r3, #66	; 0x42
 80019da:	2203      	movs	r2, #3
 80019dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	333d      	adds	r3, #61	; 0x3d
 80019ec:	7f3a      	ldrb	r2, [r7, #28]
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e008      	b.n	8001a04 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3342      	adds	r3, #66	; 0x42
 8001a00:	2202      	movs	r2, #2
 8001a02:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	f200 80c6 	bhi.w	8001b98 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a0c:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001b85 	.word	0x08001b85
 8001a1c:	08001a89 	.word	0x08001a89
 8001a20:	08001b07 	.word	0x08001b07
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a24:	7c3b      	ldrb	r3, [r7, #16]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	f040 80b8 	bne.w	8001b9c <HAL_HCD_HC_SubmitRequest+0x214>
 8001a2c:	78bb      	ldrb	r3, [r7, #2]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 80b4 	bne.w	8001b9c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a34:	8b3b      	ldrh	r3, [r7, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d108      	bne.n	8001a4c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3355      	adds	r3, #85	; 0x55
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	3355      	adds	r3, #85	; 0x55
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	212c      	movs	r1, #44	; 0x2c
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3342      	adds	r3, #66	; 0x42
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a72:	e093      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	212c      	movs	r1, #44	; 0x2c
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	3342      	adds	r3, #66	; 0x42
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
      break;
 8001a86:	e089      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a88:	78bb      	ldrb	r3, [r7, #2]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11d      	bne.n	8001aca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	3355      	adds	r3, #85	; 0x55
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	212c      	movs	r1, #44	; 0x2c
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	3342      	adds	r3, #66	; 0x42
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ab4:	e073      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3342      	adds	r3, #66	; 0x42
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	701a      	strb	r2, [r3, #0]
      break;
 8001ac8:	e069      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3354      	adds	r3, #84	; 0x54
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3342      	adds	r3, #66	; 0x42
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
      break;
 8001af0:	e055      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	212c      	movs	r1, #44	; 0x2c
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	3342      	adds	r3, #66	; 0x42
 8001b00:	2202      	movs	r2, #2
 8001b02:	701a      	strb	r2, [r3, #0]
      break;
 8001b04:	e04b      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b06:	78bb      	ldrb	r3, [r7, #2]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d11d      	bne.n	8001b48 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3355      	adds	r3, #85	; 0x55
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3342      	adds	r3, #66	; 0x42
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b32:	e034      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3342      	adds	r3, #66	; 0x42
 8001b42:	2202      	movs	r2, #2
 8001b44:	701a      	strb	r2, [r3, #0]
      break;
 8001b46:	e02a      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	212c      	movs	r1, #44	; 0x2c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	3354      	adds	r3, #84	; 0x54
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3342      	adds	r3, #66	; 0x42
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
      break;
 8001b6e:	e016      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	212c      	movs	r1, #44	; 0x2c
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3342      	adds	r3, #66	; 0x42
 8001b7e:	2202      	movs	r2, #2
 8001b80:	701a      	strb	r2, [r3, #0]
      break;
 8001b82:	e00c      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3342      	adds	r3, #66	; 0x42
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b98:	bf00      	nop
 8001b9a:	e000      	b.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b9c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	212c      	movs	r1, #44	; 0x2c
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	3344      	adds	r3, #68	; 0x44
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	8b3a      	ldrh	r2, [r7, #24]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	202c      	movs	r0, #44	; 0x2c
 8001bb8:	fb00 f303 	mul.w	r3, r0, r3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	334c      	adds	r3, #76	; 0x4c
 8001bc0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3360      	adds	r3, #96	; 0x60
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3350      	adds	r3, #80	; 0x50
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3339      	adds	r3, #57	; 0x39
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3361      	adds	r3, #97	; 0x61
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	222c      	movs	r2, #44	; 0x2c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	3338      	adds	r3, #56	; 0x38
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	18d1      	adds	r1, r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	f003 fdd4 	bl	80057d0 <USB_HC_StartXfer>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop

08001c34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fad5 	bl	80051fa <USB_GetMode>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	f040 80f6 	bne.w	8001e44 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fab9 	bl	80051d4 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80ec 	beq.w	8001e42 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fab0 	bl	80051d4 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c7e:	d104      	bne.n	8001c8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 faa0 	bl	80051d4 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c9e:	d104      	bne.n	8001caa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fa90 	bl	80051d4 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cbe:	d104      	bne.n	8001cca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fa80 	bl	80051d4 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d103      	bne.n	8001ce6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 fa72 	bl	80051d4 <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cfa:	d11c      	bne.n	8001d36 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d16:	2110      	movs	r1, #16
 8001d18:	6938      	ldr	r0, [r7, #16]
 8001d1a:	f003 f961 	bl	8004fe0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d1e:	6938      	ldr	r0, [r7, #16]
 8001d20:	f003 f992 	bl	8005048 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fb68 	bl	8005400 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f006 f935 	bl	8007fa0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fa4a 	bl	80051d4 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4a:	d102      	bne.n	8001d52 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f001 f89e 	bl	8002e8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fa3c 	bl	80051d4 <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d106      	bne.n	8001d74 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f006 f8fe 	bl	8007f68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2208      	movs	r2, #8
 8001d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fa2b 	bl	80051d4 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d101      	bne.n	8001d8c <HAL_HCD_IRQHandler+0x158>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_HCD_IRQHandler+0x15a>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d012      	beq.n	8001db8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699a      	ldr	r2, [r3, #24]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0210 	bic.w	r2, r2, #16
 8001da0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 ffa1 	bl	8002cea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0210 	orr.w	r2, r2, #16
 8001db6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fa09 	bl	80051d4 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dcc:	d13a      	bne.n	8001e44 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fe3e 	bl	8005a54 <USB_HC_ReadInterrupt>
 8001dd8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e025      	b.n	8001e2c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d018      	beq.n	8001e26 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0a:	d106      	bne.n	8001e1a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8ab 	bl	8001f6e <HCD_HC_IN_IRQHandler>
 8001e18:	e005      	b.n	8001e26 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fbf9 	bl	8002618 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3d4      	bcc.n	8001de0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3e:	615a      	str	r2, [r3, #20]
 8001e40:	e000      	b.n	8001e44 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e42:	bf00      	nop
    }
  }
}
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_HCD_Start+0x16>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e013      	b.n	8001e88 <HAL_HCD_Start+0x3e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fb2a 	bl	80054c8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 f842 	bl	8004f02 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_HCD_Stop+0x16>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e00d      	b.n	8001ec2 <HAL_HCD_Stop+0x32>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 ff18 	bl	8005ce8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 facc 	bl	8005474 <USB_ResetPort>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3360      	adds	r3, #96	; 0x60
 8001f00:	781b      	ldrb	r3, [r3, #0]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	3350      	adds	r3, #80	; 0x50
 8001f28:	681b      	ldr	r3, [r3, #0]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fb10 	bl	8005568 <USB_GetCurrentFrame>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 faeb 	bl	800553a <USB_GetHostSpeed>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d11a      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	2304      	movs	r3, #4
 8001fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	3361      	adds	r3, #97	; 0x61
 8001fbe:	2206      	movs	r2, #6
 8001fc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fd52 	bl	8005a76 <USB_HC_Halt>
 8001fd2:	e0af      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d11b      	bne.n	8002024 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3361      	adds	r3, #97	; 0x61
 800200e:	2207      	movs	r2, #7
 8002010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fd2a 	bl	8005a76 <USB_HC_Halt>
 8002022:	e087      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b20      	cmp	r3, #32
 8002038:	d109      	bne.n	800204e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	461a      	mov	r2, r3
 8002048:	2320      	movs	r3, #32
 800204a:	6093      	str	r3, [r2, #8]
 800204c:	e072      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b08      	cmp	r3, #8
 8002062:	d11a      	bne.n	800209a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	2308      	movs	r3, #8
 8002074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3361      	adds	r3, #97	; 0x61
 8002084:	2205      	movs	r2, #5
 8002086:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fcef 	bl	8005a76 <USB_HC_Halt>
 8002098:	e04c      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b0:	d11b      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3361      	adds	r3, #97	; 0x61
 80020d4:	2208      	movs	r2, #8
 80020d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fcc7 	bl	8005a76 <USB_HC_Halt>
 80020e8:	e024      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d119      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3361      	adds	r3, #97	; 0x61
 8002120:	2206      	movs	r2, #6
 8002122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fca1 	bl	8005a76 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214a:	d112      	bne.n	8002172 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f003 fc8d 	bl	8005a76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	461a      	mov	r2, r3
 800216a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002170:	e24e      	b.n	8002610 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	f040 80df 	bne.w	8002348 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d019      	beq.n	80021c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3348      	adds	r3, #72	; 0x48
 80021a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0159      	lsls	r1, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	202c      	movs	r0, #44	; 0x2c
 80021bc:	fb00 f303 	mul.w	r3, r0, r3
 80021c0:	440b      	add	r3, r1
 80021c2:	3350      	adds	r3, #80	; 0x50
 80021c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3361      	adds	r3, #97	; 0x61
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	335c      	adds	r3, #92	; 0x5c
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	461a      	mov	r2, r3
 80021f8:	2301      	movs	r3, #1
 80021fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	333f      	adds	r3, #63	; 0x3f
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	333f      	adds	r3, #63	; 0x3f
 800221e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002220:	2b02      	cmp	r3, #2
 8002222:	d111      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fc21 	bl	8005a76 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	2310      	movs	r3, #16
 8002244:	6093      	str	r3, [r2, #8]
 8002246:	e03a      	b.n	80022be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	333f      	adds	r3, #63	; 0x3f
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d009      	beq.n	8002270 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	333f      	adds	r3, #63	; 0x3f
 800226a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800226c:	2b01      	cmp	r3, #1
 800226e:	d126      	bne.n	80022be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	0151      	lsls	r1, r2, #5
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	440a      	add	r2, r1
 8002286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800228e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3360      	adds	r3, #96	; 0x60
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	b2d9      	uxtb	r1, r3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	202c      	movs	r0, #44	; 0x2c
 80022ac:	fb00 f303 	mul.w	r3, r0, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3360      	adds	r3, #96	; 0x60
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f005 fe7f 	bl	8007fbc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d12b      	bne.n	800231e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3348      	adds	r3, #72	; 0x48
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	202c      	movs	r0, #44	; 0x2c
 80022dc:	fb00 f202 	mul.w	r2, r0, r2
 80022e0:	440a      	add	r2, r1
 80022e2:	3240      	adds	r2, #64	; 0x40
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 818e 	beq.w	8002610 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3354      	adds	r3, #84	; 0x54
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f083 0301 	eor.w	r3, r3, #1
 8002308:	b2d8      	uxtb	r0, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3354      	adds	r3, #84	; 0x54
 8002318:	4602      	mov	r2, r0
 800231a:	701a      	strb	r2, [r3, #0]
}
 800231c:	e178      	b.n	8002610 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3354      	adds	r3, #84	; 0x54
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2d8      	uxtb	r0, r3
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3354      	adds	r3, #84	; 0x54
 8002342:	4602      	mov	r2, r0
 8002344:	701a      	strb	r2, [r3, #0]
}
 8002346:	e163      	b.n	8002610 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	f040 80f6 	bne.w	800254c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3361      	adds	r3, #97	; 0x61
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d109      	bne.n	8002388 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3360      	adds	r3, #96	; 0x60
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e0c9      	b.n	800251c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3361      	adds	r3, #97	; 0x61
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d109      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3360      	adds	r3, #96	; 0x60
 80023aa:	2205      	movs	r2, #5
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e0b5      	b.n	800251c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3361      	adds	r3, #97	; 0x61
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d009      	beq.n	80023d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3361      	adds	r3, #97	; 0x61
 80023d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d150      	bne.n	800247a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	335c      	adds	r3, #92	; 0x5c
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	202c      	movs	r0, #44	; 0x2c
 80023f0:	fb00 f303 	mul.w	r3, r0, r3
 80023f4:	440b      	add	r3, r1
 80023f6:	335c      	adds	r3, #92	; 0x5c
 80023f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	335c      	adds	r3, #92	; 0x5c
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d912      	bls.n	8002434 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	2204      	movs	r2, #4
 8002430:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002432:	e073      	b.n	800251c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3360      	adds	r3, #96	; 0x60
 8002442:	2202      	movs	r2, #2
 8002444:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800245c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002464:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002478:	e050      	b.n	800251c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3361      	adds	r3, #97	; 0x61
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d122      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3360      	adds	r3, #96	; 0x60
 800249c:	2202      	movs	r2, #2
 800249e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e023      	b.n	800251c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3361      	adds	r3, #97	; 0x61
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	d119      	bne.n	800251c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	335c      	adds	r3, #92	; 0x5c
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	202c      	movs	r0, #44	; 0x2c
 8002500:	fb00 f303 	mul.w	r3, r0, r3
 8002504:	440b      	add	r3, r1
 8002506:	335c      	adds	r3, #92	; 0x5c
 8002508:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3360      	adds	r3, #96	; 0x60
 8002518:	2204      	movs	r2, #4
 800251a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	2302      	movs	r3, #2
 800252c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	b2d9      	uxtb	r1, r3
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	202c      	movs	r0, #44	; 0x2c
 8002538:	fb00 f303 	mul.w	r3, r0, r3
 800253c:	4413      	add	r3, r2
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f005 fd39 	bl	8007fbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800254a:	e061      	b.n	8002610 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d156      	bne.n	8002610 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	333f      	adds	r3, #63	; 0x3f
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d111      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	335c      	adds	r3, #92	; 0x5c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fa6f 	bl	8005a76 <USB_HC_Halt>
 8002598:	e031      	b.n	80025fe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333f      	adds	r3, #63	; 0x3f
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	333f      	adds	r3, #63	; 0x3f
 80025bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d11d      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	335c      	adds	r3, #92	; 0x5c
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d110      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	2203      	movs	r2, #3
 80025ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fa3c 	bl	8005a76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	2310      	movs	r3, #16
 800260e:	6093      	str	r3, [r2, #8]
}
 8002610:	bf00      	nop
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d11a      	bne.n	800267e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	2304      	movs	r3, #4
 8002658:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3361      	adds	r3, #97	; 0x61
 8002668:	2206      	movs	r2, #6
 800266a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f003 f9fd 	bl	8005a76 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800267c:	e331      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b20      	cmp	r3, #32
 8002692:	d12e      	bne.n	80026f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	2320      	movs	r3, #32
 80026a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	333d      	adds	r3, #61	; 0x3d
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 8313 	bne.w	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	333d      	adds	r3, #61	; 0x3d
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3360      	adds	r3, #96	; 0x60
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 f9c3 	bl	8005a76 <USB_HC_Halt>
}
 80026f0:	e2f7      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002708:	d112      	bne.n	8002730 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800271c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f003 f9a4 	bl	8005a76 <USB_HC_Halt>
}
 800272e:	e2d8      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d140      	bne.n	80027c8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	335c      	adds	r3, #92	; 0x5c
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d111      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	333d      	adds	r3, #61	; 0x3d
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2340      	movs	r3, #64	; 0x40
 8002790:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	461a      	mov	r2, r3
 80027a0:	2301      	movs	r3, #1
 80027a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3361      	adds	r3, #97	; 0x61
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 f958 	bl	8005a76 <USB_HC_Halt>
}
 80027c6:	e28c      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d12c      	bne.n	8002838 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3361      	adds	r3, #97	; 0x61
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	333d      	adds	r3, #61	; 0x3d
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	335c      	adds	r3, #92	; 0x5c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f003 f929 	bl	8005a76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	6093      	str	r3, [r2, #8]
}
 8002836:	e254      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11a      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	2308      	movs	r3, #8
 800285e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3361      	adds	r3, #97	; 0x61
 800286e:	2205      	movs	r2, #5
 8002870:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f003 f8fa 	bl	8005a76 <USB_HC_Halt>
}
 8002882:	e22e      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b10      	cmp	r3, #16
 8002898:	d140      	bne.n	800291c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3361      	adds	r3, #97	; 0x61
 80028ba:	2203      	movs	r2, #3
 80028bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	333d      	adds	r3, #61	; 0x3d
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d112      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	333c      	adds	r3, #60	; 0x3c
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	333d      	adds	r3, #61	; 0x3d
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f003 f8b7 	bl	8005a76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	2310      	movs	r3, #16
 8002918:	6093      	str	r3, [r2, #8]
}
 800291a:	e1e2      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d164      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d111      	bne.n	800295e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3361      	adds	r3, #97	; 0x61
 8002948:	2206      	movs	r2, #6
 800294a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f003 f88d 	bl	8005a76 <USB_HC_Halt>
 800295c:	e044      	b.n	80029e8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	202c      	movs	r0, #44	; 0x2c
 8002976:	fb00 f303 	mul.w	r3, r0, r3
 800297a:	440b      	add	r3, r1
 800297c:	335c      	adds	r3, #92	; 0x5c
 800297e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	335c      	adds	r3, #92	; 0x5c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d920      	bls.n	80029d6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	335c      	adds	r3, #92	; 0x5c
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3360      	adds	r3, #96	; 0x60
 80029b4:	2204      	movs	r2, #4
 80029b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	b2d9      	uxtb	r1, r3
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	202c      	movs	r0, #44	; 0x2c
 80029c2:	fb00 f303 	mul.w	r3, r0, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3360      	adds	r3, #96	; 0x60
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f005 faf4 	bl	8007fbc <HAL_HCD_HC_NotifyURBChange_Callback>
 80029d4:	e008      	b.n	80029e8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3360      	adds	r3, #96	; 0x60
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	6093      	str	r3, [r2, #8]
}
 80029fa:	e172      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a12:	d11b      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3361      	adds	r3, #97	; 0x61
 8002a22:	2208      	movs	r2, #8
 8002a24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 f820 	bl	8005a76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	461a      	mov	r2, r3
 8002a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a48:	6093      	str	r3, [r2, #8]
}
 8002a4a:	e14a      	b.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	f040 813f 	bne.w	8002ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3361      	adds	r3, #97	; 0x61
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d17d      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	333f      	adds	r3, #63	; 0x3f
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d00a      	beq.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	333f      	adds	r3, #63	; 0x3f
 8002aac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	f040 8100 	bne.w	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d113      	bne.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3355      	adds	r3, #85	; 0x55
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f083 0301 	eor.w	r3, r3, #1
 8002ad0:	b2d8      	uxtb	r0, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3355      	adds	r3, #85	; 0x55
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f040 80e3 	bne.w	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	334c      	adds	r3, #76	; 0x4c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80d8 	beq.w	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	334c      	adds	r3, #76	; 0x4c
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	202c      	movs	r0, #44	; 0x2c
 8002b1a:	fb00 f202 	mul.w	r2, r0, r2
 8002b1e:	440a      	add	r2, r1
 8002b20:	3240      	adds	r2, #64	; 0x40
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	3b01      	subs	r3, #1
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	202c      	movs	r0, #44	; 0x2c
 8002b2e:	fb00 f202 	mul.w	r2, r0, r2
 8002b32:	440a      	add	r2, r1
 8002b34:	3240      	adds	r2, #64	; 0x40
 8002b36:	8812      	ldrh	r2, [r2, #0]
 8002b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80b5 	beq.w	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3355      	adds	r3, #85	; 0x55
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f083 0301 	eor.w	r3, r3, #1
 8002b5e:	b2d8      	uxtb	r0, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3355      	adds	r3, #85	; 0x55
 8002b6e:	4602      	mov	r2, r0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e09f      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3361      	adds	r3, #97	; 0x61
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d109      	bne.n	8002b9c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	2202      	movs	r2, #2
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e08b      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3361      	adds	r3, #97	; 0x61
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d109      	bne.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3360      	adds	r3, #96	; 0x60
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e077      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3361      	adds	r3, #97	; 0x61
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d109      	bne.n	8002bec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3360      	adds	r3, #96	; 0x60
 8002be6:	2205      	movs	r2, #5
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e063      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3361      	adds	r3, #97	; 0x61
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d009      	beq.n	8002c14 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d14f      	bne.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	335c      	adds	r3, #92	; 0x5c
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	202c      	movs	r0, #44	; 0x2c
 8002c2c:	fb00 f303 	mul.w	r3, r0, r3
 8002c30:	440b      	add	r3, r1
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	335c      	adds	r3, #92	; 0x5c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d912      	bls.n	8002c70 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	335c      	adds	r3, #92	; 0x5c
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3360      	adds	r3, #96	; 0x60
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e021      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3360      	adds	r3, #96	; 0x60
 8002c7e:	2202      	movs	r2, #2
 8002c80:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c98:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	461a      	mov	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	b2d9      	uxtb	r1, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	202c      	movs	r0, #44	; 0x2c
 8002cd0:	fb00 f303 	mul.w	r3, r0, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3360      	adds	r3, #96	; 0x60
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f005 f96d 	bl	8007fbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ce2:	bf00      	nop
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08a      	sub	sp, #40	; 0x28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	0c5b      	lsrs	r3, r3, #17
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d1e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d004      	beq.n	8002d30 <HCD_RXQLVL_IRQHandler+0x46>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	f000 80a9 	beq.w	8002e80 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d2e:	e0aa      	b.n	8002e86 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80a6 	beq.w	8002e84 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3344      	adds	r3, #68	; 0x44
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 809b 	beq.w	8002e84 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3350      	adds	r3, #80	; 0x50
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	441a      	add	r2, r3
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	202c      	movs	r0, #44	; 0x2c
 8002d68:	fb00 f303 	mul.w	r3, r0, r3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	334c      	adds	r3, #76	; 0x4c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d87a      	bhi.n	8002e6c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3344      	adds	r3, #68	; 0x44
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f002 f9c8 	bl	8005124 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3344      	adds	r3, #68	; 0x44
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	441a      	add	r2, r3
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	202c      	movs	r0, #44	; 0x2c
 8002dae:	fb00 f303 	mul.w	r3, r0, r3
 8002db2:	440b      	add	r3, r1
 8002db4:	3344      	adds	r3, #68	; 0x44
 8002db6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3350      	adds	r3, #80	; 0x50
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	441a      	add	r2, r3
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	202c      	movs	r0, #44	; 0x2c
 8002dd2:	fb00 f303 	mul.w	r3, r0, r3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3350      	adds	r3, #80	; 0x50
 8002dda:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	0cdb      	lsrs	r3, r3, #19
 8002dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3340      	adds	r3, #64	; 0x40
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d13c      	bne.n	8002e84 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d039      	beq.n	8002e84 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e26:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e2e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3354      	adds	r3, #84	; 0x54
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	f083 0301 	eor.w	r3, r3, #1
 8002e56:	b2d8      	uxtb	r0, r3
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3354      	adds	r3, #84	; 0x54
 8002e66:	4602      	mov	r2, r0
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	e00b      	b.n	8002e84 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3360      	adds	r3, #96	; 0x60
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	701a      	strb	r2, [r3, #0]
      break;
 8002e7e:	e001      	b.n	8002e84 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e84:	bf00      	nop
  }
}
 8002e86:	bf00      	nop
 8002e88:	3728      	adds	r7, #40	; 0x28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002eba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d10b      	bne.n	8002ede <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d102      	bne.n	8002ed6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f005 f857 	bl	8007f84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d132      	bne.n	8002f4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f043 0308 	orr.w	r3, r3, #8
 8002eee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d126      	bne.n	8002f48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d113      	bne.n	8002f2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f0c:	d106      	bne.n	8002f1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2102      	movs	r1, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fa73 	bl	8005400 <USB_InitFSLSPClkSel>
 8002f1a:	e011      	b.n	8002f40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fa6c 	bl	8005400 <USB_InitFSLSPClkSel>
 8002f28:	e00a      	b.n	8002f40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d106      	bne.n	8002f40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f005 f849 	bl	8007fd8 <HAL_HCD_PortEnabled_Callback>
 8002f46:	e002      	b.n	8002f4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f005 f853 	bl	8007ff4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d103      	bne.n	8002f60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f043 0320 	orr.w	r3, r3, #32
 8002f5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e12b      	b.n	80031de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd fd26 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	; 0x24
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f001 fa20 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 8002fdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4a81      	ldr	r2, [pc, #516]	; (80031e8 <HAL_I2C_Init+0x274>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d807      	bhi.n	8002ff8 <HAL_I2C_Init+0x84>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a80      	ldr	r2, [pc, #512]	; (80031ec <HAL_I2C_Init+0x278>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	bf94      	ite	ls
 8002ff0:	2301      	movls	r3, #1
 8002ff2:	2300      	movhi	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e006      	b.n	8003006 <HAL_I2C_Init+0x92>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a7d      	ldr	r2, [pc, #500]	; (80031f0 <HAL_I2C_Init+0x27c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bf94      	ite	ls
 8003000:	2301      	movls	r3, #1
 8003002:	2300      	movhi	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0e7      	b.n	80031de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4a78      	ldr	r2, [pc, #480]	; (80031f4 <HAL_I2C_Init+0x280>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0c9b      	lsrs	r3, r3, #18
 8003018:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a6a      	ldr	r2, [pc, #424]	; (80031e8 <HAL_I2C_Init+0x274>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d802      	bhi.n	8003048 <HAL_I2C_Init+0xd4>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3301      	adds	r3, #1
 8003046:	e009      	b.n	800305c <HAL_I2C_Init+0xe8>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	4a69      	ldr	r2, [pc, #420]	; (80031f8 <HAL_I2C_Init+0x284>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	3301      	adds	r3, #1
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800306e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	495c      	ldr	r1, [pc, #368]	; (80031e8 <HAL_I2C_Init+0x274>)
 8003078:	428b      	cmp	r3, r1
 800307a:	d819      	bhi.n	80030b0 <HAL_I2C_Init+0x13c>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e59      	subs	r1, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fbb1 f3f3 	udiv	r3, r1, r3
 800308a:	1c59      	adds	r1, r3, #1
 800308c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003090:	400b      	ands	r3, r1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_I2C_Init+0x138>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1e59      	subs	r1, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030aa:	e051      	b.n	8003150 <HAL_I2C_Init+0x1dc>
 80030ac:	2304      	movs	r3, #4
 80030ae:	e04f      	b.n	8003150 <HAL_I2C_Init+0x1dc>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <HAL_I2C_Init+0x168>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e58      	subs	r0, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e012      	b.n	8003102 <HAL_I2C_Init+0x18e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	0099      	lsls	r1, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Init+0x196>
 8003106:	2301      	movs	r3, #1
 8003108:	e022      	b.n	8003150 <HAL_I2C_Init+0x1dc>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10e      	bne.n	8003130 <HAL_I2C_Init+0x1bc>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e58      	subs	r0, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	440b      	add	r3, r1
 8003120:	fbb0 f3f3 	udiv	r3, r0, r3
 8003124:	3301      	adds	r3, #1
 8003126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312e:	e00f      	b.n	8003150 <HAL_I2C_Init+0x1dc>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	0099      	lsls	r1, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	6809      	ldr	r1, [r1, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800317e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6911      	ldr	r1, [r2, #16]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68d2      	ldr	r2, [r2, #12]
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	430b      	orrs	r3, r1
 8003192:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	000186a0 	.word	0x000186a0
 80031ec:	001e847f 	.word	0x001e847f
 80031f0:	003d08ff 	.word	0x003d08ff
 80031f4:	431bde83 	.word	0x431bde83
 80031f8:	10624dd3 	.word	0x10624dd3

080031fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e128      	b.n	8003460 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a90      	ldr	r2, [pc, #576]	; (8003468 <HAL_I2S_Init+0x26c>)
 8003226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7fd fc57 	bl	8000adc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003244:	f023 030f 	bic.w	r3, r3, #15
 8003248:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2202      	movs	r2, #2
 8003250:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d060      	beq.n	800331c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003262:	2310      	movs	r3, #16
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e001      	b.n	800326c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b20      	cmp	r3, #32
 8003272:	d802      	bhi.n	800327a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800327a:	2001      	movs	r0, #1
 800327c:	f001 f9c4 	bl	8004608 <HAL_RCCEx_GetPeriphCLKFreq>
 8003280:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328a:	d125      	bne.n	80032d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	fbb2 f2f3 	udiv	r2, r2, r3
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	3305      	adds	r3, #5
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	e01f      	b.n	80032f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	3305      	adds	r3, #5
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e00e      	b.n	80032f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	3305      	adds	r3, #5
 80032f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4a5c      	ldr	r2, [pc, #368]	; (800346c <HAL_I2S_Init+0x270>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	08db      	lsrs	r3, r3, #3
 8003300:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e003      	b.n	8003324 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800331c:	2302      	movs	r3, #2
 800331e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d902      	bls.n	8003330 <HAL_I2S_Init+0x134>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2bff      	cmp	r3, #255	; 0xff
 800332e:	d907      	bls.n	8003340 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f043 0210 	orr.w	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e08f      	b.n	8003460 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	ea42 0103 	orr.w	r1, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	430a      	orrs	r2, r1
 8003352:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800335e:	f023 030f 	bic.w	r3, r3, #15
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6851      	ldr	r1, [r2, #4]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68d2      	ldr	r2, [r2, #12]
 8003370:	4311      	orrs	r1, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6992      	ldr	r2, [r2, #24]
 8003376:	430a      	orrs	r2, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003382:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d161      	bne.n	8003450 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a38      	ldr	r2, [pc, #224]	; (8003470 <HAL_I2S_Init+0x274>)
 8003390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a37      	ldr	r2, [pc, #220]	; (8003474 <HAL_I2S_Init+0x278>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_I2S_Init+0x1a4>
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_I2S_Init+0x27c>)
 800339e:	e001      	b.n	80033a4 <HAL_I2S_Init+0x1a8>
 80033a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	4932      	ldr	r1, [pc, #200]	; (8003474 <HAL_I2S_Init+0x278>)
 80033ac:	428a      	cmp	r2, r1
 80033ae:	d101      	bne.n	80033b4 <HAL_I2S_Init+0x1b8>
 80033b0:	4a31      	ldr	r2, [pc, #196]	; (8003478 <HAL_I2S_Init+0x27c>)
 80033b2:	e001      	b.n	80033b8 <HAL_I2S_Init+0x1bc>
 80033b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033bc:	f023 030f 	bic.w	r3, r3, #15
 80033c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_I2S_Init+0x278>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_I2S_Init+0x1d4>
 80033cc:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_I2S_Init+0x27c>)
 80033ce:	e001      	b.n	80033d4 <HAL_I2S_Init+0x1d8>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	2202      	movs	r2, #2
 80033d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a25      	ldr	r2, [pc, #148]	; (8003474 <HAL_I2S_Init+0x278>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_I2S_Init+0x1ea>
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_I2S_Init+0x27c>)
 80033e4:	e001      	b.n	80033ea <HAL_I2S_Init+0x1ee>
 80033e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f6:	d003      	beq.n	8003400 <HAL_I2S_Init+0x204>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003416:	4313      	orrs	r3, r2
 8003418:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003420:	4313      	orrs	r3, r2
 8003422:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800342a:	4313      	orrs	r3, r2
 800342c:	b29a      	uxth	r2, r3
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	4313      	orrs	r3, r2
 8003432:	b29b      	uxth	r3, r3
 8003434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003438:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <HAL_I2S_Init+0x278>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_I2S_Init+0x24c>
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_I2S_Init+0x27c>)
 8003446:	e001      	b.n	800344c <HAL_I2S_Init+0x250>
 8003448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800344c:	897a      	ldrh	r2, [r7, #10]
 800344e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08003573 	.word	0x08003573
 800346c:	cccccccd 	.word	0xcccccccd
 8003470:	08003689 	.word	0x08003689
 8003474:	40003800 	.word	0x40003800
 8003478:	40003400 	.word	0x40003400

0800347c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10e      	bne.n	800350c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffb8 	bl	800347c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	b292      	uxth	r2, r2
 8003528:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10e      	bne.n	800356a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff93 	bl	8003490 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b04      	cmp	r3, #4
 800358c:	d13a      	bne.n	8003604 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d109      	bne.n	80035ac <I2S_IRQHandler+0x3a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d102      	bne.n	80035ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffb4 	bl	8003514 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d126      	bne.n	8003604 <I2S_IRQHandler+0x92>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d11f      	bne.n	8003604 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f043 0202 	orr.w	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff50 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b03      	cmp	r3, #3
 800360e:	d136      	bne.n	800367e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d109      	bne.n	800362e <I2S_IRQHandler+0xbc>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d102      	bne.n	800362e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff45 	bl	80034b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b08      	cmp	r3, #8
 8003636:	d122      	bne.n	800367e <I2S_IRQHandler+0x10c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b20      	cmp	r3, #32
 8003644:	d11b      	bne.n	800367e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003654:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff13 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a92      	ldr	r2, [pc, #584]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036a2:	4b92      	ldr	r3, [pc, #584]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036a4:	e001      	b.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a8b      	ldr	r2, [pc, #556]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036c0:	4b8a      	ldr	r3, [pc, #552]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c2:	e001      	b.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d4:	d004      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 8099 	bne.w	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d107      	bne.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f925 	bl	8003944 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f9c8 	bl	8003aa4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d13a      	bne.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d035      	beq.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6e      	ldr	r2, [pc, #440]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003732:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003734:	e001      	b.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4969      	ldr	r1, [pc, #420]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003742:	428b      	cmp	r3, r1
 8003744:	d101      	bne.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003746:	4b69      	ldr	r3, [pc, #420]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003748:	e001      	b.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003752:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003762:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fe88 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b08      	cmp	r3, #8
 800379c:	f040 80c3 	bne.w	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80bd 	beq.w	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a49      	ldr	r2, [pc, #292]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037c6:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c8:	e001      	b.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4944      	ldr	r1, [pc, #272]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d6:	428b      	cmp	r3, r1
 80037d8:	d101      	bne.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037da:	4b44      	ldr	r3, [pc, #272]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037dc:	e001      	b.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fe4a 	bl	80034a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003810:	e089      	b.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d107      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8be 	bl	80039a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8fd 	bl	8003a40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d12f      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02a      	beq.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003868:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003876:	e001      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4919      	ldr	r1, [pc, #100]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003884:	428b      	cmp	r3, r1
 8003886:	d101      	bne.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800388a:	e001      	b.n	8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800388c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003890:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003894:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0202 	orr.w	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fdfa 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d136      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d031      	beq.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d0:	e001      	b.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4902      	ldr	r1, [pc, #8]	; (80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038de:	428b      	cmp	r3, r1
 80038e0:	d106      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038e2:	4b02      	ldr	r3, [pc, #8]	; (80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e4:	e006      	b.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038e6:	bf00      	nop
 80038e8:	40003800 	.word	0x40003800
 80038ec:	40003400 	.word	0x40003400
 80038f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003908:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fdc0 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	e000      	b.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003926:	bf00      	nop
}
 8003928:	bf00      	nop
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c99      	adds	r1, r3, #2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6251      	str	r1, [r2, #36]	; 0x24
 8003956:	881a      	ldrh	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d113      	bne.n	800399e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003984:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ffc9 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c99      	adds	r1, r3, #2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6251      	str	r1, [r2, #36]	; 0x24
 80039ba:	8819      	ldrh	r1, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <I2SEx_TxISR_I2SExt+0x90>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <I2SEx_TxISR_I2SExt+0x22>
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <I2SEx_TxISR_I2SExt+0x94>)
 80039c8:	e001      	b.n	80039ce <I2SEx_TxISR_I2SExt+0x26>
 80039ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ce:	460a      	mov	r2, r1
 80039d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d121      	bne.n	8003a2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <I2SEx_TxISR_I2SExt+0x90>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <I2SEx_TxISR_I2SExt+0x50>
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <I2SEx_TxISR_I2SExt+0x94>)
 80039f6:	e001      	b.n	80039fc <I2SEx_TxISR_I2SExt+0x54>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	490d      	ldr	r1, [pc, #52]	; (8003a38 <I2SEx_TxISR_I2SExt+0x90>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d101      	bne.n	8003a0c <I2SEx_TxISR_I2SExt+0x64>
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <I2SEx_TxISR_I2SExt+0x94>)
 8003a0a:	e001      	b.n	8003a10 <I2SEx_TxISR_I2SExt+0x68>
 8003a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff81 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40003800 	.word	0x40003800
 8003a3c:	40003400 	.word	0x40003400

08003a40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68d8      	ldr	r0, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	1c99      	adds	r1, r3, #2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a58:	b282      	uxth	r2, r0
 8003a5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d113      	bne.n	8003a9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff4a 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <I2SEx_RxISR_I2SExt+0x90>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <I2SEx_RxISR_I2SExt+0x16>
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <I2SEx_RxISR_I2SExt+0x94>)
 8003ab8:	e001      	b.n	8003abe <I2SEx_RxISR_I2SExt+0x1a>
 8003aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abe:	68d8      	ldr	r0, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	1c99      	adds	r1, r3, #2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aca:	b282      	uxth	r2, r0
 8003acc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d121      	bne.n	8003b2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <I2SEx_RxISR_I2SExt+0x90>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <I2SEx_RxISR_I2SExt+0x50>
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <I2SEx_RxISR_I2SExt+0x94>)
 8003af2:	e001      	b.n	8003af8 <I2SEx_RxISR_I2SExt+0x54>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	490d      	ldr	r1, [pc, #52]	; (8003b34 <I2SEx_RxISR_I2SExt+0x90>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d101      	bne.n	8003b08 <I2SEx_RxISR_I2SExt+0x64>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <I2SEx_RxISR_I2SExt+0x94>)
 8003b06:	e001      	b.n	8003b0c <I2SEx_RxISR_I2SExt+0x68>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff03 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40003800 	.word	0x40003800
 8003b38:	40003400 	.word	0x40003400

08003b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e267      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d075      	beq.n	8003c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5a:	4b88      	ldr	r3, [pc, #544]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4b85      	ldr	r3, [pc, #532]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d112      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4b82      	ldr	r3, [pc, #520]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	4b7e      	ldr	r3, [pc, #504]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05b      	beq.n	8003c44 <HAL_RCC_OscConfig+0x108>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d157      	bne.n	8003c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e242      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x74>
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e01d      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x98>
 8003bba:	4b70      	ldr	r3, [pc, #448]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6f      	ldr	r2, [pc, #444]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6c      	ldr	r2, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bd4:	4b69      	ldr	r3, [pc, #420]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a68      	ldr	r2, [pc, #416]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a65      	ldr	r2, [pc, #404]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fabc 	bl	8001170 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fab8 	bl	8001170 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e207      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0xc0>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fd faa8 	bl	8001170 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd faa4 	bl	8001170 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e1f3      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	4b51      	ldr	r3, [pc, #324]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0xe8>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d063      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c52:	4b4a      	ldr	r3, [pc, #296]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d11c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b44      	ldr	r3, [pc, #272]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d116      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1c7      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4937      	ldr	r1, [pc, #220]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	e03a      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cac:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <HAL_RCC_OscConfig+0x244>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fa5d 	bl	8001170 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fd fa59 	bl	8001170 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1a8      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4925      	ldr	r1, [pc, #148]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCC_OscConfig+0x244>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fa3c 	bl	8001170 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fa38 	bl	8001170 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e187      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d036      	beq.n	8003d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <HAL_RCC_OscConfig+0x248>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd fa1c 	bl	8001170 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fd fa18 	bl	8001170 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e167      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x200>
 8003d5a:	e01b      	b.n	8003d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCC_OscConfig+0x248>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d62:	f7fd fa05 	bl	8001170 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e00e      	b.n	8003d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fd fa01 	bl	8001170 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d907      	bls.n	8003d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e150      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470000 	.word	0x42470000
 8003d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ea      	bne.n	8003d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8097 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b81      	ldr	r3, [pc, #516]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	4b7d      	ldr	r3, [pc, #500]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b7a      	ldr	r3, [pc, #488]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b77      	ldr	r3, [pc, #476]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d118      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4b74      	ldr	r3, [pc, #464]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a73      	ldr	r2, [pc, #460]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dea:	f7fd f9c1 	bl	8001170 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fd f9bd 	bl	8001170 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e10c      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	4b6a      	ldr	r3, [pc, #424]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x2ea>
 8003e18:	4b64      	ldr	r3, [pc, #400]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a63      	ldr	r2, [pc, #396]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	e01c      	b.n	8003e60 <HAL_RCC_OscConfig+0x324>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x30c>
 8003e2e:	4b5f      	ldr	r3, [pc, #380]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a5e      	ldr	r2, [pc, #376]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	4b5c      	ldr	r3, [pc, #368]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0x324>
 8003e48:	4b58      	ldr	r3, [pc, #352]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a57      	ldr	r2, [pc, #348]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	4b55      	ldr	r3, [pc, #340]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a54      	ldr	r2, [pc, #336]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fd f982 	bl	8001170 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd f97e 	bl	8001170 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0cb      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	4b49      	ldr	r3, [pc, #292]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ee      	beq.n	8003e70 <HAL_RCC_OscConfig+0x334>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e94:	f7fd f96c 	bl	8001170 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fd f968 	bl	8001170 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e0b5      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ee      	bne.n	8003e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	4a38      	ldr	r2, [pc, #224]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80a1 	beq.w	800401c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eda:	4b34      	ldr	r3, [pc, #208]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d05c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d141      	bne.n	8003f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd f93c 	bl	8001170 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fd f938 	bl	8001170 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e087      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	3b01      	subs	r3, #1
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	491b      	ldr	r1, [pc, #108]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fd f911 	bl	8001170 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fd f90d 	bl	8001170 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e05c      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x416>
 8003f70:	e054      	b.n	800401c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd f8fa 	bl	8001170 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd f8f6 	bl	8001170 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e045      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x444>
 8003f9e:	e03d      	b.n	800401c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e038      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x4ec>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d028      	beq.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d121      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d11a      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cc      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d90c      	bls.n	8004068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b8      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800408a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004098:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a52      	ldr	r2, [pc, #328]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	494d      	ldr	r1, [pc, #308]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d044      	beq.n	800414c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d119      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e067      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800411c:	f7fd f828 	bl	8001170 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fd f824 	bl	8001170 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d20c      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e032      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4916      	ldr	r1, [pc, #88]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b2:	f000 f821 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	490a      	ldr	r1, [pc, #40]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	5ccb      	ldrb	r3, [r1, r3]
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fc ff88 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023c00 	.word	0x40023c00
 80041e8:	40023800 	.word	0x40023800
 80041ec:	08008d98 	.word	0x08008d98
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041fc:	b094      	sub	sp, #80	; 0x50
 80041fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
 8004204:	2300      	movs	r3, #0
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004208:	2300      	movs	r3, #0
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004210:	4b79      	ldr	r3, [pc, #484]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d00d      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x40>
 800421c:	2b08      	cmp	r3, #8
 800421e:	f200 80e1 	bhi.w	80043e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x34>
 8004226:	2b04      	cmp	r3, #4
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x3a>
 800422a:	e0db      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCC_GetSysClockFreq+0x204>)
 800422e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004230:	e0db      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004232:	4b73      	ldr	r3, [pc, #460]	; (8004400 <HAL_RCC_GetSysClockFreq+0x208>)
 8004234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004236:	e0d8      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4b6f      	ldr	r3, [pc, #444]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004242:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d063      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	4b6a      	ldr	r3, [pc, #424]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	2200      	movs	r2, #0
 8004256:	63bb      	str	r3, [r7, #56]	; 0x38
 8004258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
 8004262:	2300      	movs	r3, #0
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
 8004266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	f04f 0000 	mov.w	r0, #0
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	0159      	lsls	r1, r3, #5
 8004278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800427c:	0150      	lsls	r0, r2, #5
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4621      	mov	r1, r4
 8004284:	1a51      	subs	r1, r2, r1
 8004286:	6139      	str	r1, [r7, #16]
 8004288:	4629      	mov	r1, r5
 800428a:	eb63 0301 	sbc.w	r3, r3, r1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800429c:	4659      	mov	r1, fp
 800429e:	018b      	lsls	r3, r1, #6
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a6:	4651      	mov	r1, sl
 80042a8:	018a      	lsls	r2, r1, #6
 80042aa:	4651      	mov	r1, sl
 80042ac:	ebb2 0801 	subs.w	r8, r2, r1
 80042b0:	4659      	mov	r1, fp
 80042b2:	eb63 0901 	sbc.w	r9, r3, r1
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ca:	4690      	mov	r8, r2
 80042cc:	4699      	mov	r9, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	eb18 0303 	adds.w	r3, r8, r3
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	462b      	mov	r3, r5
 80042d8:	eb49 0303 	adc.w	r3, r9, r3
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ea:	4629      	mov	r1, r5
 80042ec:	024b      	lsls	r3, r1, #9
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f4:	4621      	mov	r1, r4
 80042f6:	024a      	lsls	r2, r1, #9
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fe:	2200      	movs	r2, #0
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
 8004302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004308:	f7fb ffb2 	bl	8000270 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004314:	e058      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b38      	ldr	r3, [pc, #224]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	2200      	movs	r2, #0
 800431e:	4618      	mov	r0, r3
 8004320:	4611      	mov	r1, r2
 8004322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	0159      	lsls	r1, r3, #5
 800433e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004342:	0150      	lsls	r0, r2, #5
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4641      	mov	r1, r8
 800434a:	ebb2 0a01 	subs.w	sl, r2, r1
 800434e:	4649      	mov	r1, r9
 8004350:	eb63 0b01 	sbc.w	fp, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004368:	ebb2 040a 	subs.w	r4, r2, sl
 800436c:	eb63 050b 	sbc.w	r5, r3, fp
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	00eb      	lsls	r3, r5, #3
 800437a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800437e:	00e2      	lsls	r2, r4, #3
 8004380:	4614      	mov	r4, r2
 8004382:	461d      	mov	r5, r3
 8004384:	4643      	mov	r3, r8
 8004386:	18e3      	adds	r3, r4, r3
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	464b      	mov	r3, r9
 800438c:	eb45 0303 	adc.w	r3, r5, r3
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800439e:	4629      	mov	r1, r5
 80043a0:	028b      	lsls	r3, r1, #10
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a8:	4621      	mov	r1, r4
 80043aa:	028a      	lsls	r2, r1, #10
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b2:	2200      	movs	r2, #0
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	61fa      	str	r2, [r7, #28]
 80043b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043bc:	f7fb ff58 	bl	8000270 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	3301      	adds	r3, #1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e2:	e002      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetSysClockFreq+0x204>)
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3750      	adds	r7, #80	; 0x50
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	007a1200 	.word	0x007a1200

08004404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_GetHCLKFreq+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000000 	.word	0x20000000

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004420:	f7ff fff0 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4903      	ldr	r1, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	08008da8 	.word	0x08008da8

08004444 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004468:	2b00      	cmp	r3, #0
 800446a:	d035      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800446c:	4b62      	ldr	r3, [pc, #392]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004472:	f7fc fe7d 	bl	8001170 <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004478:	e008      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800447a:	f7fc fe79 	bl	8001170 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0b0      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800448c:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	019a      	lsls	r2, r3, #6
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	071b      	lsls	r3, r3, #28
 80044a4:	4955      	ldr	r1, [pc, #340]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ac:	4b52      	ldr	r3, [pc, #328]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044b2:	f7fc fe5d 	bl	8001170 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ba:	f7fc fe59 	bl	8001170 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e090      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044cc:	4b4b      	ldr	r3, [pc, #300]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8083 	beq.w	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	4b44      	ldr	r3, [pc, #272]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	4a43      	ldr	r2, [pc, #268]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f4:	6413      	str	r3, [r2, #64]	; 0x40
 80044f6:	4b41      	ldr	r3, [pc, #260]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a3e      	ldr	r2, [pc, #248]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800450e:	f7fc fe2f 	bl	8001170 <HAL_GetTick>
 8004512:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004516:	f7fc fe2b 	bl	8001170 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e062      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004534:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02f      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	429a      	cmp	r2, r3
 8004550:	d028      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004568:	4a24      	ldr	r2, [pc, #144]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d114      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800457a:	f7fc fdf9 	bl	8001170 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fc fdf5 	bl	8001170 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e02a      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ee      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b0:	d10d      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	490d      	ldr	r1, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]
 80045cc:	e005      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045d8:	6093      	str	r3, [r2, #8]
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e6:	4905      	ldr	r1, [pc, #20]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	42470068 	.word	0x42470068
 80045fc:	40023800 	.word	0x40023800
 8004600:	40007000 	.word	0x40007000
 8004604:	42470e40 	.word	0x42470e40

08004608 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d13e      	bne.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d12f      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800463e:	617b      	str	r3, [r7, #20]
          break;
 8004640:	e02f      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800464e:	d108      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e007      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004662:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	fb02 f303 	mul.w	r3, r2, r3
 8004684:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468c:	0f1b      	lsrs	r3, r3, #28
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]
          break;
 800469a:	e002      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
          break;
 80046a0:	bf00      	nop
        }
      }
      break;
 80046a2:	bf00      	nop
    }
  }
  return frequency;
 80046a4:	697b      	ldr	r3, [r7, #20]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800
 80046b8:	00bb8000 	.word	0x00bb8000
 80046bc:	007a1200 	.word	0x007a1200
 80046c0:	00f42400 	.word	0x00f42400

080046c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07b      	b.n	80047ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e6:	d009      	beq.n	80046fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	61da      	str	r2, [r3, #28]
 80046ee:	e005      	b.n	80046fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc fb3c 	bl	8000d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	ea42 0103 	orr.w	r1, r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	f003 0104 	and.w	r1, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	f003 0210 	and.w	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e041      	b.n	800486c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fc fc05 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f000 f95d 	bl	8004ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d001      	beq.n	800488c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e046      	b.n	800491a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_TIM_Base_Start+0xb4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d022      	beq.n	80048e4 <HAL_TIM_Base_Start+0x70>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d01d      	beq.n	80048e4 <HAL_TIM_Base_Start+0x70>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_TIM_Base_Start+0xb8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_TIM_Base_Start+0x70>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <HAL_TIM_Base_Start+0xbc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_TIM_Base_Start+0x70>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_TIM_Base_Start+0xc0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start+0x70>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_TIM_Base_Start+0xc4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start+0x70>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_TIM_Base_Start+0xc8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start+0x70>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_TIM_Base_Start+0xcc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d010      	beq.n	8004918 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e007      	b.n	8004918 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40010400 	.word	0x40010400
 800493c:	40014000 	.word	0x40014000
 8004940:	40001800 	.word	0x40001800

08004944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIM_ConfigClockSource+0x1c>
 800495c:	2302      	movs	r3, #2
 800495e:	e0b4      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x186>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800497e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	d03e      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0xd4>
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	f200 8087 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	f000 8086 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x172>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d87f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b70      	cmp	r3, #112	; 0x70
 80049b2:	d01a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xa6>
 80049b4:	2b70      	cmp	r3, #112	; 0x70
 80049b6:	d87b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d050      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x11a>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d877      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d03c      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0xfa>
 80049c4:	2b50      	cmp	r3, #80	; 0x50
 80049c6:	d873      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d058      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x13a>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d86f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d064      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d86b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d060      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d867      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05c      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d05a      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049e8:	e062      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f000 f985 	bl	8004d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	609a      	str	r2, [r3, #8]
      break;
 8004a16:	e04f      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f000 f96e 	bl	8004d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e03c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 f8e2 	bl	8004c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2150      	movs	r1, #80	; 0x50
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f93b 	bl	8004cd2 <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e02c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 f901 	bl	8004c72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2160      	movs	r1, #96	; 0x60
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f92b 	bl	8004cd2 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e01c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 f8c2 	bl	8004c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f91b 	bl	8004cd2 <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e00c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f000 f912 	bl	8004cd2 <TIM_ITRx_SetConfig>
      break;
 8004aae:	e003      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab4:	e000      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a40      	ldr	r2, [pc, #256]	; (8004be8 <TIM_Base_SetConfig+0x114>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d00f      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3d      	ldr	r2, [pc, #244]	; (8004bec <TIM_Base_SetConfig+0x118>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00b      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3c      	ldr	r2, [pc, #240]	; (8004bf0 <TIM_Base_SetConfig+0x11c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d007      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a3b      	ldr	r2, [pc, #236]	; (8004bf4 <TIM_Base_SetConfig+0x120>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3a      	ldr	r2, [pc, #232]	; (8004bf8 <TIM_Base_SetConfig+0x124>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d108      	bne.n	8004b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2f      	ldr	r2, [pc, #188]	; (8004be8 <TIM_Base_SetConfig+0x114>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02b      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d027      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <TIM_Base_SetConfig+0x118>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d023      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <TIM_Base_SetConfig+0x11c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01f      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <TIM_Base_SetConfig+0x120>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01b      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <TIM_Base_SetConfig+0x124>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d017      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a28      	ldr	r2, [pc, #160]	; (8004bfc <TIM_Base_SetConfig+0x128>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <TIM_Base_SetConfig+0x12c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00f      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <TIM_Base_SetConfig+0x130>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <TIM_Base_SetConfig+0x134>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d007      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <TIM_Base_SetConfig+0x138>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a23      	ldr	r2, [pc, #140]	; (8004c10 <TIM_Base_SetConfig+0x13c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d108      	bne.n	8004b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <TIM_Base_SetConfig+0x114>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_Base_SetConfig+0xf8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <TIM_Base_SetConfig+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d103      	bne.n	8004bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	615a      	str	r2, [r3, #20]
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40010400 	.word	0x40010400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800
 8004c08:	40001800 	.word	0x40001800
 8004c0c:	40001c00 	.word	0x40001c00
 8004c10:	40002000 	.word	0x40002000

08004c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 030a 	bic.w	r3, r3, #10
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0210 	bic.w	r2, r3, #16
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	031b      	lsls	r3, r3, #12
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f043 0307 	orr.w	r3, r3, #7
 8004cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	021a      	lsls	r2, r3, #8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e05a      	b.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d022      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dac:	d01d      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d018      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00e      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a15      	ldr	r2, [pc, #84]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d10c      	bne.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40001800 	.word	0x40001800

08004e40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e40:	b084      	sub	sp, #16
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	f107 001c 	add.w	r0, r7, #28
 8004e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d122      	bne.n	8004e9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d105      	bne.n	8004e92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9c0 	bl	8005218 <USB_CoreReset>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]
 8004e9c:	e01a      	b.n	8004ed4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9b4 	bl	8005218 <USB_CoreReset>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec6:	e005      	b.n	8004ed4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10b      	bne.n	8004ef2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f043 0206 	orr.w	r2, r3, #6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004efe:	b004      	add	sp, #16
 8004f00:	4770      	bx	lr

08004f02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f023 0201 	bic.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d115      	bne.n	8004f94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f74:	2001      	movs	r0, #1
 8004f76:	f7fc f907 	bl	8001188 <HAL_Delay>
      ms++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f93a 	bl	80051fa <USB_GetMode>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d01e      	beq.n	8004fca <USB_SetCurrentMode+0x84>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b31      	cmp	r3, #49	; 0x31
 8004f90:	d9f0      	bls.n	8004f74 <USB_SetCurrentMode+0x2e>
 8004f92:	e01a      	b.n	8004fca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d115      	bne.n	8004fc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f7fc f8ee 	bl	8001188 <HAL_Delay>
      ms++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f921 	bl	80051fa <USB_GetMode>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <USB_SetCurrentMode+0x84>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b31      	cmp	r3, #49	; 0x31
 8004fc2:	d9f0      	bls.n	8004fa6 <USB_SetCurrentMode+0x60>
 8004fc4:	e001      	b.n	8004fca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e005      	b.n	8004fd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b32      	cmp	r3, #50	; 0x32
 8004fce:	d101      	bne.n	8004fd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <USB_FlushTxFifo+0x64>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e01b      	b.n	8005038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	daf2      	bge.n	8004fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	019b      	lsls	r3, r3, #6
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <USB_FlushTxFifo+0x64>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e006      	b.n	8005038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d0f0      	beq.n	8005018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	00030d40 	.word	0x00030d40

08005048 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <USB_FlushRxFifo+0x5c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e018      	b.n	8005098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	daf2      	bge.n	8005054 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2210      	movs	r2, #16
 8005076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <USB_FlushRxFifo+0x5c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e006      	b.n	8005098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b10      	cmp	r3, #16
 8005094:	d0f0      	beq.n	8005078 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	00030d40 	.word	0x00030d40

080050a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	460b      	mov	r3, r1
 80050b8:	71fb      	strb	r3, [r7, #7]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d123      	bne.n	8005116 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050ce:	88bb      	ldrh	r3, [r7, #4]
 80050d0:	3303      	adds	r3, #3
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e018      	b.n	800510e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	031a      	lsls	r2, r3, #12
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e8:	461a      	mov	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3301      	adds	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	3301      	adds	r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d3e2      	bcc.n	80050dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3724      	adds	r7, #36	; 0x24
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005124:	b480      	push	{r7}
 8005126:	b08b      	sub	sp, #44	; 0x2c
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	b29b      	uxth	r3, r3
 8005140:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	e014      	b.n	800517a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	601a      	str	r2, [r3, #0]
    pDest++;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	3301      	adds	r3, #1
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	3301      	adds	r3, #1
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	3301      	adds	r3, #1
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	3301      	adds	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	3301      	adds	r3, #1
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	429a      	cmp	r2, r3
 8005180:	d3e6      	bcc.n	8005150 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005182:	8bfb      	ldrh	r3, [r7, #30]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01e      	beq.n	80051c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005192:	461a      	mov	r2, r3
 8005194:	f107 0310 	add.w	r3, r7, #16
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	701a      	strb	r2, [r3, #0]
      i++;
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	3301      	adds	r3, #1
 80051b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	3301      	adds	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051ba:	8bfb      	ldrh	r3, [r7, #30]
 80051bc:	3b01      	subs	r3, #1
 80051be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051c0:	8bfb      	ldrh	r3, [r7, #30]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ea      	bne.n	800519c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	372c      	adds	r7, #44	; 0x2c
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0301 	and.w	r3, r3, #1
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a13      	ldr	r2, [pc, #76]	; (800527c <USB_CoreReset+0x64>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e01b      	b.n	800526e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	daf2      	bge.n	8005224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <USB_CoreReset+0x64>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e006      	b.n	800526e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d0f0      	beq.n	800524e <USB_CoreReset+0x36>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	00030d40 	.word	0x00030d40

08005280 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005280:	b084      	sub	sp, #16
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800528e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a0:	461a      	mov	r2, r3
 80052a2:	2300      	movs	r3, #0
 80052a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d018      	beq.n	8005308 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10a      	bne.n	80052f2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ea:	f043 0304 	orr.w	r3, r3, #4
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e014      	b.n	800531c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005300:	f023 0304 	bic.w	r3, r3, #4
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e009      	b.n	800531c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005316:	f023 0304 	bic.w	r3, r3, #4
 800531a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800531c:	2110      	movs	r1, #16
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fe5e 	bl	8004fe0 <USB_FlushTxFifo>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fe8a 	bl	8005048 <USB_FlushRxFifo>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e015      	b.n	8005370 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 33ff 	mov.w	r3, #4294967295
 8005356:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	3301      	adds	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d3e5      	bcc.n	8005344 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <USB_HostInit+0x16c>)
 800539e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <USB_HostInit+0x170>)
 80053a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053a8:	e009      	b.n	80053be <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2280      	movs	r2, #128	; 0x80
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <USB_HostInit+0x174>)
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a0f      	ldr	r2, [pc, #60]	; (80053f8 <USB_HostInit+0x178>)
 80053ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f043 0210 	orr.w	r2, r3, #16
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <USB_HostInit+0x17c>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053e8:	b004      	add	sp, #16
 80053ea:	4770      	bx	lr
 80053ec:	01000200 	.word	0x01000200
 80053f0:	00e00300 	.word	0x00e00300
 80053f4:	00600080 	.word	0x00600080
 80053f8:	004000e0 	.word	0x004000e0
 80053fc:	a3200008 	.word	0xa3200008

08005400 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d107      	bne.n	8005452 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005448:	461a      	mov	r2, r3
 800544a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800544e:	6053      	str	r3, [r2, #4]
 8005450:	e009      	b.n	8005466 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d106      	bne.n	8005466 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	461a      	mov	r2, r3
 8005460:	f241 7370 	movw	r3, #6000	; 0x1770
 8005464:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005494:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800549e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054a4:	2064      	movs	r0, #100	; 0x64
 80054a6:	f7fb fe6f 	bl	8001188 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054b8:	200a      	movs	r0, #10
 80054ba:	f7fb fe65 	bl	8001188 <HAL_Delay>

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <USB_DriveVbus+0x44>
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d106      	bne.n	800550c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800550a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	d109      	bne.n	800552c <USB_DriveVbus+0x64>
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	0c5b      	lsrs	r3, r3, #17
 8005558:	f003 0303 	and.w	r3, r3, #3
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	b29b      	uxth	r3, r3
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	4608      	mov	r0, r1
 8005596:	4611      	mov	r1, r2
 8005598:	461a      	mov	r2, r3
 800559a:	4603      	mov	r3, r0
 800559c:	70fb      	strb	r3, [r7, #3]
 800559e:	460b      	mov	r3, r1
 80055a0:	70bb      	strb	r3, [r7, #2]
 80055a2:	4613      	mov	r3, r2
 80055a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ba:	461a      	mov	r2, r3
 80055bc:	f04f 33ff 	mov.w	r3, #4294967295
 80055c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d87e      	bhi.n	80056c8 <USB_HC_Init+0x13c>
 80055ca:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <USB_HC_Init+0x44>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055e1 	.word	0x080055e1
 80055d4:	0800568b 	.word	0x0800568b
 80055d8:	080055e1 	.word	0x080055e1
 80055dc:	0800564d 	.word	0x0800564d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ec:	461a      	mov	r2, r3
 80055ee:	f240 439d 	movw	r3, #1181	; 0x49d
 80055f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da10      	bge.n	800561e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4413      	add	r3, r2
 8005604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	440a      	add	r2, r1
 8005612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800561c:	e057      	b.n	80056ce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d051      	beq.n	80056ce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	440a      	add	r2, r1
 8005640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005644:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005648:	60d3      	str	r3, [r2, #12]
      break;
 800564a:	e040      	b.n	80056ce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005658:	461a      	mov	r2, r3
 800565a:	f240 639d 	movw	r3, #1693	; 0x69d
 800565e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005660:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005664:	2b00      	cmp	r3, #0
 8005666:	da34      	bge.n	80056d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	440a      	add	r2, r1
 800567e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005686:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005688:	e023      	b.n	80056d2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005696:	461a      	mov	r2, r3
 8005698:	f240 2325 	movw	r3, #549	; 0x225
 800569c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800569e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da17      	bge.n	80056d6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056c6:	e006      	b.n	80056d6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	77fb      	strb	r3, [r7, #31]
      break;
 80056cc:	e004      	b.n	80056d8 <USB_HC_Init+0x14c>
      break;
 80056ce:	bf00      	nop
 80056d0:	e002      	b.n	80056d8 <USB_HC_Init+0x14c>
      break;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <USB_HC_Init+0x14c>
      break;
 80056d6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f2:	f043 0302 	orr.w	r3, r3, #2
 80056f6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fe:	699a      	ldr	r2, [r3, #24]
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	6939      	ldr	r1, [r7, #16]
 800570e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005712:	4313      	orrs	r3, r2
 8005714:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005722:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005726:	2b00      	cmp	r3, #0
 8005728:	da03      	bge.n	8005732 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e001      	b.n	8005736 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff feff 	bl	800553a <USB_GetHostSpeed>
 800573c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800573e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005742:	2b02      	cmp	r3, #2
 8005744:	d106      	bne.n	8005754 <USB_HC_Init+0x1c8>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d003      	beq.n	8005754 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800574c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e001      	b.n	8005758 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005758:	787b      	ldrb	r3, [r7, #1]
 800575a:	059b      	lsls	r3, r3, #22
 800575c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005760:	78bb      	ldrb	r3, [r7, #2]
 8005762:	02db      	lsls	r3, r3, #11
 8005764:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005768:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800576a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800576e:	049b      	lsls	r3, r3, #18
 8005770:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005774:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005776:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005778:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800577c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	0159      	lsls	r1, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	440b      	add	r3, r1
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005794:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005796:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800579a:	2b03      	cmp	r3, #3
 800579c:	d003      	beq.n	80057a6 <USB_HC_Init+0x21a>
 800579e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d10f      	bne.n	80057c6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08c      	sub	sp, #48	; 0x30
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80057e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d02d      	beq.n	8005856 <USB_HC_StartXfer+0x86>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	791b      	ldrb	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d129      	bne.n	8005856 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d117      	bne.n	8005838 <USB_HC_StartXfer+0x68>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	79db      	ldrb	r3, [r3, #7]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <USB_HC_StartXfer+0x48>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	79db      	ldrb	r3, [r3, #7]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d10f      	bne.n	8005838 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	6a3a      	ldr	r2, [r7, #32]
 800582c:	440a      	add	r2, r1
 800582e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <USB_HC_StartXfer+0x86>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	795b      	ldrb	r3, [r3, #5]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d107      	bne.n	8005856 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	4619      	mov	r1, r3
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fa0f 	bl	8005c70 <USB_DoPing>
      return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e0f8      	b.n	8005a48 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	8912      	ldrh	r2, [r2, #8]
 8005866:	4413      	add	r3, r2
 8005868:	3b01      	subs	r3, #1
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	8912      	ldrh	r2, [r2, #8]
 800586e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005872:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005874:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005876:	8b7b      	ldrh	r3, [r7, #26]
 8005878:	429a      	cmp	r2, r3
 800587a:	d90b      	bls.n	8005894 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800587c:	8b7b      	ldrh	r3, [r7, #26]
 800587e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	8912      	ldrh	r2, [r2, #8]
 8005886:	fb03 f202 	mul.w	r2, r3, r2
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	611a      	str	r2, [r3, #16]
 800588e:	e001      	b.n	8005894 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005890:	2301      	movs	r3, #1
 8005892:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	78db      	ldrb	r3, [r3, #3]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800589c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	8912      	ldrh	r2, [r2, #8]
 80058a2:	fb03 f202 	mul.w	r2, r3, r2
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	611a      	str	r2, [r3, #16]
 80058aa:	e003      	b.n	80058b4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058be:	04d9      	lsls	r1, r3, #19
 80058c0:	4b63      	ldr	r3, [pc, #396]	; (8005a50 <USB_HC_StartXfer+0x280>)
 80058c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	7a9b      	ldrb	r3, [r3, #10]
 80058ca:	075b      	lsls	r3, r3, #29
 80058cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	0148      	lsls	r0, r1, #5
 80058d4:	6a39      	ldr	r1, [r7, #32]
 80058d6:	4401      	add	r1, r0
 80058d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	460a      	mov	r2, r1
 80058f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	6a3a      	ldr	r2, [r7, #32]
 8005926:	440a      	add	r2, r1
 8005928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800592c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005930:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	7e7b      	ldrb	r3, [r7, #25]
 8005942:	075b      	lsls	r3, r3, #29
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	0148      	lsls	r0, r1, #5
 8005948:	6a39      	ldr	r1, [r7, #32]
 800594a:	4401      	add	r1, r0
 800594c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800596a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	78db      	ldrb	r3, [r3, #3]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	e003      	b.n	8005986 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005984:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800598c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	461a      	mov	r2, r3
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	e04e      	b.n	8005a48 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	78db      	ldrb	r3, [r3, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d149      	bne.n	8005a46 <USB_HC_StartXfer+0x276>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d045      	beq.n	8005a46 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	79db      	ldrb	r3, [r3, #7]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d830      	bhi.n	8005a24 <USB_HC_StartXfer+0x254>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <USB_HC_StartXfer+0x1f8>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059d9 	.word	0x080059d9
 80059cc:	080059fd 	.word	0x080059fd
 80059d0:	080059d9 	.word	0x080059d9
 80059d4:	080059fd 	.word	0x080059fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	3303      	adds	r3, #3
 80059de:	089b      	lsrs	r3, r3, #2
 80059e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059e2:	8afa      	ldrh	r2, [r7, #22]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d91c      	bls.n	8005a28 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80059fa:	e015      	b.n	8005a28 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	3303      	adds	r3, #3
 8005a02:	089b      	lsrs	r3, r3, #2
 8005a04:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a06:	8afa      	ldrh	r2, [r7, #22]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d90a      	bls.n	8005a2c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a22:	e003      	b.n	8005a2c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a24:	bf00      	nop
 8005a26:	e002      	b.n	8005a2e <USB_HC_StartXfer+0x25e>
        break;
 8005a28:	bf00      	nop
 8005a2a:	e000      	b.n	8005a2e <USB_HC_StartXfer+0x25e>
        break;
 8005a2c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	68d9      	ldr	r1, [r3, #12]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	785a      	ldrb	r2, [r3, #1]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	9000      	str	r0, [sp, #0]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f7ff fb31 	bl	80050a8 <USB_WritePacket>
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3728      	adds	r7, #40	; 0x28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	1ff80000 	.word	0x1ff80000

08005a54 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	b29b      	uxth	r3, r3
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b089      	sub	sp, #36	; 0x24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	0c9b      	lsrs	r3, r3, #18
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	0fdb      	lsrs	r3, r3, #31
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d104      	bne.n	8005ad0 <USB_HC_Halt+0x5a>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e0c8      	b.n	8005c62 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <USB_HC_Halt+0x66>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d163      	bne.n	8005ba4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f040 80ab 	bne.w	8005c60 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d133      	bne.n	8005b7e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b34:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b54:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b62:	d81d      	bhi.n	8005ba0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7a:	d0ec      	beq.n	8005b56 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b7c:	e070      	b.n	8005c60 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b9c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b9e:	e05f      	b.n	8005c60 <USB_HC_Halt+0x1ea>
            break;
 8005ba0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba2:	e05d      	b.n	8005c60 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d133      	bne.n	8005c3c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c20:	d81d      	bhi.n	8005c5e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d0ec      	beq.n	8005c14 <USB_HC_Halt+0x19e>
 8005c3a:	e011      	b.n	8005c60 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e000      	b.n	8005c60 <USB_HC_Halt+0x1ea>
          break;
 8005c5e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c84:	2301      	movs	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	04da      	lsls	r2, r3, #19
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <USB_DoPing+0x74>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cb8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	1ff80000 	.word	0x1ff80000

08005ce8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff f911 	bl	8004f24 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d02:	2110      	movs	r1, #16
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff f96b 	bl	8004fe0 <USB_FlushTxFifo>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff f997 	bl	8005048 <USB_FlushRxFifo>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e01f      	b.n	8005d6a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	461a      	mov	r2, r3
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b0f      	cmp	r3, #15
 8005d6e:	d9dc      	bls.n	8005d2a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	e034      	b.n	8005de0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005daa:	461a      	mov	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dbc:	d80c      	bhi.n	8005dd8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd4:	d0ec      	beq.n	8005db0 <USB_StopHost+0xc8>
 8005dd6:	e000      	b.n	8005dda <USB_StopHost+0xf2>
        break;
 8005dd8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	d9c7      	bls.n	8005d76 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dec:	461a      	mov	r2, r3
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295
 8005df2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff f880 	bl	8004f02 <USB_EnableGlobalInt>

  return ret;
 8005e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af04      	add	r7, sp, #16
 8005e12:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e14:	2301      	movs	r3, #1
 8005e16:	2202      	movs	r2, #2
 8005e18:	2102      	movs	r1, #2
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fc66 	bl	80066ec <USBH_FindInterface>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2bff      	cmp	r3, #255	; 0xff
 8005e28:	d002      	beq.n	8005e30 <USBH_CDC_InterfaceInit+0x24>
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d901      	bls.n	8005e34 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e13d      	b.n	80060b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fc3b 	bl	80066b4 <USBH_SelectInterface>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e42:	7bbb      	ldrb	r3, [r7, #14]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e131      	b.n	80060b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e52:	2050      	movs	r0, #80	; 0x50
 8005e54:	f002 fafa 	bl	800844c <malloc>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e11f      	b.n	80060b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e70:	2250      	movs	r2, #80	; 0x50
 8005e72:	2100      	movs	r1, #0
 8005e74:	68b8      	ldr	r0, [r7, #8]
 8005e76:	f002 faf9 	bl	800846c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	211a      	movs	r1, #26
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b25b      	sxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da15      	bge.n	8005ebe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	211a      	movs	r1, #26
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ea2:	781a      	ldrb	r2, [r3, #0]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	211a      	movs	r1, #26
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 ff2c 	bl	8007d22 <USBH_AllocPipe>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	7819      	ldrb	r1, [r3, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	7858      	ldrb	r0, [r3, #1]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	8952      	ldrh	r2, [r2, #10]
 8005eea:	9202      	str	r2, [sp, #8]
 8005eec:	2203      	movs	r2, #3
 8005eee:	9201      	str	r2, [sp, #4]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fee4 	bl	8007cc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2200      	movs	r2, #0
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 f9f3 	bl	80082f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	210a      	movs	r1, #10
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fbeb 	bl	80066ec <USBH_FindInterface>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2bff      	cmp	r3, #255	; 0xff
 8005f1e:	d002      	beq.n	8005f26 <USBH_CDC_InterfaceInit+0x11a>
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d901      	bls.n	8005f2a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f26:	2302      	movs	r3, #2
 8005f28:	e0c2      	b.n	80060b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	211a      	movs	r1, #26
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da16      	bge.n	8005f70 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	211a      	movs	r1, #26
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f52:	781a      	ldrb	r2, [r3, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	211a      	movs	r1, #26
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	835a      	strh	r2, [r3, #26]
 8005f6e:	e015      	b.n	8005f9c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	211a      	movs	r1, #26
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f80:	781a      	ldrb	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	211a      	movs	r1, #26
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f96:	881a      	ldrh	r2, [r3, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	211a      	movs	r1, #26
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	da16      	bge.n	8005fe2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	211a      	movs	r1, #26
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fc4:	781a      	ldrb	r2, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	211a      	movs	r1, #26
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fda:	881a      	ldrh	r2, [r3, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	835a      	strh	r2, [r3, #26]
 8005fe0:	e015      	b.n	800600e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	211a      	movs	r1, #26
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	211a      	movs	r1, #26
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006008:	881a      	ldrh	r2, [r3, #0]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	7b9b      	ldrb	r3, [r3, #14]
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fe84 	bl	8007d22 <USBH_AllocPipe>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	7bdb      	ldrb	r3, [r3, #15]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 fe7a 	bl	8007d22 <USBH_AllocPipe>
 800602e:	4603      	mov	r3, r0
 8006030:	461a      	mov	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7b59      	ldrb	r1, [r3, #13]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	7b98      	ldrb	r0, [r3, #14]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	8b12      	ldrh	r2, [r2, #24]
 800604e:	9202      	str	r2, [sp, #8]
 8006050:	2202      	movs	r2, #2
 8006052:	9201      	str	r2, [sp, #4]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	4623      	mov	r3, r4
 8006058:	4602      	mov	r2, r0
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fe32 	bl	8007cc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	7b19      	ldrb	r1, [r3, #12]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	7bd8      	ldrb	r0, [r3, #15]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	8b52      	ldrh	r2, [r2, #26]
 8006078:	9202      	str	r2, [sp, #8]
 800607a:	2202      	movs	r2, #2
 800607c:	9201      	str	r2, [sp, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	4623      	mov	r3, r4
 8006082:	4602      	mov	r2, r0
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fe1d 	bl	8007cc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	7b5b      	ldrb	r3, [r3, #13]
 8006096:	2200      	movs	r2, #0
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f002 f928 	bl	80082f0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	7b1b      	ldrb	r3, [r3, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f002 f921 	bl	80082f0 <USBH_LL_SetToggle>

  return USBH_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd90      	pop	{r4, r7, pc}

080060b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00e      	beq.n	80060f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fe12 	bl	8007d02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fe3d 	bl	8007d64 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	7b1b      	ldrb	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00e      	beq.n	8006116 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	7b1b      	ldrb	r3, [r3, #12]
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fdff 	bl	8007d02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	7b1b      	ldrb	r3, [r3, #12]
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 fe2a 	bl	8007d64 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	7b5b      	ldrb	r3, [r3, #13]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00e      	beq.n	800613c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	7b5b      	ldrb	r3, [r3, #13]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fdec 	bl	8007d02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	7b5b      	ldrb	r3, [r3, #13]
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 fe17 	bl	8007d64 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	4618      	mov	r0, r3
 8006152:	f002 f983 	bl	800845c <free>
    phost->pActiveClass->pData = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800615c:	2200      	movs	r2, #0
 800615e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3340      	adds	r3, #64	; 0x40
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8b1 	bl	80062ea <GetLineCoding>
 8006188:	4603      	mov	r3, r0
 800618a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800618c:	7afb      	ldrb	r3, [r7, #11]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d105      	bne.n	800619e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006198:	2102      	movs	r1, #2
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800619e:	7afb      	ldrb	r3, [r7, #11]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d877      	bhi.n	80062bc <USBH_CDC_Process+0x114>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <USBH_CDC_Process+0x2c>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	080061e9 	.word	0x080061e9
 80061d8:	080061ef 	.word	0x080061ef
 80061dc:	0800621f 	.word	0x0800621f
 80061e0:	08006293 	.word	0x08006293
 80061e4:	080062a1 	.word	0x080062a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e06d      	b.n	80062ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f897 	bl	8006328 <SetLineCoding>
 80061fa:	4603      	mov	r3, r0
 80061fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d104      	bne.n	800620e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800620c:	e058      	b.n	80062c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d055      	beq.n	80062c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2204      	movs	r2, #4
 8006218:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800621c:	e050      	b.n	80062c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	3340      	adds	r3, #64	; 0x40
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f860 	bl	80062ea <GetLineCoding>
 800622a:	4603      	mov	r3, r0
 800622c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d126      	bne.n	8006282 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006246:	791b      	ldrb	r3, [r3, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	d13b      	bne.n	80062c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006256:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006258:	429a      	cmp	r2, r3
 800625a:	d133      	bne.n	80062c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006266:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006268:	429a      	cmp	r2, r3
 800626a:	d12b      	bne.n	80062c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006274:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006276:	429a      	cmp	r2, r3
 8006278:	d124      	bne.n	80062c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f958 	bl	8006530 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006280:	e020      	b.n	80062c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d01d      	beq.n	80062c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2204      	movs	r2, #4
 800628c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006290:	e018      	b.n	80062c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f867 	bl	8006366 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f8da 	bl	8006452 <CDC_ProcessReception>
      break;
 800629e:	e014      	b.n	80062ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062a0:	2100      	movs	r1, #0
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 ffef 	bl	8007286 <USBH_ClrFeature>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062ba:	e005      	b.n	80062c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80062bc:	bf00      	nop
 80062be:	e004      	b.n	80062ca <USBH_CDC_Process+0x122>
      break;
 80062c0:	bf00      	nop
 80062c2:	e002      	b.n	80062ca <USBH_CDC_Process+0x122>
      break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <USBH_CDC_Process+0x122>
      break;
 80062c8:	bf00      	nop

  }

  return status;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	22a1      	movs	r2, #161	; 0xa1
 80062f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2221      	movs	r2, #33	; 0x21
 80062fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2207      	movs	r2, #7
 8006310:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2207      	movs	r2, #7
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 fa81 	bl	8007820 <USBH_CtlReq>
 800631e:	4603      	mov	r3, r0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2221      	movs	r2, #33	; 0x21
 8006336:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2207      	movs	r2, #7
 800634e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2207      	movs	r2, #7
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fa62 	bl	8007820 <USBH_CtlReq>
 800635c:	4603      	mov	r3, r0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af02      	add	r7, sp, #8
 800636c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006378:	2300      	movs	r3, #0
 800637a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006382:	2b01      	cmp	r3, #1
 8006384:	d002      	beq.n	800638c <CDC_ProcessTransmission+0x26>
 8006386:	2b02      	cmp	r3, #2
 8006388:	d023      	beq.n	80063d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800638a:	e05e      	b.n	800644a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	8b12      	ldrh	r2, [r2, #24]
 8006394:	4293      	cmp	r3, r2
 8006396:	d90b      	bls.n	80063b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	69d9      	ldr	r1, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8b1a      	ldrh	r2, [r3, #24]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	7b5b      	ldrb	r3, [r3, #13]
 80063a4:	2001      	movs	r0, #1
 80063a6:	9000      	str	r0, [sp, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fc48 	bl	8007c3e <USBH_BulkSendData>
 80063ae:	e00b      	b.n	80063c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	7b5b      	ldrb	r3, [r3, #13]
 80063be:	2001      	movs	r0, #1
 80063c0:	9000      	str	r0, [sp, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fc3b 	bl	8007c3e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063d0:	e03b      	b.n	800644a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	7b5b      	ldrb	r3, [r3, #13]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 ff5f 	bl	800829c <USBH_LL_GetURBState>
 80063de:	4603      	mov	r3, r0
 80063e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80063e2:	7afb      	ldrb	r3, [r7, #11]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d128      	bne.n	800643a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	8b12      	ldrh	r2, [r2, #24]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d90e      	bls.n	8006412 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	8b12      	ldrh	r2, [r2, #24]
 80063fc:	1a9a      	subs	r2, r3, r2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	8b12      	ldrh	r2, [r2, #24]
 800640a:	441a      	add	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	61da      	str	r2, [r3, #28]
 8006410:	e002      	b.n	8006418 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006428:	e00e      	b.n	8006448 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f868 	bl	8006508 <USBH_CDC_TransmitCallback>
      break;
 8006438:	e006      	b.n	8006448 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d103      	bne.n	8006448 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006448:	bf00      	nop
  }
}
 800644a:	bf00      	nop
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006464:	2300      	movs	r3, #0
 8006466:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800646e:	2b03      	cmp	r3, #3
 8006470:	d002      	beq.n	8006478 <CDC_ProcessReception+0x26>
 8006472:	2b04      	cmp	r3, #4
 8006474:	d00e      	beq.n	8006494 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006476:	e043      	b.n	8006500 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a19      	ldr	r1, [r3, #32]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	8b5a      	ldrh	r2, [r3, #26]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	7b1b      	ldrb	r3, [r3, #12]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fbff 	bl	8007c88 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2204      	movs	r2, #4
 800648e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006492:	e035      	b.n	8006500 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	7b1b      	ldrb	r3, [r3, #12]
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fefe 	bl	800829c <USBH_LL_GetURBState>
 80064a0:	4603      	mov	r3, r0
 80064a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d129      	bne.n	80064fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	7b1b      	ldrb	r3, [r3, #12]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fe61 	bl	8008178 <USBH_LL_GetLastXferSize>
 80064b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d016      	beq.n	80064f0 <CDC_ProcessReception+0x9e>
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	8b5b      	ldrh	r3, [r3, #26]
 80064c6:	461a      	mov	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d910      	bls.n	80064f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	441a      	add	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2203      	movs	r2, #3
 80064ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064ee:	e006      	b.n	80064fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f80f 	bl	800651c <USBH_CDC_ReceiveCallback>
      break;
 80064fe:	bf00      	nop
  }
}
 8006500:	bf00      	nop
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006558:	2302      	movs	r3, #2
 800655a:	e029      	b.n	80065b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	79fa      	ldrb	r2, [r7, #7]
 8006560:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f81f 	bl	80065b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f001 fd31 	bl	8008010 <USBH_LL_Init>

  return USBH_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e009      	b.n	80065de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	33e0      	adds	r3, #224	; 0xe0
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b0f      	cmp	r3, #15
 80065e2:	d9f2      	bls.n	80065ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e009      	b.n	80065fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065f4:	2200      	movs	r2, #0
 80065f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006604:	d3f1      	bcc.n	80065ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2240      	movs	r2, #64	; 0x40
 800662a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d016      	beq.n	80066a2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10e      	bne.n	800669c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	33de      	adds	r3, #222	; 0xde
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
 800669a:	e004      	b.n	80066a6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800669c:	2302      	movs	r3, #2
 800669e:	73fb      	strb	r3, [r7, #15]
 80066a0:	e001      	b.n	80066a6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066a2:	2302      	movs	r3, #2
 80066a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d204      	bcs.n	80066da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	78fa      	ldrb	r2, [r7, #3]
 80066d4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066d8:	e001      	b.n	80066de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066da:	2302      	movs	r3, #2
 80066dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	70fb      	strb	r3, [r7, #3]
 80066fe:	460b      	mov	r3, r1
 8006700:	70bb      	strb	r3, [r7, #2]
 8006702:	4613      	mov	r3, r2
 8006704:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006714:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006716:	e025      	b.n	8006764 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	221a      	movs	r2, #26
 800671c:	fb02 f303 	mul.w	r3, r2, r3
 8006720:	3308      	adds	r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	3302      	adds	r3, #2
 8006728:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	795b      	ldrb	r3, [r3, #5]
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	429a      	cmp	r2, r3
 8006732:	d002      	beq.n	800673a <USBH_FindInterface+0x4e>
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	2bff      	cmp	r3, #255	; 0xff
 8006738:	d111      	bne.n	800675e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800673e:	78ba      	ldrb	r2, [r7, #2]
 8006740:	429a      	cmp	r2, r3
 8006742:	d002      	beq.n	800674a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006744:	78bb      	ldrb	r3, [r7, #2]
 8006746:	2bff      	cmp	r3, #255	; 0xff
 8006748:	d109      	bne.n	800675e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800674e:	787a      	ldrb	r2, [r7, #1]
 8006750:	429a      	cmp	r2, r3
 8006752:	d002      	beq.n	800675a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006754:	787b      	ldrb	r3, [r7, #1]
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	d101      	bne.n	800675e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	e006      	b.n	800676c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	3301      	adds	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d9d6      	bls.n	8006718 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800676a:	23ff      	movs	r3, #255	; 0xff
}
 800676c:	4618      	mov	r0, r3
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fc81 	bl	8008088 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006786:	2101      	movs	r1, #1
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fd9a 	bl	80082c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af04      	add	r7, sp, #16
 800679e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067a0:	2302      	movs	r3, #2
 80067a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d102      	bne.n	80067ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2203      	movs	r2, #3
 80067b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b0b      	cmp	r3, #11
 80067c2:	f200 81be 	bhi.w	8006b42 <USBH_Process+0x3aa>
 80067c6:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <USBH_Process+0x34>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	0800682f 	.word	0x0800682f
 80067d4:	08006897 	.word	0x08006897
 80067d8:	08006add 	.word	0x08006add
 80067dc:	08006b43 	.word	0x08006b43
 80067e0:	0800693b 	.word	0x0800693b
 80067e4:	08006a83 	.word	0x08006a83
 80067e8:	08006971 	.word	0x08006971
 80067ec:	08006991 	.word	0x08006991
 80067f0:	080069b1 	.word	0x080069b1
 80067f4:	080069f5 	.word	0x080069f5
 80067f8:	08006ac5 	.word	0x08006ac5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 819e 	beq.w	8006b46 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006810:	20c8      	movs	r0, #200	; 0xc8
 8006812:	f001 fd9d 	bl	8008350 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fc93 	bl	8008142 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800682c:	e18b      	b.n	8006b46 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006834:	2b01      	cmp	r3, #1
 8006836:	d107      	bne.n	8006848 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006846:	e18d      	b.n	8006b64 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800684e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006852:	d914      	bls.n	800687e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800685a:	3301      	adds	r3, #1
 800685c:	b2da      	uxtb	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800686a:	2b03      	cmp	r3, #3
 800686c:	d903      	bls.n	8006876 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	220d      	movs	r2, #13
 8006872:	701a      	strb	r2, [r3, #0]
      break;
 8006874:	e176      	b.n	8006b64 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
      break;
 800687c:	e172      	b.n	8006b64 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006884:	f103 020a 	add.w	r2, r3, #10
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800688e:	200a      	movs	r0, #10
 8006890:	f001 fd5e 	bl	8008350 <USBH_Delay>
      break;
 8006894:	e166      	b.n	8006b64 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a6:	2104      	movs	r1, #4
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068ac:	2064      	movs	r0, #100	; 0x64
 80068ae:	f001 fd4f 	bl	8008350 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fc1e 	bl	80080f4 <USBH_LL_GetSpeed>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2205      	movs	r2, #5
 80068c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068c8:	2100      	movs	r1, #0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fa29 	bl	8007d22 <USBH_AllocPipe>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068d8:	2180      	movs	r1, #128	; 0x80
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fa21 	bl	8007d22 <USBH_AllocPipe>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7919      	ldrb	r1, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068fc:	b292      	uxth	r2, r2
 80068fe:	9202      	str	r2, [sp, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4603      	mov	r3, r0
 8006908:	2280      	movs	r2, #128	; 0x80
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 f9da 	bl	8007cc4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	7959      	ldrb	r1, [r3, #5]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006924:	b292      	uxth	r2, r2
 8006926:	9202      	str	r2, [sp, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	9201      	str	r2, [sp, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	4603      	mov	r3, r0
 8006930:	2200      	movs	r2, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 f9c6 	bl	8007cc4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006938:	e114      	b.n	8006b64 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f918 	bl	8006b70 <USBH_HandleEnum>
 8006940:	4603      	mov	r3, r0
 8006942:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 80fe 	bne.w	8006b4a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800695c:	2b01      	cmp	r3, #1
 800695e:	d103      	bne.n	8006968 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2208      	movs	r2, #8
 8006964:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006966:	e0f0      	b.n	8006b4a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2207      	movs	r2, #7
 800696c:	701a      	strb	r2, [r3, #0]
      break;
 800696e:	e0ec      	b.n	8006b4a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80e9 	beq.w	8006b4e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006982:	2101      	movs	r1, #1
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2208      	movs	r2, #8
 800698c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800698e:	e0de      	b.n	8006b4e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006996:	b29b      	uxth	r3, r3
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fc2c 	bl	80071f8 <USBH_SetCfg>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 80d5 	bne.w	8006b52 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2209      	movs	r2, #9
 80069ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069ae:	e0d0      	b.n	8006b52 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d016      	beq.n	80069ec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069be:	2101      	movs	r1, #1
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc3c 	bl	800723e <USBH_SetFeature>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	220a      	movs	r2, #10
 80069d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069d8:	e0bd      	b.n	8006b56 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	f040 80b9 	bne.w	8006b56 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	220a      	movs	r2, #10
 80069e8:	701a      	strb	r2, [r3, #0]
      break;
 80069ea:	e0b4      	b.n	8006b56 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	220a      	movs	r2, #10
 80069f0:	701a      	strb	r2, [r3, #0]
      break;
 80069f2:	e0b0      	b.n	8006b56 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80ad 	beq.w	8006b5a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
 8006a0c:	e016      	b.n	8006a3c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a0e:	7bfa      	ldrb	r2, [r7, #15]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	32de      	adds	r2, #222	; 0xde
 8006a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a18:	791a      	ldrb	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d108      	bne.n	8006a36 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a24:	7bfa      	ldrb	r2, [r7, #15]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	32de      	adds	r2, #222	; 0xde
 8006a2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a34:	e005      	b.n	8006a42 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0e5      	beq.n	8006a0e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d016      	beq.n	8006a7a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2206      	movs	r2, #6
 8006a62:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a6a:	2103      	movs	r1, #3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a70:	e073      	b.n	8006b5a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	220d      	movs	r2, #13
 8006a76:	701a      	strb	r2, [r3, #0]
      break;
 8006a78:	e06f      	b.n	8006b5a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	220d      	movs	r2, #13
 8006a7e:	701a      	strb	r2, [r3, #0]
      break;
 8006a80:	e06b      	b.n	8006b5a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d017      	beq.n	8006abc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d103      	bne.n	8006aac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	220b      	movs	r2, #11
 8006aa8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006aaa:	e058      	b.n	8006b5e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d154      	bne.n	8006b5e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	220d      	movs	r2, #13
 8006ab8:	701a      	strb	r2, [r3, #0]
      break;
 8006aba:	e050      	b.n	8006b5e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	220d      	movs	r2, #13
 8006ac0:	701a      	strb	r2, [r3, #0]
      break;
 8006ac2:	e04c      	b.n	8006b5e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d049      	beq.n	8006b62 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
      }
      break;
 8006ada:	e042      	b.n	8006b62 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fd67 	bl	80065b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b18:	2105      	movs	r1, #5
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d107      	bne.n	8006b3a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff fe20 	bl	8006778 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b38:	e014      	b.n	8006b64 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 faa4 	bl	8008088 <USBH_LL_Start>
      break;
 8006b40:	e010      	b.n	8006b64 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b42:	bf00      	nop
 8006b44:	e00e      	b.n	8006b64 <USBH_Process+0x3cc>
      break;
 8006b46:	bf00      	nop
 8006b48:	e00c      	b.n	8006b64 <USBH_Process+0x3cc>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e00a      	b.n	8006b64 <USBH_Process+0x3cc>
    break;
 8006b4e:	bf00      	nop
 8006b50:	e008      	b.n	8006b64 <USBH_Process+0x3cc>
      break;
 8006b52:	bf00      	nop
 8006b54:	e006      	b.n	8006b64 <USBH_Process+0x3cc>
      break;
 8006b56:	bf00      	nop
 8006b58:	e004      	b.n	8006b64 <USBH_Process+0x3cc>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <USBH_Process+0x3cc>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <USBH_Process+0x3cc>
      break;
 8006b62:	bf00      	nop
  }
  return USBH_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop

08006b70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af04      	add	r7, sp, #16
 8006b76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b07      	cmp	r3, #7
 8006b86:	f200 81c1 	bhi.w	8006f0c <USBH_HandleEnum+0x39c>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <USBH_HandleEnum+0x20>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006bb1 	.word	0x08006bb1
 8006b94:	08006c6f 	.word	0x08006c6f
 8006b98:	08006cd9 	.word	0x08006cd9
 8006b9c:	08006d67 	.word	0x08006d67
 8006ba0:	08006dd1 	.word	0x08006dd1
 8006ba4:	08006e41 	.word	0x08006e41
 8006ba8:	08006e87 	.word	0x08006e87
 8006bac:	08006ecd 	.word	0x08006ecd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bb0:	2108      	movs	r1, #8
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa50 	bl	8007058 <USBH_Get_DevDesc>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d130      	bne.n	8006c24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7919      	ldrb	r1, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006be6:	b292      	uxth	r2, r2
 8006be8:	9202      	str	r2, [sp, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	9201      	str	r2, [sp, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2280      	movs	r2, #128	; 0x80
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f865 	bl	8007cc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7959      	ldrb	r1, [r3, #5]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c0e:	b292      	uxth	r2, r2
 8006c10:	9202      	str	r2, [sp, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	9201      	str	r2, [sp, #4]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f851 	bl	8007cc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c22:	e175      	b.n	8006f10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	f040 8172 	bne.w	8006f10 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d903      	bls.n	8006c4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	220d      	movs	r2, #13
 8006c4a:	701a      	strb	r2, [r3, #0]
      break;
 8006c4c:	e160      	b.n	8006f10 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	795b      	ldrb	r3, [r3, #5]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 f885 	bl	8007d64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	791b      	ldrb	r3, [r3, #4]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 f87f 	bl	8007d64 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
      break;
 8006c6c:	e150      	b.n	8006f10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c6e:	2112      	movs	r1, #18
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f9f1 	bl	8007058 <USBH_Get_DevDesc>
 8006c76:	4603      	mov	r3, r0
 8006c78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c86:	e145      	b.n	8006f14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	f040 8142 	bne.w	8006f14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c96:	3301      	adds	r3, #1
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d903      	bls.n	8006cb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	220d      	movs	r2, #13
 8006cae:	701a      	strb	r2, [r3, #0]
      break;
 8006cb0:	e130      	b.n	8006f14 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	795b      	ldrb	r3, [r3, #5]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 f853 	bl	8007d64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	791b      	ldrb	r3, [r3, #4]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f84d 	bl	8007d64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
      break;
 8006cd6:	e11d      	b.n	8006f14 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006cd8:	2101      	movs	r1, #1
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa68 	bl	80071b0 <USBH_SetAddress>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d132      	bne.n	8006d50 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006cea:	2002      	movs	r0, #2
 8006cec:	f001 fb30 	bl	8008350 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7919      	ldrb	r1, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d12:	b292      	uxth	r2, r2
 8006d14:	9202      	str	r2, [sp, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	9201      	str	r2, [sp, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 ffcf 	bl	8007cc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7959      	ldrb	r1, [r3, #5]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	9202      	str	r2, [sp, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	9201      	str	r2, [sp, #4]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4603      	mov	r3, r0
 8006d46:	2200      	movs	r2, #0
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 ffbb 	bl	8007cc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d4e:	e0e3      	b.n	8006f18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	f040 80e0 	bne.w	8006f18 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	220d      	movs	r2, #13
 8006d5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	705a      	strb	r2, [r3, #1]
      break;
 8006d64:	e0d8      	b.n	8006f18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d66:	2109      	movs	r1, #9
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f99d 	bl	80070a8 <USBH_Get_CfgDesc>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d103      	bne.n	8006d80 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d7e:	e0cd      	b.n	8006f1c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	f040 80ca 	bne.w	8006f1c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d8e:	3301      	adds	r3, #1
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d903      	bls.n	8006daa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	220d      	movs	r2, #13
 8006da6:	701a      	strb	r2, [r3, #0]
      break;
 8006da8:	e0b8      	b.n	8006f1c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	795b      	ldrb	r3, [r3, #5]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 ffd7 	bl	8007d64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	791b      	ldrb	r3, [r3, #4]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 ffd1 	bl	8007d64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
      break;
 8006dce:	e0a5      	b.n	8006f1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f965 	bl	80070a8 <USBH_Get_CfgDesc>
 8006dde:	4603      	mov	r3, r0
 8006de0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d103      	bne.n	8006df0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2205      	movs	r2, #5
 8006dec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dee:	e097      	b.n	8006f20 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	f040 8094 	bne.w	8006f20 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dfe:	3301      	adds	r3, #1
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d903      	bls.n	8006e1a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	220d      	movs	r2, #13
 8006e16:	701a      	strb	r2, [r3, #0]
      break;
 8006e18:	e082      	b.n	8006f20 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	795b      	ldrb	r3, [r3, #5]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 ff9f 	bl	8007d64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	791b      	ldrb	r3, [r3, #4]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 ff99 	bl	8007d64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
      break;
 8006e3e:	e06f      	b.n	8006f20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d019      	beq.n	8006e7e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e56:	23ff      	movs	r3, #255	; 0xff
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f949 	bl	80070f0 <USBH_Get_StringDesc>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e6e:	e059      	b.n	8006f24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d156      	bne.n	8006f24 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2206      	movs	r2, #6
 8006e7a:	705a      	strb	r2, [r3, #1]
      break;
 8006e7c:	e052      	b.n	8006f24 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2206      	movs	r2, #6
 8006e82:	705a      	strb	r2, [r3, #1]
      break;
 8006e84:	e04e      	b.n	8006f24 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d019      	beq.n	8006ec4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e9c:	23ff      	movs	r3, #255	; 0xff
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f926 	bl	80070f0 <USBH_Get_StringDesc>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d103      	bne.n	8006eb6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006eb4:	e038      	b.n	8006f28 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d135      	bne.n	8006f28 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2207      	movs	r2, #7
 8006ec0:	705a      	strb	r2, [r3, #1]
      break;
 8006ec2:	e031      	b.n	8006f28 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2207      	movs	r2, #7
 8006ec8:	705a      	strb	r2, [r3, #1]
      break;
 8006eca:	e02d      	b.n	8006f28 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d017      	beq.n	8006f06 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ee2:	23ff      	movs	r3, #255	; 0xff
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f903 	bl	80070f0 <USBH_Get_StringDesc>
 8006eea:	4603      	mov	r3, r0
 8006eec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ef8:	e018      	b.n	8006f2c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d115      	bne.n	8006f2c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]
      break;
 8006f04:	e012      	b.n	8006f2c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0a:	e00f      	b.n	8006f2c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e00e      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f10:	bf00      	nop
 8006f12:	e00c      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f14:	bf00      	nop
 8006f16:	e00a      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e008      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f1c:	bf00      	nop
 8006f1e:	e006      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f20:	bf00      	nop
 8006f22:	e004      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f24:	bf00      	nop
 8006f26:	e002      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f28:	bf00      	nop
 8006f2a:	e000      	b.n	8006f2e <USBH_HandleEnum+0x3be>
      break;
 8006f2c:	bf00      	nop
  }
  return Status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f804 	bl	8006f7a <USBH_HandleSof>
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b0b      	cmp	r3, #11
 8006f8a:	d10a      	bne.n	8006fa2 <USBH_HandleSof+0x28>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006fba:	bf00      	nop
}
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fd6:	bf00      	nop
}
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f844 	bl	80080be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fe91 	bl	8007d64 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	795b      	ldrb	r3, [r3, #5]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fe8b 	bl	8007d64 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	b29b      	uxth	r3, r3
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007076:	2100      	movs	r1, #0
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f864 	bl	8007146 <USBH_GetDescriptor>
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	b292      	uxth	r2, r2
 8007098:	4619      	mov	r1, r3
 800709a:	f000 f918 	bl	80072ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	331c      	adds	r3, #28
 80070b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070ba:	887b      	ldrh	r3, [r7, #2]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f83d 	bl	8007146 <USBH_GetDescriptor>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d107      	bne.n	80070e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80070d6:	887b      	ldrh	r3, [r7, #2]
 80070d8:	461a      	mov	r2, r3
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f987 	bl	80073f0 <USBH_ParseCfgDesc>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	607a      	str	r2, [r7, #4]
 80070fa:	461a      	mov	r2, r3
 80070fc:	460b      	mov	r3, r1
 80070fe:	72fb      	strb	r3, [r7, #11]
 8007100:	4613      	mov	r3, r2
 8007102:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800710c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007114:	893b      	ldrh	r3, [r7, #8]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	460b      	mov	r3, r1
 800711a:	2100      	movs	r1, #0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f812 	bl	8007146 <USBH_GetDescriptor>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007132:	893a      	ldrh	r2, [r7, #8]
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fb24 	bl	8007784 <USBH_ParseStringDesc>
  }

  return status;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	607b      	str	r3, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	72fb      	strb	r3, [r7, #11]
 8007154:	4613      	mov	r3, r2
 8007156:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	789b      	ldrb	r3, [r3, #2]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d11c      	bne.n	800719a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007166:	b2da      	uxtb	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2206      	movs	r2, #6
 8007170:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	893a      	ldrh	r2, [r7, #8]
 8007176:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007178:	893b      	ldrh	r3, [r7, #8]
 800717a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800717e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007182:	d104      	bne.n	800718e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f240 4209 	movw	r2, #1033	; 0x409
 800718a:	829a      	strh	r2, [r3, #20]
 800718c:	e002      	b.n	8007194 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8b3a      	ldrh	r2, [r7, #24]
 8007198:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800719a:	8b3b      	ldrh	r3, [r7, #24]
 800719c:	461a      	mov	r2, r3
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fb3d 	bl	8007820 <USBH_CtlReq>
 80071a6:	4603      	mov	r3, r0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	789b      	ldrb	r3, [r3, #2]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10f      	bne.n	80071e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2205      	movs	r2, #5
 80071ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071e4:	2200      	movs	r2, #0
 80071e6:	2100      	movs	r1, #0
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fb19 	bl	8007820 <USBH_CtlReq>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	789b      	ldrb	r3, [r3, #2]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10e      	bne.n	800722a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2209      	movs	r2, #9
 8007216:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	887a      	ldrh	r2, [r7, #2]
 800721c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 faf6 	bl	8007820 <USBH_CtlReq>
 8007234:	4603      	mov	r3, r0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	789b      	ldrb	r3, [r3, #2]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10f      	bne.n	8007272 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2203      	movs	r2, #3
 800725c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	b29a      	uxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007272:	2200      	movs	r2, #0
 8007274:	2100      	movs	r1, #0
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fad2 	bl	8007820 <USBH_CtlReq>
 800727c:	4603      	mov	r3, r0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	789b      	ldrb	r3, [r3, #2]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10f      	bne.n	80072ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 faae 	bl	8007820 <USBH_CtlReq>
 80072c4:	4603      	mov	r3, r0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b085      	sub	sp, #20
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	4613      	mov	r3, r2
 80072da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	785a      	ldrb	r2, [r3, #1]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3302      	adds	r3, #2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3303      	adds	r3, #3
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4313      	orrs	r3, r2
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	791a      	ldrb	r2, [r3, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	795a      	ldrb	r2, [r3, #5]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	799a      	ldrb	r2, [r3, #6]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	79da      	ldrb	r2, [r3, #7]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	79db      	ldrb	r3, [r3, #7]
 800732c:	2b20      	cmp	r3, #32
 800732e:	dc11      	bgt.n	8007354 <USBH_ParseDevDesc+0x86>
 8007330:	2b08      	cmp	r3, #8
 8007332:	db16      	blt.n	8007362 <USBH_ParseDevDesc+0x94>
 8007334:	3b08      	subs	r3, #8
 8007336:	2201      	movs	r2, #1
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf14      	ite	ne
 8007348:	2301      	movne	r3, #1
 800734a:	2300      	moveq	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d102      	bne.n	8007358 <USBH_ParseDevDesc+0x8a>
 8007352:	e006      	b.n	8007362 <USBH_ParseDevDesc+0x94>
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d104      	bne.n	8007362 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	79da      	ldrb	r2, [r3, #7]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	71da      	strb	r2, [r3, #7]
      break;
 8007360:	e003      	b.n	800736a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2240      	movs	r2, #64	; 0x40
 8007366:	71da      	strb	r2, [r3, #7]
      break;
 8007368:	bf00      	nop
  }

  if (length > 8U)
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	2b08      	cmp	r3, #8
 800736e:	d939      	bls.n	80073e4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	3308      	adds	r3, #8
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b29a      	uxth	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	3309      	adds	r3, #9
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	b29b      	uxth	r3, r3
 8007384:	4313      	orrs	r3, r2
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	330a      	adds	r3, #10
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b29a      	uxth	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	330b      	adds	r3, #11
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	330c      	adds	r3, #12
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	330d      	adds	r3, #13
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	4313      	orrs	r3, r2
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	7b9a      	ldrb	r2, [r3, #14]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	7bda      	ldrb	r2, [r3, #15]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	7c1a      	ldrb	r2, [r3, #16]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	7c5a      	ldrb	r2, [r3, #17]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	745a      	strb	r2, [r3, #17]
  }
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08c      	sub	sp, #48	; 0x30
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007404:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	781a      	ldrb	r2, [r3, #0]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	785a      	ldrb	r2, [r3, #1]
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	3302      	adds	r3, #2
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	3303      	adds	r3, #3
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	b29b      	uxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b29b      	uxth	r3, r3
 8007448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744c:	bf28      	it	cs
 800744e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007452:	b29a      	uxth	r2, r3
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	791a      	ldrb	r2, [r3, #4]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	795a      	ldrb	r2, [r3, #5]
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	799a      	ldrb	r2, [r3, #6]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	79da      	ldrb	r2, [r3, #7]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	7a1a      	ldrb	r2, [r3, #8]
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b09      	cmp	r3, #9
 8007486:	d002      	beq.n	800748e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	2209      	movs	r2, #9
 800748c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	2b09      	cmp	r3, #9
 8007492:	f240 809d 	bls.w	80075d0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007496:	2309      	movs	r3, #9
 8007498:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800749e:	e081      	b.n	80075a4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074a0:	f107 0316 	add.w	r3, r7, #22
 80074a4:	4619      	mov	r1, r3
 80074a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a8:	f000 f99f 	bl	80077ea <USBH_GetNextDesc>
 80074ac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d176      	bne.n	80075a4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b09      	cmp	r3, #9
 80074bc:	d002      	beq.n	80074c4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	2209      	movs	r2, #9
 80074c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c8:	221a      	movs	r2, #26
 80074ca:	fb02 f303 	mul.w	r3, r2, r3
 80074ce:	3308      	adds	r3, #8
 80074d0:	6a3a      	ldr	r2, [r7, #32]
 80074d2:	4413      	add	r3, r2
 80074d4:	3302      	adds	r3, #2
 80074d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80074d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074da:	69f8      	ldr	r0, [r7, #28]
 80074dc:	f000 f87e 	bl	80075dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074ea:	e043      	b.n	8007574 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074ec:	f107 0316 	add.w	r3, r7, #22
 80074f0:	4619      	mov	r1, r3
 80074f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f4:	f000 f979 	bl	80077ea <USBH_GetNextDesc>
 80074f8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b05      	cmp	r3, #5
 8007500:	d138      	bne.n	8007574 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	795b      	ldrb	r3, [r3, #5]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10f      	bne.n	800752a <USBH_ParseCfgDesc+0x13a>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	799b      	ldrb	r3, [r3, #6]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d10b      	bne.n	800752a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	79db      	ldrb	r3, [r3, #7]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10f      	bne.n	800753a <USBH_ParseCfgDesc+0x14a>
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d00b      	beq.n	800753a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	2209      	movs	r2, #9
 8007526:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007528:	e007      	b.n	800753a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b07      	cmp	r3, #7
 8007530:	d004      	beq.n	800753c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	2207      	movs	r2, #7
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	e000      	b.n	800753c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800753a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800753c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007540:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007544:	3201      	adds	r2, #1
 8007546:	00d2      	lsls	r2, r2, #3
 8007548:	211a      	movs	r1, #26
 800754a:	fb01 f303 	mul.w	r3, r1, r3
 800754e:	4413      	add	r3, r2
 8007550:	3308      	adds	r3, #8
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	4413      	add	r3, r2
 8007556:	3304      	adds	r3, #4
 8007558:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800755a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 f86b 	bl	800763a <USBH_ParseEPDesc>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800756a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800756e:	3301      	adds	r3, #1
 8007570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	791b      	ldrb	r3, [r3, #4]
 8007578:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800757c:	429a      	cmp	r2, r3
 800757e:	d204      	bcs.n	800758a <USBH_ParseCfgDesc+0x19a>
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	885a      	ldrh	r2, [r3, #2]
 8007584:	8afb      	ldrh	r3, [r7, #22]
 8007586:	429a      	cmp	r2, r3
 8007588:	d8b0      	bhi.n	80074ec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007592:	429a      	cmp	r2, r3
 8007594:	d201      	bcs.n	800759a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007596:	2303      	movs	r3, #3
 8007598:	e01c      	b.n	80075d4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800759a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800759e:	3301      	adds	r3, #1
 80075a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d805      	bhi.n	80075b8 <USBH_ParseCfgDesc+0x1c8>
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	885a      	ldrh	r2, [r3, #2]
 80075b0:	8afb      	ldrh	r3, [r7, #22]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	f63f af74 	bhi.w	80074a0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	791b      	ldrb	r3, [r3, #4]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	bf28      	it	cs
 80075c0:	2302      	movcs	r3, #2
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d201      	bcs.n	80075d0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e001      	b.n	80075d4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80075d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3730      	adds	r7, #48	; 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785a      	ldrb	r2, [r3, #1]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	789a      	ldrb	r2, [r3, #2]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	78da      	ldrb	r2, [r3, #3]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	791a      	ldrb	r2, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	795a      	ldrb	r2, [r3, #5]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	799a      	ldrb	r2, [r3, #6]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	79da      	ldrb	r2, [r3, #7]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	7a1a      	ldrb	r2, [r3, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	721a      	strb	r2, [r3, #8]
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800763a:	b480      	push	{r7}
 800763c:	b087      	sub	sp, #28
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	785a      	ldrb	r2, [r3, #1]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	789a      	ldrb	r2, [r3, #2]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	78da      	ldrb	r2, [r3, #3]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b29a      	uxth	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3305      	adds	r3, #5
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	b29b      	uxth	r3, r3
 800767e:	4313      	orrs	r3, r2
 8007680:	b29a      	uxth	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	799a      	ldrb	r2, [r3, #6]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	889b      	ldrh	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007696:	2303      	movs	r3, #3
 8007698:	75fb      	strb	r3, [r7, #23]
 800769a:	e033      	b.n	8007704 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	889b      	ldrh	r3, [r3, #4]
 80076a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076a4:	f023 0307 	bic.w	r3, r3, #7
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	889b      	ldrh	r3, [r3, #4]
 80076b2:	b21a      	sxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3304      	adds	r3, #4
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b299      	uxth	r1, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3305      	adds	r3, #5
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	430b      	orrs	r3, r1
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d110      	bne.n	80076f6 <USBH_ParseEPDesc+0xbc>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b299      	uxth	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3305      	adds	r3, #5
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	430b      	orrs	r3, r1
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	b21b      	sxth	r3, r3
 80076ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076f2:	b21b      	sxth	r3, r3
 80076f4:	e001      	b.n	80076fa <USBH_ParseEPDesc+0xc0>
 80076f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b21b      	sxth	r3, r3
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800770a:	2b00      	cmp	r3, #0
 800770c:	d116      	bne.n	800773c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	78db      	ldrb	r3, [r3, #3]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d005      	beq.n	8007726 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	78db      	ldrb	r3, [r3, #3]
 800771e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007722:	2b03      	cmp	r3, #3
 8007724:	d127      	bne.n	8007776 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	799b      	ldrb	r3, [r3, #6]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <USBH_ParseEPDesc+0xfc>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	799b      	ldrb	r3, [r3, #6]
 8007732:	2b10      	cmp	r3, #16
 8007734:	d91f      	bls.n	8007776 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007736:	2303      	movs	r3, #3
 8007738:	75fb      	strb	r3, [r7, #23]
 800773a:	e01c      	b.n	8007776 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	78db      	ldrb	r3, [r3, #3]
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10a      	bne.n	800775e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	799b      	ldrb	r3, [r3, #6]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <USBH_ParseEPDesc+0x11e>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	799b      	ldrb	r3, [r3, #6]
 8007754:	2b10      	cmp	r3, #16
 8007756:	d90e      	bls.n	8007776 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007758:	2303      	movs	r3, #3
 800775a:	75fb      	strb	r3, [r7, #23]
 800775c:	e00b      	b.n	8007776 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	78db      	ldrb	r3, [r3, #3]
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	2b03      	cmp	r3, #3
 8007768:	d105      	bne.n	8007776 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	799b      	ldrb	r3, [r3, #6]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007772:	2303      	movs	r3, #3
 8007774:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
}
 8007778:	4618      	mov	r0, r3
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b03      	cmp	r3, #3
 800779a:	d120      	bne.n	80077de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	1e9a      	subs	r2, r3, #2
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	bf28      	it	cs
 80077a8:	4613      	movcs	r3, r2
 80077aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3302      	adds	r3, #2
 80077b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077b2:	2300      	movs	r3, #0
 80077b4:	82fb      	strh	r3, [r7, #22]
 80077b6:	e00b      	b.n	80077d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077b8:	8afb      	ldrh	r3, [r7, #22]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	781a      	ldrb	r2, [r3, #0]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077ca:	8afb      	ldrh	r3, [r7, #22]
 80077cc:	3302      	adds	r3, #2
 80077ce:	82fb      	strh	r3, [r7, #22]
 80077d0:	8afa      	ldrh	r2, [r7, #22]
 80077d2:	8abb      	ldrh	r3, [r7, #20]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d3ef      	bcc.n	80077b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
  }
}
 80077de:	bf00      	nop
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	881a      	ldrh	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4413      	add	r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007812:	68fb      	ldr	r3, [r7, #12]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	789b      	ldrb	r3, [r3, #2]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d002      	beq.n	8007840 <USBH_CtlReq+0x20>
 800783a:	2b02      	cmp	r3, #2
 800783c:	d00f      	beq.n	800785e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800783e:	e027      	b.n	8007890 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	88fa      	ldrh	r2, [r7, #6]
 800784a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2202      	movs	r2, #2
 8007856:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
      break;
 800785c:	e018      	b.n	8007890 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f81c 	bl	800789c <USBH_HandleControl>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <USBH_CtlReq+0x54>
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d106      	bne.n	8007882 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	761a      	strb	r2, [r3, #24]
      break;
 8007880:	e005      	b.n	800788e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d102      	bne.n	800788e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	709a      	strb	r2, [r3, #2]
      break;
 800788e:	bf00      	nop
  }
  return status;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	7e1b      	ldrb	r3, [r3, #24]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	2b0a      	cmp	r3, #10
 80078b4:	f200 8156 	bhi.w	8007b64 <USBH_HandleControl+0x2c8>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <USBH_HandleControl+0x24>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	08007907 	.word	0x08007907
 80078c8:	08007971 	.word	0x08007971
 80078cc:	08007997 	.word	0x08007997
 80078d0:	080079cf 	.word	0x080079cf
 80078d4:	080079f9 	.word	0x080079f9
 80078d8:	08007a4b 	.word	0x08007a4b
 80078dc:	08007a6d 	.word	0x08007a6d
 80078e0:	08007aa9 	.word	0x08007aa9
 80078e4:	08007acf 	.word	0x08007acf
 80078e8:	08007b0d 	.word	0x08007b0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f103 0110 	add.w	r1, r3, #16
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	795b      	ldrb	r3, [r3, #5]
 80078f6:	461a      	mov	r2, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f943 	bl	8007b84 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	761a      	strb	r2, [r3, #24]
      break;
 8007904:	e139      	b.n	8007b7a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	795b      	ldrb	r3, [r3, #5]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fcc5 	bl	800829c <USBH_LL_GetURBState>
 8007912:	4603      	mov	r3, r0
 8007914:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d11e      	bne.n	800795a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7c1b      	ldrb	r3, [r3, #16]
 8007920:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007924:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8adb      	ldrh	r3, [r3, #22]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800792e:	7b7b      	ldrb	r3, [r7, #13]
 8007930:	2b80      	cmp	r3, #128	; 0x80
 8007932:	d103      	bne.n	800793c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2203      	movs	r2, #3
 8007938:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800793a:	e115      	b.n	8007b68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2205      	movs	r2, #5
 8007940:	761a      	strb	r2, [r3, #24]
      break;
 8007942:	e111      	b.n	8007b68 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007944:	7b7b      	ldrb	r3, [r7, #13]
 8007946:	2b80      	cmp	r3, #128	; 0x80
 8007948:	d103      	bne.n	8007952 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2209      	movs	r2, #9
 800794e:	761a      	strb	r2, [r3, #24]
      break;
 8007950:	e10a      	b.n	8007b68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2207      	movs	r2, #7
 8007956:	761a      	strb	r2, [r3, #24]
      break;
 8007958:	e106      	b.n	8007b68 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b04      	cmp	r3, #4
 800795e:	d003      	beq.n	8007968 <USBH_HandleControl+0xcc>
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b02      	cmp	r3, #2
 8007964:	f040 8100 	bne.w	8007b68 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	220b      	movs	r2, #11
 800796c:	761a      	strb	r2, [r3, #24]
      break;
 800796e:	e0fb      	b.n	8007b68 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007976:	b29a      	uxth	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6899      	ldr	r1, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	899a      	ldrh	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	791b      	ldrb	r3, [r3, #4]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f93a 	bl	8007c02 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2204      	movs	r2, #4
 8007992:	761a      	strb	r2, [r3, #24]
      break;
 8007994:	e0f1      	b.n	8007b7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	791b      	ldrb	r3, [r3, #4]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc7d 	bl	800829c <USBH_LL_GetURBState>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d102      	bne.n	80079b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2209      	movs	r2, #9
 80079b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b05      	cmp	r3, #5
 80079b6:	d102      	bne.n	80079be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079b8:	2303      	movs	r3, #3
 80079ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079bc:	e0d6      	b.n	8007b6c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	f040 80d3 	bne.w	8007b6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	220b      	movs	r2, #11
 80079ca:	761a      	strb	r2, [r3, #24]
      break;
 80079cc:	e0ce      	b.n	8007b6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6899      	ldr	r1, [r3, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	899a      	ldrh	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	795b      	ldrb	r3, [r3, #5]
 80079da:	2001      	movs	r0, #1
 80079dc:	9000      	str	r0, [sp, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f8ea 	bl	8007bb8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2206      	movs	r2, #6
 80079f4:	761a      	strb	r2, [r3, #24]
      break;
 80079f6:	e0c0      	b.n	8007b7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	795b      	ldrb	r3, [r3, #5]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fc4c 	bl	800829c <USBH_LL_GetURBState>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d103      	bne.n	8007a16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2207      	movs	r2, #7
 8007a12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a14:	e0ac      	b.n	8007b70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b05      	cmp	r3, #5
 8007a1a:	d105      	bne.n	8007a28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	220c      	movs	r2, #12
 8007a20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a22:	2303      	movs	r3, #3
 8007a24:	73fb      	strb	r3, [r7, #15]
      break;
 8007a26:	e0a3      	b.n	8007b70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d103      	bne.n	8007a36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2205      	movs	r2, #5
 8007a32:	761a      	strb	r2, [r3, #24]
      break;
 8007a34:	e09c      	b.n	8007b70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	f040 8099 	bne.w	8007b70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220b      	movs	r2, #11
 8007a42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a44:	2302      	movs	r3, #2
 8007a46:	73fb      	strb	r3, [r7, #15]
      break;
 8007a48:	e092      	b.n	8007b70 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	791b      	ldrb	r3, [r3, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2100      	movs	r1, #0
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8d5 	bl	8007c02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2208      	movs	r2, #8
 8007a68:	761a      	strb	r2, [r3, #24]

      break;
 8007a6a:	e086      	b.n	8007b7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fc12 	bl	800829c <USBH_LL_GetURBState>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d105      	bne.n	8007a8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	220d      	movs	r2, #13
 8007a86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a8c:	e072      	b.n	8007b74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d103      	bne.n	8007a9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	220b      	movs	r2, #11
 8007a98:	761a      	strb	r2, [r3, #24]
      break;
 8007a9a:	e06b      	b.n	8007b74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d168      	bne.n	8007b74 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa6:	e065      	b.n	8007b74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	795b      	ldrb	r3, [r3, #5]
 8007aac:	2201      	movs	r2, #1
 8007aae:	9200      	str	r2, [sp, #0]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f87f 	bl	8007bb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220a      	movs	r2, #10
 8007aca:	761a      	strb	r2, [r3, #24]
      break;
 8007acc:	e055      	b.n	8007b7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	795b      	ldrb	r3, [r3, #5]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fbe1 	bl	800829c <USBH_LL_GetURBState>
 8007ada:	4603      	mov	r3, r0
 8007adc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d105      	bne.n	8007af0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	220d      	movs	r2, #13
 8007aec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007aee:	e043      	b.n	8007b78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d103      	bne.n	8007afe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2209      	movs	r2, #9
 8007afa:	761a      	strb	r2, [r3, #24]
      break;
 8007afc:	e03c      	b.n	8007b78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d139      	bne.n	8007b78 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	220b      	movs	r2, #11
 8007b08:	761a      	strb	r2, [r3, #24]
      break;
 8007b0a:	e035      	b.n	8007b78 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7e5b      	ldrb	r3, [r3, #25]
 8007b10:	3301      	adds	r3, #1
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	765a      	strb	r2, [r3, #25]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7e5b      	ldrb	r3, [r3, #25]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d806      	bhi.n	8007b2e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b2c:	e025      	b.n	8007b7a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b34:	2106      	movs	r1, #6
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	795b      	ldrb	r3, [r3, #5]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f90c 	bl	8007d64 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	791b      	ldrb	r3, [r3, #4]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f906 	bl	8007d64 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	73fb      	strb	r3, [r7, #15]
      break;
 8007b62:	e00a      	b.n	8007b7a <USBH_HandleControl+0x2de>

    default:
      break;
 8007b64:	bf00      	nop
 8007b66:	e008      	b.n	8007b7a <USBH_HandleControl+0x2de>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e006      	b.n	8007b7a <USBH_HandleControl+0x2de>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e004      	b.n	8007b7a <USBH_HandleControl+0x2de>
      break;
 8007b70:	bf00      	nop
 8007b72:	e002      	b.n	8007b7a <USBH_HandleControl+0x2de>
      break;
 8007b74:	bf00      	nop
 8007b76:	e000      	b.n	8007b7a <USBH_HandleControl+0x2de>
      break;
 8007b78:	bf00      	nop
  }

  return status;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af04      	add	r7, sp, #16
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b92:	79f9      	ldrb	r1, [r7, #7]
 8007b94:	2300      	movs	r3, #0
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	2308      	movs	r3, #8
 8007b9a:	9302      	str	r3, [sp, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fb46 	bl	800823a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af04      	add	r7, sp, #16
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	80fb      	strh	r3, [r7, #6]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bdc:	7979      	ldrb	r1, [r7, #5]
 8007bde:	7e3b      	ldrb	r3, [r7, #24]
 8007be0:	9303      	str	r3, [sp, #12]
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	9302      	str	r3, [sp, #8]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	2301      	movs	r3, #1
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fb21 	bl	800823a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b088      	sub	sp, #32
 8007c06:	af04      	add	r7, sp, #16
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	461a      	mov	r2, r3
 8007c10:	460b      	mov	r3, r1
 8007c12:	80fb      	strh	r3, [r7, #6]
 8007c14:	4613      	mov	r3, r2
 8007c16:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c18:	7979      	ldrb	r1, [r7, #5]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9303      	str	r3, [sp, #12]
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	9302      	str	r3, [sp, #8]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	2301      	movs	r3, #1
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fb03 	bl	800823a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c34:	2300      	movs	r3, #0

}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b088      	sub	sp, #32
 8007c42:	af04      	add	r7, sp, #16
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	80fb      	strh	r3, [r7, #6]
 8007c50:	4613      	mov	r3, r2
 8007c52:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c62:	7979      	ldrb	r1, [r7, #5]
 8007c64:	7e3b      	ldrb	r3, [r7, #24]
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	2301      	movs	r3, #1
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	2302      	movs	r3, #2
 8007c76:	2200      	movs	r2, #0
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 fade 	bl	800823a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af04      	add	r7, sp, #16
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4611      	mov	r1, r2
 8007c94:	461a      	mov	r2, r3
 8007c96:	460b      	mov	r3, r1
 8007c98:	80fb      	strh	r3, [r7, #6]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c9e:	7979      	ldrb	r1, [r7, #5]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9303      	str	r3, [sp, #12]
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	9302      	str	r3, [sp, #8]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	9301      	str	r3, [sp, #4]
 8007cac:	2301      	movs	r3, #1
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 fac0 	bl	800823a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af04      	add	r7, sp, #16
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	70fb      	strb	r3, [r7, #3]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70bb      	strb	r3, [r7, #2]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cde:	7878      	ldrb	r0, [r7, #1]
 8007ce0:	78ba      	ldrb	r2, [r7, #2]
 8007ce2:	78f9      	ldrb	r1, [r7, #3]
 8007ce4:	8b3b      	ldrh	r3, [r7, #24]
 8007ce6:	9302      	str	r3, [sp, #8]
 8007ce8:	7d3b      	ldrb	r3, [r7, #20]
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	7c3b      	ldrb	r3, [r7, #16]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa53 	bl	800819e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa72 	bl	80081fc <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f836 	bl	8007da0 <USBH_GetFreePipe>
 8007d34:	4603      	mov	r3, r0
 8007d36:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d38:	89fb      	ldrh	r3, [r7, #14]
 8007d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00a      	beq.n	8007d58 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	89fb      	ldrh	r3, [r7, #14]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	33e0      	adds	r3, #224	; 0xe0
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d58:	89fb      	ldrh	r3, [r7, #14]
 8007d5a:	b2db      	uxtb	r3, r3
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	2b0f      	cmp	r3, #15
 8007d74:	d80d      	bhi.n	8007d92 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	33e0      	adds	r3, #224	; 0xe0
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	33e0      	adds	r3, #224	; 0xe0
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
 8007db0:	e00f      	b.n	8007dd2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	33e0      	adds	r3, #224	; 0xe0
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	e007      	b.n	8007ddc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	73fb      	strb	r3, [r7, #15]
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b0f      	cmp	r3, #15
 8007dd6:	d9ec      	bls.n	8007db2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007dec:	2201      	movs	r2, #1
 8007dee:	490e      	ldr	r1, [pc, #56]	; (8007e28 <MX_USB_HOST_Init+0x40>)
 8007df0:	480e      	ldr	r0, [pc, #56]	; (8007e2c <MX_USB_HOST_Init+0x44>)
 8007df2:	f7fe fba7 	bl	8006544 <USBH_Init>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007dfc:	f7f8 ff8e 	bl	8000d1c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e00:	490b      	ldr	r1, [pc, #44]	; (8007e30 <MX_USB_HOST_Init+0x48>)
 8007e02:	480a      	ldr	r0, [pc, #40]	; (8007e2c <MX_USB_HOST_Init+0x44>)
 8007e04:	f7fe fc2c 	bl	8006660 <USBH_RegisterClass>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e0e:	f7f8 ff85 	bl	8000d1c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e12:	4806      	ldr	r0, [pc, #24]	; (8007e2c <MX_USB_HOST_Init+0x44>)
 8007e14:	f7fe fcb0 	bl	8006778 <USBH_Start>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e1e:	f7f8 ff7d 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e22:	bf00      	nop
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	08007e49 	.word	0x08007e49
 8007e2c:	200001f0 	.word	0x200001f0
 8007e30:	2000000c 	.word	0x2000000c

08007e34 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e38:	4802      	ldr	r0, [pc, #8]	; (8007e44 <MX_USB_HOST_Process+0x10>)
 8007e3a:	f7fe fcad 	bl	8006798 <USBH_Process>
}
 8007e3e:	bf00      	nop
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	200001f0 	.word	0x200001f0

08007e48 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d819      	bhi.n	8007e90 <USBH_UserProcess+0x48>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <USBH_UserProcess+0x1c>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e91 	.word	0x08007e91
 8007e68:	08007e81 	.word	0x08007e81
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e89 	.word	0x08007e89
 8007e74:	08007e79 	.word	0x08007e79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e78:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <USBH_UserProcess+0x58>)
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	701a      	strb	r2, [r3, #0]
  break;
 8007e7e:	e008      	b.n	8007e92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <USBH_UserProcess+0x58>)
 8007e82:	2202      	movs	r2, #2
 8007e84:	701a      	strb	r2, [r3, #0]
  break;
 8007e86:	e004      	b.n	8007e92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <USBH_UserProcess+0x58>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	701a      	strb	r2, [r3, #0]
  break;
 8007e8e:	e000      	b.n	8007e92 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	200005c8 	.word	0x200005c8

08007ea4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	; 0x28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	605a      	str	r2, [r3, #4]
 8007eb6:	609a      	str	r2, [r3, #8]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec4:	d147      	bne.n	8007f56 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	613b      	str	r3, [r7, #16]
 8007eca:	4b25      	ldr	r3, [pc, #148]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ece:	4a24      	ldr	r2, [pc, #144]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ed6:	4b22      	ldr	r3, [pc, #136]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	481b      	ldr	r0, [pc, #108]	; (8007f64 <HAL_HCD_MspInit+0xc0>)
 8007ef8:	f7f9 fa7c 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007efc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f02:	2302      	movs	r3, #2
 8007f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f0e:	230a      	movs	r3, #10
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f12:	f107 0314 	add.w	r3, r7, #20
 8007f16:	4619      	mov	r1, r3
 8007f18:	4812      	ldr	r0, [pc, #72]	; (8007f64 <HAL_HCD_MspInit+0xc0>)
 8007f1a:	f7f9 fa6b 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	4a0f      	ldr	r2, [pc, #60]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	6353      	str	r3, [r2, #52]	; 0x34
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f32:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f38:	6453      	str	r3, [r2, #68]	; 0x44
 8007f3a:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <HAL_HCD_MspInit+0xbc>)
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f46:	2200      	movs	r2, #0
 8007f48:	2100      	movs	r1, #0
 8007f4a:	2043      	movs	r0, #67	; 0x43
 8007f4c:	f7f9 fa1b 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f50:	2043      	movs	r0, #67	; 0x43
 8007f52:	f7f9 fa34 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f56:	bf00      	nop
 8007f58:	3728      	adds	r7, #40	; 0x28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	40023800 	.word	0x40023800
 8007f64:	40020000 	.word	0x40020000

08007f68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe ffed 	bl	8006f56 <USBH_LL_IncTimer>
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff f825 	bl	8006fe2 <USBH_LL_Connect>
}
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff f82e 	bl	8007010 <USBH_LL_Disconnect>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe ffdf 	bl	8006faa <USBH_LL_PortEnabled>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe ffdf 	bl	8006fc6 <USBH_LL_PortDisabled>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800801e:	2b01      	cmp	r3, #1
 8008020:	d12a      	bne.n	8008078 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008022:	4a18      	ldr	r2, [pc, #96]	; (8008084 <USBH_LL_Init+0x74>)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a15      	ldr	r2, [pc, #84]	; (8008084 <USBH_LL_Init+0x74>)
 800802e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008032:	4b14      	ldr	r3, [pc, #80]	; (8008084 <USBH_LL_Init+0x74>)
 8008034:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008038:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <USBH_LL_Init+0x74>)
 800803c:	2208      	movs	r2, #8
 800803e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008040:	4b10      	ldr	r3, [pc, #64]	; (8008084 <USBH_LL_Init+0x74>)
 8008042:	2201      	movs	r2, #1
 8008044:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008046:	4b0f      	ldr	r3, [pc, #60]	; (8008084 <USBH_LL_Init+0x74>)
 8008048:	2200      	movs	r2, #0
 800804a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800804c:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <USBH_LL_Init+0x74>)
 800804e:	2202      	movs	r2, #2
 8008050:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <USBH_LL_Init+0x74>)
 8008054:	2200      	movs	r2, #0
 8008056:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008058:	480a      	ldr	r0, [pc, #40]	; (8008084 <USBH_LL_Init+0x74>)
 800805a:	f7f9 fb80 	bl	800175e <HAL_HCD_Init>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008064:	f7f8 fe5a 	bl	8000d1c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008068:	4806      	ldr	r0, [pc, #24]	; (8008084 <USBH_LL_Init+0x74>)
 800806a:	f7f9 ff64 	bl	8001f36 <HAL_HCD_GetCurrentFrame>
 800806e:	4603      	mov	r3, r0
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fe ff60 	bl	8006f38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200005cc 	.word	0x200005cc

08008088 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f9 fed3 	bl	8001e4a <HAL_HCD_Start>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f95c 	bl	8008368 <USBH_Get_USB_Status>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7f9 fedb 	bl	8001e90 <HAL_HCD_Stop>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f941 	bl	8008368 <USBH_Get_USB_Status>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008106:	4618      	mov	r0, r3
 8008108:	f7f9 ff23 	bl	8001f52 <HAL_HCD_GetCurrentSpeed>
 800810c:	4603      	mov	r3, r0
 800810e:	2b02      	cmp	r3, #2
 8008110:	d00c      	beq.n	800812c <USBH_LL_GetSpeed+0x38>
 8008112:	2b02      	cmp	r3, #2
 8008114:	d80d      	bhi.n	8008132 <USBH_LL_GetSpeed+0x3e>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <USBH_LL_GetSpeed+0x2c>
 800811a:	2b01      	cmp	r3, #1
 800811c:	d003      	beq.n	8008126 <USBH_LL_GetSpeed+0x32>
 800811e:	e008      	b.n	8008132 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
    break;
 8008124:	e008      	b.n	8008138 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
    break;
 800812a:	e005      	b.n	8008138 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800812c:	2302      	movs	r3, #2
 800812e:	73fb      	strb	r3, [r7, #15]
    break;
 8008130:	e002      	b.n	8008138 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008132:	2301      	movs	r3, #1
 8008134:	73fb      	strb	r3, [r7, #15]
    break;
 8008136:	bf00      	nop
  }
  return  speed;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008158:	4618      	mov	r0, r3
 800815a:	f7f9 feb6 	bl	8001eca <HAL_HCD_ResetPort>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	4618      	mov	r0, r3
 8008166:	f000 f8ff 	bl	8008368 <USBH_Get_USB_Status>
 800816a:	4603      	mov	r3, r0
 800816c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800816e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f7f9 febd 	bl	8001f0e <HAL_HCD_HC_GetXferCount>
 8008194:	4603      	mov	r3, r0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800819e:	b590      	push	{r4, r7, lr}
 80081a0:	b089      	sub	sp, #36	; 0x24
 80081a2:	af04      	add	r7, sp, #16
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	461a      	mov	r2, r3
 80081ac:	4603      	mov	r3, r0
 80081ae:	70fb      	strb	r3, [r7, #3]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70bb      	strb	r3, [r7, #2]
 80081b4:	4613      	mov	r3, r2
 80081b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081c6:	787c      	ldrb	r4, [r7, #1]
 80081c8:	78ba      	ldrb	r2, [r7, #2]
 80081ca:	78f9      	ldrb	r1, [r7, #3]
 80081cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081ce:	9302      	str	r3, [sp, #8]
 80081d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4623      	mov	r3, r4
 80081de:	f7f9 fb20 	bl	8001822 <HAL_HCD_HC_Init>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 f8bd 	bl	8008368 <USBH_Get_USB_Status>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd90      	pop	{r4, r7, pc}

080081fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7f9 fb90 	bl	8001940 <HAL_HCD_HC_Halt>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f89e 	bl	8008368 <USBH_Get_USB_Status>
 800822c:	4603      	mov	r3, r0
 800822e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008230:	7bbb      	ldrb	r3, [r7, #14]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800823a:	b590      	push	{r4, r7, lr}
 800823c:	b089      	sub	sp, #36	; 0x24
 800823e:	af04      	add	r7, sp, #16
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	461a      	mov	r2, r3
 8008248:	4603      	mov	r3, r0
 800824a:	70fb      	strb	r3, [r7, #3]
 800824c:	460b      	mov	r3, r1
 800824e:	70bb      	strb	r3, [r7, #2]
 8008250:	4613      	mov	r3, r2
 8008252:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008262:	787c      	ldrb	r4, [r7, #1]
 8008264:	78ba      	ldrb	r2, [r7, #2]
 8008266:	78f9      	ldrb	r1, [r7, #3]
 8008268:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800826c:	9303      	str	r3, [sp, #12]
 800826e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008270:	9302      	str	r3, [sp, #8]
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	f897 3020 	ldrb.w	r3, [r7, #32]
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	4623      	mov	r3, r4
 800827e:	f7f9 fb83 	bl	8001988 <HAL_HCD_HC_SubmitRequest>
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f86d 	bl	8008368 <USBH_Get_USB_Status>
 800828e:	4603      	mov	r3, r0
 8008290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008292:	7bbb      	ldrb	r3, [r7, #14]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	bd90      	pop	{r4, r7, pc}

0800829c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f9 fe17 	bl	8001ee6 <HAL_HCD_HC_GetURBState>
 80082b8:	4603      	mov	r3, r0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d103      	bne.n	80082e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f870 	bl	80083c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082e0:	20c8      	movs	r0, #200	; 0xc8
 80082e2:	f7f8 ff51 	bl	8001188 <HAL_Delay>
  return USBH_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
 80082fc:	4613      	mov	r3, r2
 80082fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008306:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	212c      	movs	r1, #44	; 0x2c
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	4413      	add	r3, r2
 8008314:	333b      	adds	r3, #59	; 0x3b
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d009      	beq.n	8008330 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	212c      	movs	r1, #44	; 0x2c
 8008322:	fb01 f303 	mul.w	r3, r1, r3
 8008326:	4413      	add	r3, r2
 8008328:	3354      	adds	r3, #84	; 0x54
 800832a:	78ba      	ldrb	r2, [r7, #2]
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	e008      	b.n	8008342 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	212c      	movs	r1, #44	; 0x2c
 8008336:	fb01 f303 	mul.w	r3, r1, r3
 800833a:	4413      	add	r3, r2
 800833c:	3355      	adds	r3, #85	; 0x55
 800833e:	78ba      	ldrb	r2, [r7, #2]
 8008340:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7f8 ff15 	bl	8001188 <HAL_Delay>
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d817      	bhi.n	80083ac <USBH_Get_USB_Status+0x44>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <USBH_Get_USB_Status+0x1c>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008395 	.word	0x08008395
 8008388:	0800839b 	.word	0x0800839b
 800838c:	080083a1 	.word	0x080083a1
 8008390:	080083a7 	.word	0x080083a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	e00b      	b.n	80083b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800839a:	2302      	movs	r3, #2
 800839c:	73fb      	strb	r3, [r7, #15]
    break;
 800839e:	e008      	b.n	80083b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
    break;
 80083a4:	e005      	b.n	80083b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083a6:	2302      	movs	r3, #2
 80083a8:	73fb      	strb	r3, [r7, #15]
    break;
 80083aa:	e002      	b.n	80083b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083ac:	2302      	movs	r3, #2
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	bf00      	nop
  }
  return usb_status;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
 80083d8:	e001      	b.n	80083de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80083da:	2301      	movs	r3, #1
 80083dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	461a      	mov	r2, r3
 80083e2:	2101      	movs	r1, #1
 80083e4:	4803      	ldr	r0, [pc, #12]	; (80083f4 <MX_DriverVbusFS+0x34>)
 80083e6:	f7f9 f9a1 	bl	800172c <HAL_GPIO_WritePin>
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	40020800 	.word	0x40020800

080083f8 <__errno>:
 80083f8:	4b01      	ldr	r3, [pc, #4]	; (8008400 <__errno+0x8>)
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	2000002c 	.word	0x2000002c

08008404 <__libc_init_array>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	4d0d      	ldr	r5, [pc, #52]	; (800843c <__libc_init_array+0x38>)
 8008408:	4c0d      	ldr	r4, [pc, #52]	; (8008440 <__libc_init_array+0x3c>)
 800840a:	1b64      	subs	r4, r4, r5
 800840c:	10a4      	asrs	r4, r4, #2
 800840e:	2600      	movs	r6, #0
 8008410:	42a6      	cmp	r6, r4
 8008412:	d109      	bne.n	8008428 <__libc_init_array+0x24>
 8008414:	4d0b      	ldr	r5, [pc, #44]	; (8008444 <__libc_init_array+0x40>)
 8008416:	4c0c      	ldr	r4, [pc, #48]	; (8008448 <__libc_init_array+0x44>)
 8008418:	f000 fc9e 	bl	8008d58 <_init>
 800841c:	1b64      	subs	r4, r4, r5
 800841e:	10a4      	asrs	r4, r4, #2
 8008420:	2600      	movs	r6, #0
 8008422:	42a6      	cmp	r6, r4
 8008424:	d105      	bne.n	8008432 <__libc_init_array+0x2e>
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	f855 3b04 	ldr.w	r3, [r5], #4
 800842c:	4798      	blx	r3
 800842e:	3601      	adds	r6, #1
 8008430:	e7ee      	b.n	8008410 <__libc_init_array+0xc>
 8008432:	f855 3b04 	ldr.w	r3, [r5], #4
 8008436:	4798      	blx	r3
 8008438:	3601      	adds	r6, #1
 800843a:	e7f2      	b.n	8008422 <__libc_init_array+0x1e>
 800843c:	08008dec 	.word	0x08008dec
 8008440:	08008dec 	.word	0x08008dec
 8008444:	08008dec 	.word	0x08008dec
 8008448:	08008df0 	.word	0x08008df0

0800844c <malloc>:
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <malloc+0xc>)
 800844e:	4601      	mov	r1, r0
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	f000 b87f 	b.w	8008554 <_malloc_r>
 8008456:	bf00      	nop
 8008458:	2000002c 	.word	0x2000002c

0800845c <free>:
 800845c:	4b02      	ldr	r3, [pc, #8]	; (8008468 <free+0xc>)
 800845e:	4601      	mov	r1, r0
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	f000 b80b 	b.w	800847c <_free_r>
 8008466:	bf00      	nop
 8008468:	2000002c 	.word	0x2000002c

0800846c <memset>:
 800846c:	4402      	add	r2, r0
 800846e:	4603      	mov	r3, r0
 8008470:	4293      	cmp	r3, r2
 8008472:	d100      	bne.n	8008476 <memset+0xa>
 8008474:	4770      	bx	lr
 8008476:	f803 1b01 	strb.w	r1, [r3], #1
 800847a:	e7f9      	b.n	8008470 <memset+0x4>

0800847c <_free_r>:
 800847c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800847e:	2900      	cmp	r1, #0
 8008480:	d044      	beq.n	800850c <_free_r+0x90>
 8008482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008486:	9001      	str	r0, [sp, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f1a1 0404 	sub.w	r4, r1, #4
 800848e:	bfb8      	it	lt
 8008490:	18e4      	addlt	r4, r4, r3
 8008492:	f000 f903 	bl	800869c <__malloc_lock>
 8008496:	4a1e      	ldr	r2, [pc, #120]	; (8008510 <_free_r+0x94>)
 8008498:	9801      	ldr	r0, [sp, #4]
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	b933      	cbnz	r3, 80084ac <_free_r+0x30>
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	6014      	str	r4, [r2, #0]
 80084a2:	b003      	add	sp, #12
 80084a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a8:	f000 b8fe 	b.w	80086a8 <__malloc_unlock>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d908      	bls.n	80084c2 <_free_r+0x46>
 80084b0:	6825      	ldr	r5, [r4, #0]
 80084b2:	1961      	adds	r1, r4, r5
 80084b4:	428b      	cmp	r3, r1
 80084b6:	bf01      	itttt	eq
 80084b8:	6819      	ldreq	r1, [r3, #0]
 80084ba:	685b      	ldreq	r3, [r3, #4]
 80084bc:	1949      	addeq	r1, r1, r5
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	e7ed      	b.n	800849e <_free_r+0x22>
 80084c2:	461a      	mov	r2, r3
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	b10b      	cbz	r3, 80084cc <_free_r+0x50>
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d9fa      	bls.n	80084c2 <_free_r+0x46>
 80084cc:	6811      	ldr	r1, [r2, #0]
 80084ce:	1855      	adds	r5, r2, r1
 80084d0:	42a5      	cmp	r5, r4
 80084d2:	d10b      	bne.n	80084ec <_free_r+0x70>
 80084d4:	6824      	ldr	r4, [r4, #0]
 80084d6:	4421      	add	r1, r4
 80084d8:	1854      	adds	r4, r2, r1
 80084da:	42a3      	cmp	r3, r4
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	d1e0      	bne.n	80084a2 <_free_r+0x26>
 80084e0:	681c      	ldr	r4, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	6053      	str	r3, [r2, #4]
 80084e6:	4421      	add	r1, r4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	e7da      	b.n	80084a2 <_free_r+0x26>
 80084ec:	d902      	bls.n	80084f4 <_free_r+0x78>
 80084ee:	230c      	movs	r3, #12
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	e7d6      	b.n	80084a2 <_free_r+0x26>
 80084f4:	6825      	ldr	r5, [r4, #0]
 80084f6:	1961      	adds	r1, r4, r5
 80084f8:	428b      	cmp	r3, r1
 80084fa:	bf04      	itt	eq
 80084fc:	6819      	ldreq	r1, [r3, #0]
 80084fe:	685b      	ldreq	r3, [r3, #4]
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	bf04      	itt	eq
 8008504:	1949      	addeq	r1, r1, r5
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	6054      	str	r4, [r2, #4]
 800850a:	e7ca      	b.n	80084a2 <_free_r+0x26>
 800850c:	b003      	add	sp, #12
 800850e:	bd30      	pop	{r4, r5, pc}
 8008510:	200008d0 	.word	0x200008d0

08008514 <sbrk_aligned>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4e0e      	ldr	r6, [pc, #56]	; (8008550 <sbrk_aligned+0x3c>)
 8008518:	460c      	mov	r4, r1
 800851a:	6831      	ldr	r1, [r6, #0]
 800851c:	4605      	mov	r5, r0
 800851e:	b911      	cbnz	r1, 8008526 <sbrk_aligned+0x12>
 8008520:	f000 f88c 	bl	800863c <_sbrk_r>
 8008524:	6030      	str	r0, [r6, #0]
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f000 f887 	bl	800863c <_sbrk_r>
 800852e:	1c43      	adds	r3, r0, #1
 8008530:	d00a      	beq.n	8008548 <sbrk_aligned+0x34>
 8008532:	1cc4      	adds	r4, r0, #3
 8008534:	f024 0403 	bic.w	r4, r4, #3
 8008538:	42a0      	cmp	r0, r4
 800853a:	d007      	beq.n	800854c <sbrk_aligned+0x38>
 800853c:	1a21      	subs	r1, r4, r0
 800853e:	4628      	mov	r0, r5
 8008540:	f000 f87c 	bl	800863c <_sbrk_r>
 8008544:	3001      	adds	r0, #1
 8008546:	d101      	bne.n	800854c <sbrk_aligned+0x38>
 8008548:	f04f 34ff 	mov.w	r4, #4294967295
 800854c:	4620      	mov	r0, r4
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	200008d4 	.word	0x200008d4

08008554 <_malloc_r>:
 8008554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	1ccd      	adds	r5, r1, #3
 800855a:	f025 0503 	bic.w	r5, r5, #3
 800855e:	3508      	adds	r5, #8
 8008560:	2d0c      	cmp	r5, #12
 8008562:	bf38      	it	cc
 8008564:	250c      	movcc	r5, #12
 8008566:	2d00      	cmp	r5, #0
 8008568:	4607      	mov	r7, r0
 800856a:	db01      	blt.n	8008570 <_malloc_r+0x1c>
 800856c:	42a9      	cmp	r1, r5
 800856e:	d905      	bls.n	800857c <_malloc_r+0x28>
 8008570:	230c      	movs	r3, #12
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	2600      	movs	r6, #0
 8008576:	4630      	mov	r0, r6
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	4e2e      	ldr	r6, [pc, #184]	; (8008638 <_malloc_r+0xe4>)
 800857e:	f000 f88d 	bl	800869c <__malloc_lock>
 8008582:	6833      	ldr	r3, [r6, #0]
 8008584:	461c      	mov	r4, r3
 8008586:	bb34      	cbnz	r4, 80085d6 <_malloc_r+0x82>
 8008588:	4629      	mov	r1, r5
 800858a:	4638      	mov	r0, r7
 800858c:	f7ff ffc2 	bl	8008514 <sbrk_aligned>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	4604      	mov	r4, r0
 8008594:	d14d      	bne.n	8008632 <_malloc_r+0xde>
 8008596:	6834      	ldr	r4, [r6, #0]
 8008598:	4626      	mov	r6, r4
 800859a:	2e00      	cmp	r6, #0
 800859c:	d140      	bne.n	8008620 <_malloc_r+0xcc>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	4631      	mov	r1, r6
 80085a2:	4638      	mov	r0, r7
 80085a4:	eb04 0803 	add.w	r8, r4, r3
 80085a8:	f000 f848 	bl	800863c <_sbrk_r>
 80085ac:	4580      	cmp	r8, r0
 80085ae:	d13a      	bne.n	8008626 <_malloc_r+0xd2>
 80085b0:	6821      	ldr	r1, [r4, #0]
 80085b2:	3503      	adds	r5, #3
 80085b4:	1a6d      	subs	r5, r5, r1
 80085b6:	f025 0503 	bic.w	r5, r5, #3
 80085ba:	3508      	adds	r5, #8
 80085bc:	2d0c      	cmp	r5, #12
 80085be:	bf38      	it	cc
 80085c0:	250c      	movcc	r5, #12
 80085c2:	4629      	mov	r1, r5
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ffa5 	bl	8008514 <sbrk_aligned>
 80085ca:	3001      	adds	r0, #1
 80085cc:	d02b      	beq.n	8008626 <_malloc_r+0xd2>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	442b      	add	r3, r5
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	e00e      	b.n	80085f4 <_malloc_r+0xa0>
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	1b52      	subs	r2, r2, r5
 80085da:	d41e      	bmi.n	800861a <_malloc_r+0xc6>
 80085dc:	2a0b      	cmp	r2, #11
 80085de:	d916      	bls.n	800860e <_malloc_r+0xba>
 80085e0:	1961      	adds	r1, r4, r5
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	6025      	str	r5, [r4, #0]
 80085e6:	bf18      	it	ne
 80085e8:	6059      	strne	r1, [r3, #4]
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	bf08      	it	eq
 80085ee:	6031      	streq	r1, [r6, #0]
 80085f0:	5162      	str	r2, [r4, r5]
 80085f2:	604b      	str	r3, [r1, #4]
 80085f4:	4638      	mov	r0, r7
 80085f6:	f104 060b 	add.w	r6, r4, #11
 80085fa:	f000 f855 	bl	80086a8 <__malloc_unlock>
 80085fe:	f026 0607 	bic.w	r6, r6, #7
 8008602:	1d23      	adds	r3, r4, #4
 8008604:	1af2      	subs	r2, r6, r3
 8008606:	d0b6      	beq.n	8008576 <_malloc_r+0x22>
 8008608:	1b9b      	subs	r3, r3, r6
 800860a:	50a3      	str	r3, [r4, r2]
 800860c:	e7b3      	b.n	8008576 <_malloc_r+0x22>
 800860e:	6862      	ldr	r2, [r4, #4]
 8008610:	42a3      	cmp	r3, r4
 8008612:	bf0c      	ite	eq
 8008614:	6032      	streq	r2, [r6, #0]
 8008616:	605a      	strne	r2, [r3, #4]
 8008618:	e7ec      	b.n	80085f4 <_malloc_r+0xa0>
 800861a:	4623      	mov	r3, r4
 800861c:	6864      	ldr	r4, [r4, #4]
 800861e:	e7b2      	b.n	8008586 <_malloc_r+0x32>
 8008620:	4634      	mov	r4, r6
 8008622:	6876      	ldr	r6, [r6, #4]
 8008624:	e7b9      	b.n	800859a <_malloc_r+0x46>
 8008626:	230c      	movs	r3, #12
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	4638      	mov	r0, r7
 800862c:	f000 f83c 	bl	80086a8 <__malloc_unlock>
 8008630:	e7a1      	b.n	8008576 <_malloc_r+0x22>
 8008632:	6025      	str	r5, [r4, #0]
 8008634:	e7de      	b.n	80085f4 <_malloc_r+0xa0>
 8008636:	bf00      	nop
 8008638:	200008d0 	.word	0x200008d0

0800863c <_sbrk_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d06      	ldr	r5, [pc, #24]	; (8008658 <_sbrk_r+0x1c>)
 8008640:	2300      	movs	r3, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	f7f8 fc48 	bl	8000edc <_sbrk>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_sbrk_r+0x1a>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_sbrk_r+0x1a>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	200008d8 	.word	0x200008d8

0800865c <siprintf>:
 800865c:	b40e      	push	{r1, r2, r3}
 800865e:	b500      	push	{lr}
 8008660:	b09c      	sub	sp, #112	; 0x70
 8008662:	ab1d      	add	r3, sp, #116	; 0x74
 8008664:	9002      	str	r0, [sp, #8]
 8008666:	9006      	str	r0, [sp, #24]
 8008668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800866c:	4809      	ldr	r0, [pc, #36]	; (8008694 <siprintf+0x38>)
 800866e:	9107      	str	r1, [sp, #28]
 8008670:	9104      	str	r1, [sp, #16]
 8008672:	4909      	ldr	r1, [pc, #36]	; (8008698 <siprintf+0x3c>)
 8008674:	f853 2b04 	ldr.w	r2, [r3], #4
 8008678:	9105      	str	r1, [sp, #20]
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	a902      	add	r1, sp, #8
 8008680:	f000 f874 	bl	800876c <_svfiprintf_r>
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	b01c      	add	sp, #112	; 0x70
 800868c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008690:	b003      	add	sp, #12
 8008692:	4770      	bx	lr
 8008694:	2000002c 	.word	0x2000002c
 8008698:	ffff0208 	.word	0xffff0208

0800869c <__malloc_lock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_lock+0x8>)
 800869e:	f000 baf9 	b.w	8008c94 <__retarget_lock_acquire_recursive>
 80086a2:	bf00      	nop
 80086a4:	200008dc 	.word	0x200008dc

080086a8 <__malloc_unlock>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__malloc_unlock+0x8>)
 80086aa:	f000 baf4 	b.w	8008c96 <__retarget_lock_release_recursive>
 80086ae:	bf00      	nop
 80086b0:	200008dc 	.word	0x200008dc

080086b4 <__ssputs_r>:
 80086b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b8:	688e      	ldr	r6, [r1, #8]
 80086ba:	429e      	cmp	r6, r3
 80086bc:	4682      	mov	sl, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	4690      	mov	r8, r2
 80086c2:	461f      	mov	r7, r3
 80086c4:	d838      	bhi.n	8008738 <__ssputs_r+0x84>
 80086c6:	898a      	ldrh	r2, [r1, #12]
 80086c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086cc:	d032      	beq.n	8008734 <__ssputs_r+0x80>
 80086ce:	6825      	ldr	r5, [r4, #0]
 80086d0:	6909      	ldr	r1, [r1, #16]
 80086d2:	eba5 0901 	sub.w	r9, r5, r1
 80086d6:	6965      	ldr	r5, [r4, #20]
 80086d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086e0:	3301      	adds	r3, #1
 80086e2:	444b      	add	r3, r9
 80086e4:	106d      	asrs	r5, r5, #1
 80086e6:	429d      	cmp	r5, r3
 80086e8:	bf38      	it	cc
 80086ea:	461d      	movcc	r5, r3
 80086ec:	0553      	lsls	r3, r2, #21
 80086ee:	d531      	bpl.n	8008754 <__ssputs_r+0xa0>
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7ff ff2f 	bl	8008554 <_malloc_r>
 80086f6:	4606      	mov	r6, r0
 80086f8:	b950      	cbnz	r0, 8008710 <__ssputs_r+0x5c>
 80086fa:	230c      	movs	r3, #12
 80086fc:	f8ca 3000 	str.w	r3, [sl]
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008710:	6921      	ldr	r1, [r4, #16]
 8008712:	464a      	mov	r2, r9
 8008714:	f000 fac0 	bl	8008c98 <memcpy>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800871e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	6126      	str	r6, [r4, #16]
 8008726:	6165      	str	r5, [r4, #20]
 8008728:	444e      	add	r6, r9
 800872a:	eba5 0509 	sub.w	r5, r5, r9
 800872e:	6026      	str	r6, [r4, #0]
 8008730:	60a5      	str	r5, [r4, #8]
 8008732:	463e      	mov	r6, r7
 8008734:	42be      	cmp	r6, r7
 8008736:	d900      	bls.n	800873a <__ssputs_r+0x86>
 8008738:	463e      	mov	r6, r7
 800873a:	6820      	ldr	r0, [r4, #0]
 800873c:	4632      	mov	r2, r6
 800873e:	4641      	mov	r1, r8
 8008740:	f000 fab8 	bl	8008cb4 <memmove>
 8008744:	68a3      	ldr	r3, [r4, #8]
 8008746:	1b9b      	subs	r3, r3, r6
 8008748:	60a3      	str	r3, [r4, #8]
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	4433      	add	r3, r6
 800874e:	6023      	str	r3, [r4, #0]
 8008750:	2000      	movs	r0, #0
 8008752:	e7db      	b.n	800870c <__ssputs_r+0x58>
 8008754:	462a      	mov	r2, r5
 8008756:	f000 fac7 	bl	8008ce8 <_realloc_r>
 800875a:	4606      	mov	r6, r0
 800875c:	2800      	cmp	r0, #0
 800875e:	d1e1      	bne.n	8008724 <__ssputs_r+0x70>
 8008760:	6921      	ldr	r1, [r4, #16]
 8008762:	4650      	mov	r0, sl
 8008764:	f7ff fe8a 	bl	800847c <_free_r>
 8008768:	e7c7      	b.n	80086fa <__ssputs_r+0x46>
	...

0800876c <_svfiprintf_r>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	4698      	mov	r8, r3
 8008772:	898b      	ldrh	r3, [r1, #12]
 8008774:	061b      	lsls	r3, r3, #24
 8008776:	b09d      	sub	sp, #116	; 0x74
 8008778:	4607      	mov	r7, r0
 800877a:	460d      	mov	r5, r1
 800877c:	4614      	mov	r4, r2
 800877e:	d50e      	bpl.n	800879e <_svfiprintf_r+0x32>
 8008780:	690b      	ldr	r3, [r1, #16]
 8008782:	b963      	cbnz	r3, 800879e <_svfiprintf_r+0x32>
 8008784:	2140      	movs	r1, #64	; 0x40
 8008786:	f7ff fee5 	bl	8008554 <_malloc_r>
 800878a:	6028      	str	r0, [r5, #0]
 800878c:	6128      	str	r0, [r5, #16]
 800878e:	b920      	cbnz	r0, 800879a <_svfiprintf_r+0x2e>
 8008790:	230c      	movs	r3, #12
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	e0d1      	b.n	800893e <_svfiprintf_r+0x1d2>
 800879a:	2340      	movs	r3, #64	; 0x40
 800879c:	616b      	str	r3, [r5, #20]
 800879e:	2300      	movs	r3, #0
 80087a0:	9309      	str	r3, [sp, #36]	; 0x24
 80087a2:	2320      	movs	r3, #32
 80087a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ac:	2330      	movs	r3, #48	; 0x30
 80087ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008958 <_svfiprintf_r+0x1ec>
 80087b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087b6:	f04f 0901 	mov.w	r9, #1
 80087ba:	4623      	mov	r3, r4
 80087bc:	469a      	mov	sl, r3
 80087be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087c2:	b10a      	cbz	r2, 80087c8 <_svfiprintf_r+0x5c>
 80087c4:	2a25      	cmp	r2, #37	; 0x25
 80087c6:	d1f9      	bne.n	80087bc <_svfiprintf_r+0x50>
 80087c8:	ebba 0b04 	subs.w	fp, sl, r4
 80087cc:	d00b      	beq.n	80087e6 <_svfiprintf_r+0x7a>
 80087ce:	465b      	mov	r3, fp
 80087d0:	4622      	mov	r2, r4
 80087d2:	4629      	mov	r1, r5
 80087d4:	4638      	mov	r0, r7
 80087d6:	f7ff ff6d 	bl	80086b4 <__ssputs_r>
 80087da:	3001      	adds	r0, #1
 80087dc:	f000 80aa 	beq.w	8008934 <_svfiprintf_r+0x1c8>
 80087e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087e2:	445a      	add	r2, fp
 80087e4:	9209      	str	r2, [sp, #36]	; 0x24
 80087e6:	f89a 3000 	ldrb.w	r3, [sl]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80a2 	beq.w	8008934 <_svfiprintf_r+0x1c8>
 80087f0:	2300      	movs	r3, #0
 80087f2:	f04f 32ff 	mov.w	r2, #4294967295
 80087f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087fa:	f10a 0a01 	add.w	sl, sl, #1
 80087fe:	9304      	str	r3, [sp, #16]
 8008800:	9307      	str	r3, [sp, #28]
 8008802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008806:	931a      	str	r3, [sp, #104]	; 0x68
 8008808:	4654      	mov	r4, sl
 800880a:	2205      	movs	r2, #5
 800880c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008810:	4851      	ldr	r0, [pc, #324]	; (8008958 <_svfiprintf_r+0x1ec>)
 8008812:	f7f7 fcdd 	bl	80001d0 <memchr>
 8008816:	9a04      	ldr	r2, [sp, #16]
 8008818:	b9d8      	cbnz	r0, 8008852 <_svfiprintf_r+0xe6>
 800881a:	06d0      	lsls	r0, r2, #27
 800881c:	bf44      	itt	mi
 800881e:	2320      	movmi	r3, #32
 8008820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008824:	0711      	lsls	r1, r2, #28
 8008826:	bf44      	itt	mi
 8008828:	232b      	movmi	r3, #43	; 0x2b
 800882a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800882e:	f89a 3000 	ldrb.w	r3, [sl]
 8008832:	2b2a      	cmp	r3, #42	; 0x2a
 8008834:	d015      	beq.n	8008862 <_svfiprintf_r+0xf6>
 8008836:	9a07      	ldr	r2, [sp, #28]
 8008838:	4654      	mov	r4, sl
 800883a:	2000      	movs	r0, #0
 800883c:	f04f 0c0a 	mov.w	ip, #10
 8008840:	4621      	mov	r1, r4
 8008842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008846:	3b30      	subs	r3, #48	; 0x30
 8008848:	2b09      	cmp	r3, #9
 800884a:	d94e      	bls.n	80088ea <_svfiprintf_r+0x17e>
 800884c:	b1b0      	cbz	r0, 800887c <_svfiprintf_r+0x110>
 800884e:	9207      	str	r2, [sp, #28]
 8008850:	e014      	b.n	800887c <_svfiprintf_r+0x110>
 8008852:	eba0 0308 	sub.w	r3, r0, r8
 8008856:	fa09 f303 	lsl.w	r3, r9, r3
 800885a:	4313      	orrs	r3, r2
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	46a2      	mov	sl, r4
 8008860:	e7d2      	b.n	8008808 <_svfiprintf_r+0x9c>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	1d19      	adds	r1, r3, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	9103      	str	r1, [sp, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfbb      	ittet	lt
 800886e:	425b      	neglt	r3, r3
 8008870:	f042 0202 	orrlt.w	r2, r2, #2
 8008874:	9307      	strge	r3, [sp, #28]
 8008876:	9307      	strlt	r3, [sp, #28]
 8008878:	bfb8      	it	lt
 800887a:	9204      	strlt	r2, [sp, #16]
 800887c:	7823      	ldrb	r3, [r4, #0]
 800887e:	2b2e      	cmp	r3, #46	; 0x2e
 8008880:	d10c      	bne.n	800889c <_svfiprintf_r+0x130>
 8008882:	7863      	ldrb	r3, [r4, #1]
 8008884:	2b2a      	cmp	r3, #42	; 0x2a
 8008886:	d135      	bne.n	80088f4 <_svfiprintf_r+0x188>
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	1d1a      	adds	r2, r3, #4
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	9203      	str	r2, [sp, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfb8      	it	lt
 8008894:	f04f 33ff 	movlt.w	r3, #4294967295
 8008898:	3402      	adds	r4, #2
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008968 <_svfiprintf_r+0x1fc>
 80088a0:	7821      	ldrb	r1, [r4, #0]
 80088a2:	2203      	movs	r2, #3
 80088a4:	4650      	mov	r0, sl
 80088a6:	f7f7 fc93 	bl	80001d0 <memchr>
 80088aa:	b140      	cbz	r0, 80088be <_svfiprintf_r+0x152>
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	eba0 000a 	sub.w	r0, r0, sl
 80088b2:	fa03 f000 	lsl.w	r0, r3, r0
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	4303      	orrs	r3, r0
 80088ba:	3401      	adds	r4, #1
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c2:	4826      	ldr	r0, [pc, #152]	; (800895c <_svfiprintf_r+0x1f0>)
 80088c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088c8:	2206      	movs	r2, #6
 80088ca:	f7f7 fc81 	bl	80001d0 <memchr>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d038      	beq.n	8008944 <_svfiprintf_r+0x1d8>
 80088d2:	4b23      	ldr	r3, [pc, #140]	; (8008960 <_svfiprintf_r+0x1f4>)
 80088d4:	bb1b      	cbnz	r3, 800891e <_svfiprintf_r+0x1b2>
 80088d6:	9b03      	ldr	r3, [sp, #12]
 80088d8:	3307      	adds	r3, #7
 80088da:	f023 0307 	bic.w	r3, r3, #7
 80088de:	3308      	adds	r3, #8
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e4:	4433      	add	r3, r6
 80088e6:	9309      	str	r3, [sp, #36]	; 0x24
 80088e8:	e767      	b.n	80087ba <_svfiprintf_r+0x4e>
 80088ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80088ee:	460c      	mov	r4, r1
 80088f0:	2001      	movs	r0, #1
 80088f2:	e7a5      	b.n	8008840 <_svfiprintf_r+0xd4>
 80088f4:	2300      	movs	r3, #0
 80088f6:	3401      	adds	r4, #1
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	4619      	mov	r1, r3
 80088fc:	f04f 0c0a 	mov.w	ip, #10
 8008900:	4620      	mov	r0, r4
 8008902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008906:	3a30      	subs	r2, #48	; 0x30
 8008908:	2a09      	cmp	r2, #9
 800890a:	d903      	bls.n	8008914 <_svfiprintf_r+0x1a8>
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0c5      	beq.n	800889c <_svfiprintf_r+0x130>
 8008910:	9105      	str	r1, [sp, #20]
 8008912:	e7c3      	b.n	800889c <_svfiprintf_r+0x130>
 8008914:	fb0c 2101 	mla	r1, ip, r1, r2
 8008918:	4604      	mov	r4, r0
 800891a:	2301      	movs	r3, #1
 800891c:	e7f0      	b.n	8008900 <_svfiprintf_r+0x194>
 800891e:	ab03      	add	r3, sp, #12
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	462a      	mov	r2, r5
 8008924:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <_svfiprintf_r+0x1f8>)
 8008926:	a904      	add	r1, sp, #16
 8008928:	4638      	mov	r0, r7
 800892a:	f3af 8000 	nop.w
 800892e:	1c42      	adds	r2, r0, #1
 8008930:	4606      	mov	r6, r0
 8008932:	d1d6      	bne.n	80088e2 <_svfiprintf_r+0x176>
 8008934:	89ab      	ldrh	r3, [r5, #12]
 8008936:	065b      	lsls	r3, r3, #25
 8008938:	f53f af2c 	bmi.w	8008794 <_svfiprintf_r+0x28>
 800893c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800893e:	b01d      	add	sp, #116	; 0x74
 8008940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008944:	ab03      	add	r3, sp, #12
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	462a      	mov	r2, r5
 800894a:	4b06      	ldr	r3, [pc, #24]	; (8008964 <_svfiprintf_r+0x1f8>)
 800894c:	a904      	add	r1, sp, #16
 800894e:	4638      	mov	r0, r7
 8008950:	f000 f87a 	bl	8008a48 <_printf_i>
 8008954:	e7eb      	b.n	800892e <_svfiprintf_r+0x1c2>
 8008956:	bf00      	nop
 8008958:	08008db0 	.word	0x08008db0
 800895c:	08008dba 	.word	0x08008dba
 8008960:	00000000 	.word	0x00000000
 8008964:	080086b5 	.word	0x080086b5
 8008968:	08008db6 	.word	0x08008db6

0800896c <_printf_common>:
 800896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	4616      	mov	r6, r2
 8008972:	4699      	mov	r9, r3
 8008974:	688a      	ldr	r2, [r1, #8]
 8008976:	690b      	ldr	r3, [r1, #16]
 8008978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800897c:	4293      	cmp	r3, r2
 800897e:	bfb8      	it	lt
 8008980:	4613      	movlt	r3, r2
 8008982:	6033      	str	r3, [r6, #0]
 8008984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008988:	4607      	mov	r7, r0
 800898a:	460c      	mov	r4, r1
 800898c:	b10a      	cbz	r2, 8008992 <_printf_common+0x26>
 800898e:	3301      	adds	r3, #1
 8008990:	6033      	str	r3, [r6, #0]
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	0699      	lsls	r1, r3, #26
 8008996:	bf42      	ittt	mi
 8008998:	6833      	ldrmi	r3, [r6, #0]
 800899a:	3302      	addmi	r3, #2
 800899c:	6033      	strmi	r3, [r6, #0]
 800899e:	6825      	ldr	r5, [r4, #0]
 80089a0:	f015 0506 	ands.w	r5, r5, #6
 80089a4:	d106      	bne.n	80089b4 <_printf_common+0x48>
 80089a6:	f104 0a19 	add.w	sl, r4, #25
 80089aa:	68e3      	ldr	r3, [r4, #12]
 80089ac:	6832      	ldr	r2, [r6, #0]
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	42ab      	cmp	r3, r5
 80089b2:	dc26      	bgt.n	8008a02 <_printf_common+0x96>
 80089b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089b8:	1e13      	subs	r3, r2, #0
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	bf18      	it	ne
 80089be:	2301      	movne	r3, #1
 80089c0:	0692      	lsls	r2, r2, #26
 80089c2:	d42b      	bmi.n	8008a1c <_printf_common+0xb0>
 80089c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089c8:	4649      	mov	r1, r9
 80089ca:	4638      	mov	r0, r7
 80089cc:	47c0      	blx	r8
 80089ce:	3001      	adds	r0, #1
 80089d0:	d01e      	beq.n	8008a10 <_printf_common+0xa4>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	68e5      	ldr	r5, [r4, #12]
 80089d6:	6832      	ldr	r2, [r6, #0]
 80089d8:	f003 0306 	and.w	r3, r3, #6
 80089dc:	2b04      	cmp	r3, #4
 80089de:	bf08      	it	eq
 80089e0:	1aad      	subeq	r5, r5, r2
 80089e2:	68a3      	ldr	r3, [r4, #8]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	bf0c      	ite	eq
 80089e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089ec:	2500      	movne	r5, #0
 80089ee:	4293      	cmp	r3, r2
 80089f0:	bfc4      	itt	gt
 80089f2:	1a9b      	subgt	r3, r3, r2
 80089f4:	18ed      	addgt	r5, r5, r3
 80089f6:	2600      	movs	r6, #0
 80089f8:	341a      	adds	r4, #26
 80089fa:	42b5      	cmp	r5, r6
 80089fc:	d11a      	bne.n	8008a34 <_printf_common+0xc8>
 80089fe:	2000      	movs	r0, #0
 8008a00:	e008      	b.n	8008a14 <_printf_common+0xa8>
 8008a02:	2301      	movs	r3, #1
 8008a04:	4652      	mov	r2, sl
 8008a06:	4649      	mov	r1, r9
 8008a08:	4638      	mov	r0, r7
 8008a0a:	47c0      	blx	r8
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d103      	bne.n	8008a18 <_printf_common+0xac>
 8008a10:	f04f 30ff 	mov.w	r0, #4294967295
 8008a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a18:	3501      	adds	r5, #1
 8008a1a:	e7c6      	b.n	80089aa <_printf_common+0x3e>
 8008a1c:	18e1      	adds	r1, r4, r3
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	2030      	movs	r0, #48	; 0x30
 8008a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a26:	4422      	add	r2, r4
 8008a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a30:	3302      	adds	r3, #2
 8008a32:	e7c7      	b.n	80089c4 <_printf_common+0x58>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4622      	mov	r2, r4
 8008a38:	4649      	mov	r1, r9
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	47c0      	blx	r8
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d0e6      	beq.n	8008a10 <_printf_common+0xa4>
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7d9      	b.n	80089fa <_printf_common+0x8e>
	...

08008a48 <_printf_i>:
 8008a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	7e0f      	ldrb	r7, [r1, #24]
 8008a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a50:	2f78      	cmp	r7, #120	; 0x78
 8008a52:	4691      	mov	r9, r2
 8008a54:	4680      	mov	r8, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	469a      	mov	sl, r3
 8008a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a5e:	d807      	bhi.n	8008a70 <_printf_i+0x28>
 8008a60:	2f62      	cmp	r7, #98	; 0x62
 8008a62:	d80a      	bhi.n	8008a7a <_printf_i+0x32>
 8008a64:	2f00      	cmp	r7, #0
 8008a66:	f000 80d8 	beq.w	8008c1a <_printf_i+0x1d2>
 8008a6a:	2f58      	cmp	r7, #88	; 0x58
 8008a6c:	f000 80a3 	beq.w	8008bb6 <_printf_i+0x16e>
 8008a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a78:	e03a      	b.n	8008af0 <_printf_i+0xa8>
 8008a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a7e:	2b15      	cmp	r3, #21
 8008a80:	d8f6      	bhi.n	8008a70 <_printf_i+0x28>
 8008a82:	a101      	add	r1, pc, #4	; (adr r1, 8008a88 <_printf_i+0x40>)
 8008a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a88:	08008ae1 	.word	0x08008ae1
 8008a8c:	08008af5 	.word	0x08008af5
 8008a90:	08008a71 	.word	0x08008a71
 8008a94:	08008a71 	.word	0x08008a71
 8008a98:	08008a71 	.word	0x08008a71
 8008a9c:	08008a71 	.word	0x08008a71
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008a71 	.word	0x08008a71
 8008aa8:	08008a71 	.word	0x08008a71
 8008aac:	08008a71 	.word	0x08008a71
 8008ab0:	08008a71 	.word	0x08008a71
 8008ab4:	08008c01 	.word	0x08008c01
 8008ab8:	08008b25 	.word	0x08008b25
 8008abc:	08008be3 	.word	0x08008be3
 8008ac0:	08008a71 	.word	0x08008a71
 8008ac4:	08008a71 	.word	0x08008a71
 8008ac8:	08008c23 	.word	0x08008c23
 8008acc:	08008a71 	.word	0x08008a71
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008a71 	.word	0x08008a71
 8008ad8:	08008a71 	.word	0x08008a71
 8008adc:	08008beb 	.word	0x08008beb
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	1d1a      	adds	r2, r3, #4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	602a      	str	r2, [r5, #0]
 8008ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008af0:	2301      	movs	r3, #1
 8008af2:	e0a3      	b.n	8008c3c <_printf_i+0x1f4>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	6829      	ldr	r1, [r5, #0]
 8008af8:	0606      	lsls	r6, r0, #24
 8008afa:	f101 0304 	add.w	r3, r1, #4
 8008afe:	d50a      	bpl.n	8008b16 <_printf_i+0xce>
 8008b00:	680e      	ldr	r6, [r1, #0]
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	da03      	bge.n	8008b10 <_printf_i+0xc8>
 8008b08:	232d      	movs	r3, #45	; 0x2d
 8008b0a:	4276      	negs	r6, r6
 8008b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b10:	485e      	ldr	r0, [pc, #376]	; (8008c8c <_printf_i+0x244>)
 8008b12:	230a      	movs	r3, #10
 8008b14:	e019      	b.n	8008b4a <_printf_i+0x102>
 8008b16:	680e      	ldr	r6, [r1, #0]
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b1e:	bf18      	it	ne
 8008b20:	b236      	sxthne	r6, r6
 8008b22:	e7ef      	b.n	8008b04 <_printf_i+0xbc>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	1d19      	adds	r1, r3, #4
 8008b2a:	6029      	str	r1, [r5, #0]
 8008b2c:	0601      	lsls	r1, r0, #24
 8008b2e:	d501      	bpl.n	8008b34 <_printf_i+0xec>
 8008b30:	681e      	ldr	r6, [r3, #0]
 8008b32:	e002      	b.n	8008b3a <_printf_i+0xf2>
 8008b34:	0646      	lsls	r6, r0, #25
 8008b36:	d5fb      	bpl.n	8008b30 <_printf_i+0xe8>
 8008b38:	881e      	ldrh	r6, [r3, #0]
 8008b3a:	4854      	ldr	r0, [pc, #336]	; (8008c8c <_printf_i+0x244>)
 8008b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b3e:	bf0c      	ite	eq
 8008b40:	2308      	moveq	r3, #8
 8008b42:	230a      	movne	r3, #10
 8008b44:	2100      	movs	r1, #0
 8008b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b4a:	6865      	ldr	r5, [r4, #4]
 8008b4c:	60a5      	str	r5, [r4, #8]
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	bfa2      	ittt	ge
 8008b52:	6821      	ldrge	r1, [r4, #0]
 8008b54:	f021 0104 	bicge.w	r1, r1, #4
 8008b58:	6021      	strge	r1, [r4, #0]
 8008b5a:	b90e      	cbnz	r6, 8008b60 <_printf_i+0x118>
 8008b5c:	2d00      	cmp	r5, #0
 8008b5e:	d04d      	beq.n	8008bfc <_printf_i+0x1b4>
 8008b60:	4615      	mov	r5, r2
 8008b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b66:	fb03 6711 	mls	r7, r3, r1, r6
 8008b6a:	5dc7      	ldrb	r7, [r0, r7]
 8008b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b70:	4637      	mov	r7, r6
 8008b72:	42bb      	cmp	r3, r7
 8008b74:	460e      	mov	r6, r1
 8008b76:	d9f4      	bls.n	8008b62 <_printf_i+0x11a>
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d10b      	bne.n	8008b94 <_printf_i+0x14c>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	07de      	lsls	r6, r3, #31
 8008b80:	d508      	bpl.n	8008b94 <_printf_i+0x14c>
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	6861      	ldr	r1, [r4, #4]
 8008b86:	4299      	cmp	r1, r3
 8008b88:	bfde      	ittt	le
 8008b8a:	2330      	movle	r3, #48	; 0x30
 8008b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b94:	1b52      	subs	r2, r2, r5
 8008b96:	6122      	str	r2, [r4, #16]
 8008b98:	f8cd a000 	str.w	sl, [sp]
 8008b9c:	464b      	mov	r3, r9
 8008b9e:	aa03      	add	r2, sp, #12
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f7ff fee2 	bl	800896c <_printf_common>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d14c      	bne.n	8008c46 <_printf_i+0x1fe>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	b004      	add	sp, #16
 8008bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb6:	4835      	ldr	r0, [pc, #212]	; (8008c8c <_printf_i+0x244>)
 8008bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bbc:	6829      	ldr	r1, [r5, #0]
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bc4:	6029      	str	r1, [r5, #0]
 8008bc6:	061d      	lsls	r5, r3, #24
 8008bc8:	d514      	bpl.n	8008bf4 <_printf_i+0x1ac>
 8008bca:	07df      	lsls	r7, r3, #31
 8008bcc:	bf44      	itt	mi
 8008bce:	f043 0320 	orrmi.w	r3, r3, #32
 8008bd2:	6023      	strmi	r3, [r4, #0]
 8008bd4:	b91e      	cbnz	r6, 8008bde <_printf_i+0x196>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f023 0320 	bic.w	r3, r3, #32
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	2310      	movs	r3, #16
 8008be0:	e7b0      	b.n	8008b44 <_printf_i+0xfc>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	f043 0320 	orr.w	r3, r3, #32
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	2378      	movs	r3, #120	; 0x78
 8008bec:	4828      	ldr	r0, [pc, #160]	; (8008c90 <_printf_i+0x248>)
 8008bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bf2:	e7e3      	b.n	8008bbc <_printf_i+0x174>
 8008bf4:	0659      	lsls	r1, r3, #25
 8008bf6:	bf48      	it	mi
 8008bf8:	b2b6      	uxthmi	r6, r6
 8008bfa:	e7e6      	b.n	8008bca <_printf_i+0x182>
 8008bfc:	4615      	mov	r5, r2
 8008bfe:	e7bb      	b.n	8008b78 <_printf_i+0x130>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	6826      	ldr	r6, [r4, #0]
 8008c04:	6961      	ldr	r1, [r4, #20]
 8008c06:	1d18      	adds	r0, r3, #4
 8008c08:	6028      	str	r0, [r5, #0]
 8008c0a:	0635      	lsls	r5, r6, #24
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	d501      	bpl.n	8008c14 <_printf_i+0x1cc>
 8008c10:	6019      	str	r1, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <_printf_i+0x1d2>
 8008c14:	0670      	lsls	r0, r6, #25
 8008c16:	d5fb      	bpl.n	8008c10 <_printf_i+0x1c8>
 8008c18:	8019      	strh	r1, [r3, #0]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	6123      	str	r3, [r4, #16]
 8008c1e:	4615      	mov	r5, r2
 8008c20:	e7ba      	b.n	8008b98 <_printf_i+0x150>
 8008c22:	682b      	ldr	r3, [r5, #0]
 8008c24:	1d1a      	adds	r2, r3, #4
 8008c26:	602a      	str	r2, [r5, #0]
 8008c28:	681d      	ldr	r5, [r3, #0]
 8008c2a:	6862      	ldr	r2, [r4, #4]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f7f7 face 	bl	80001d0 <memchr>
 8008c34:	b108      	cbz	r0, 8008c3a <_printf_i+0x1f2>
 8008c36:	1b40      	subs	r0, r0, r5
 8008c38:	6060      	str	r0, [r4, #4]
 8008c3a:	6863      	ldr	r3, [r4, #4]
 8008c3c:	6123      	str	r3, [r4, #16]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c44:	e7a8      	b.n	8008b98 <_printf_i+0x150>
 8008c46:	6923      	ldr	r3, [r4, #16]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	47d0      	blx	sl
 8008c50:	3001      	adds	r0, #1
 8008c52:	d0ab      	beq.n	8008bac <_printf_i+0x164>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	079b      	lsls	r3, r3, #30
 8008c58:	d413      	bmi.n	8008c82 <_printf_i+0x23a>
 8008c5a:	68e0      	ldr	r0, [r4, #12]
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	4298      	cmp	r0, r3
 8008c60:	bfb8      	it	lt
 8008c62:	4618      	movlt	r0, r3
 8008c64:	e7a4      	b.n	8008bb0 <_printf_i+0x168>
 8008c66:	2301      	movs	r3, #1
 8008c68:	4632      	mov	r2, r6
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	47d0      	blx	sl
 8008c70:	3001      	adds	r0, #1
 8008c72:	d09b      	beq.n	8008bac <_printf_i+0x164>
 8008c74:	3501      	adds	r5, #1
 8008c76:	68e3      	ldr	r3, [r4, #12]
 8008c78:	9903      	ldr	r1, [sp, #12]
 8008c7a:	1a5b      	subs	r3, r3, r1
 8008c7c:	42ab      	cmp	r3, r5
 8008c7e:	dcf2      	bgt.n	8008c66 <_printf_i+0x21e>
 8008c80:	e7eb      	b.n	8008c5a <_printf_i+0x212>
 8008c82:	2500      	movs	r5, #0
 8008c84:	f104 0619 	add.w	r6, r4, #25
 8008c88:	e7f5      	b.n	8008c76 <_printf_i+0x22e>
 8008c8a:	bf00      	nop
 8008c8c:	08008dc1 	.word	0x08008dc1
 8008c90:	08008dd2 	.word	0x08008dd2

08008c94 <__retarget_lock_acquire_recursive>:
 8008c94:	4770      	bx	lr

08008c96 <__retarget_lock_release_recursive>:
 8008c96:	4770      	bx	lr

08008c98 <memcpy>:
 8008c98:	440a      	add	r2, r1
 8008c9a:	4291      	cmp	r1, r2
 8008c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ca0:	d100      	bne.n	8008ca4 <memcpy+0xc>
 8008ca2:	4770      	bx	lr
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	d1f9      	bne.n	8008ca6 <memcpy+0xe>
 8008cb2:	bd10      	pop	{r4, pc}

08008cb4 <memmove>:
 8008cb4:	4288      	cmp	r0, r1
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	eb01 0402 	add.w	r4, r1, r2
 8008cbc:	d902      	bls.n	8008cc4 <memmove+0x10>
 8008cbe:	4284      	cmp	r4, r0
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	d807      	bhi.n	8008cd4 <memmove+0x20>
 8008cc4:	1e43      	subs	r3, r0, #1
 8008cc6:	42a1      	cmp	r1, r4
 8008cc8:	d008      	beq.n	8008cdc <memmove+0x28>
 8008cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cd2:	e7f8      	b.n	8008cc6 <memmove+0x12>
 8008cd4:	4402      	add	r2, r0
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	428a      	cmp	r2, r1
 8008cda:	d100      	bne.n	8008cde <memmove+0x2a>
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ce6:	e7f7      	b.n	8008cd8 <memmove+0x24>

08008ce8 <_realloc_r>:
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	4680      	mov	r8, r0
 8008cee:	4614      	mov	r4, r2
 8008cf0:	460e      	mov	r6, r1
 8008cf2:	b921      	cbnz	r1, 8008cfe <_realloc_r+0x16>
 8008cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	f7ff bc2b 	b.w	8008554 <_malloc_r>
 8008cfe:	b92a      	cbnz	r2, 8008d0c <_realloc_r+0x24>
 8008d00:	f7ff fbbc 	bl	800847c <_free_r>
 8008d04:	4625      	mov	r5, r4
 8008d06:	4628      	mov	r0, r5
 8008d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d0c:	f000 f81b 	bl	8008d46 <_malloc_usable_size_r>
 8008d10:	4284      	cmp	r4, r0
 8008d12:	4607      	mov	r7, r0
 8008d14:	d802      	bhi.n	8008d1c <_realloc_r+0x34>
 8008d16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d1a:	d812      	bhi.n	8008d42 <_realloc_r+0x5a>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4640      	mov	r0, r8
 8008d20:	f7ff fc18 	bl	8008554 <_malloc_r>
 8008d24:	4605      	mov	r5, r0
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0ed      	beq.n	8008d06 <_realloc_r+0x1e>
 8008d2a:	42bc      	cmp	r4, r7
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4631      	mov	r1, r6
 8008d30:	bf28      	it	cs
 8008d32:	463a      	movcs	r2, r7
 8008d34:	f7ff ffb0 	bl	8008c98 <memcpy>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	f7ff fb9e 	bl	800847c <_free_r>
 8008d40:	e7e1      	b.n	8008d06 <_realloc_r+0x1e>
 8008d42:	4635      	mov	r5, r6
 8008d44:	e7df      	b.n	8008d06 <_realloc_r+0x1e>

08008d46 <_malloc_usable_size_r>:
 8008d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4a:	1f18      	subs	r0, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfbc      	itt	lt
 8008d50:	580b      	ldrlt	r3, [r1, r0]
 8008d52:	18c0      	addlt	r0, r0, r3
 8008d54:	4770      	bx	lr
	...

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
